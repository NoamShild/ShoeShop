const express = require('express');
const app = express();
const port = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// Sample product data
const products = [
  { 
    id: 1, 
    brand: 'Nike', 
    model: 'Air Force 1', 
    description: 'style, fashion', 
    price: 300, 
    image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
    categories: ['woman', 'sports', 'fashion']
  },
  { 
    id: 2, 
    brand: 'New Balance', 
    model: '574 Classic', 
    description: 'style, fashion, running', 
    price: 630, 
    image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
    categories: ['sports']
  }
];

// Cart data
const cart = {};

// API endpoint to get products
app.get('/api/products', (req, res) => {
  try {
    const { search, maxPrice, type, category } = req.query;

    let filteredProducts = products.filter(product => {
      const meetsTextCriteria = search ? 
        (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
        (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
        (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
      const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
      const meetsCategoryCriteria = category ? product.categories.includes(category) : true;

      return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria;
    });

    res.json(filteredProducts);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
  try {
    const brandCounts = products.reduce((acc, product) => {
      acc[product.brand] = (acc[product.brand] || 0) + 1;
      return acc;
    }, {});

    res.json(brandCounts);
  } catch (error) {
    console.error('Error fetching brands:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

// API endpoint to add item to cart
app.post('/api/cart', (req, res) => {
  try {
    const { productId } = req.body;
    const product = products.find(p => p.id === productId);

    if (product) {
      if (cart[productId]) {
        cart[productId].quantity++;
      } else {
        cart[productId] = { ...product, quantity: 1 };
      }
      res.json(cart);
    } else {
      res.status(404).json({ message: 'Product not found' });
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

// API endpoint to remove item from cart
app.delete('/api/cart', (req, res) => {
  try {
    const { productId } = req.body;

    if (cart[productId]) {
      if (cart[productId].quantity > 1) {
        cart[productId].quantity--;
      } else {
        delete cart[productId];
      }
      res.json(cart);
    } else {
      res.status(404).json({ message: 'Product not in cart' });
    }
  } catch (error) {
    console.error('Error removing from cart:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

app.use(express.static('public'));

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Catalog</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
        }
        #mainContent {
            flex: 1;
            padding-right: 250px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 250px;
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
        }
        #sidebar.hidden {
            display: none;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
            margin-right: 20px;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }
        .product img {
            max-width: 100%;
            height: auto;
            display: block;
        }
        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            flex-grow: 1;
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #filtersToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
        }
        #showFilters {
            position: fixed;
            right: 0;
            top: 0;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 0 0 0 5px;
            cursor: pointer;
            display: none;
        }
    </style>
</head>
<body>
    <div id="mainContent">
        <div id="header">
            <div id="cartIcon" class="fas fa-shopping-cart">
                <div id="cartCount">0</div>
            </div>
            <h1 style="margin-left: 20px;">Product Catalog</h1>
        </div>
        <div id="categoryContainer">
            <button class="category-button" onclick="fetchProductsByCategory('on sale', this)">On Sale</button>
            <button class="category-button" onclick="fetchProductsByCategory('babys', this)">Babys</button>
            <button class="category-button" onclick="fetchProductsByCategory('woman', this)">Woman</button>
            <button class="category-button" onclick="fetchProductsByCategory('man', this)">Man</button>
            <button class="category-button" onclick="fetchProductsByCategory('sports', this)">Sports</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters <span id="filtersToggle" style="float: right; cursor: pointer;">X</span></h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="9999" value="9999" oninput="updatePriceValue()">
        <span id="priceRangeValue">9999</span>
        <button class="filter-button" onclick="fetchProducts()">Search All</button>
        <button class="filter-button" onclick="fetchProductsByType('brand')">Search by Brand</button>
        <div id="availableBrandsToggle" onclick="toggleAvailableBrands()">Available Brands</div>
        <div id="availableBrands"></div>
    </div>
    <div id="showFilters" onclick="toggleFilters()">Filters</div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const filtersToggle = document.getElementById('filtersToggle');
        const showFilters = document.getElementById('showFilters');
        const cart = {};
        let activeCategoryButton = null;

        cartIcon.addEventListener('click', () => {
            cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
        });

        filtersToggle.addEventListener('click', () => {
            sidebar.classList.toggle('hidden');
            showFilters.style.display = sidebar.classList.contains('hidden') ? 'block' : 'none';
        });

        availableBrandsToggle.addEventListener('click', () => {
            availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
        });

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            fetch(`http://localhost:3000/api/products?category=${category}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('div');
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === productId);
                    if (product) {
                        if (cart[productId]) {
                            cart[productId].quantity++;
                        } else {
                            cart[productId] = { ...product, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            if (cart[productId]) {
                if (cart[productId].quantity > 1) {
                    cart[productId].quantity--;
                } else {
                    delete cart[productId];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button onclick="removeFromCart(${item.id})">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }

        searchInput.addEventListener('keyup', function(event) {
            if (event.key === "Enter") {
                fetchProducts();
            }
        });

        priceRange.addEventListener('input', function(event) {
            fetchProducts();
        });

        function toggleFilters() {
            sidebar.classList.toggle('hidden');
            showFilters.style.display = sidebar.classList.contains('hidden') ? 'block' : 'none';
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Catalog</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
        }
        #mainContent {
            flex: 1;
            padding-right: 250px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 250px;
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }
        .product img {
            max-width: 100%;
            height: auto;
            display: block;
        }
        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            flex-grow: 1;
            text-align: center;
            flex: 1;
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="mainContent">
        <div id="header">
            <div id="cartIcon" class="fas fa-shopping-cart">
                <div id="cartCount">0</div>
            </div>
            <h1 style="margin-left: 20px;">Product Catalog</h1>
            <div id="showFilters" class="fas fa-bars"></div>
        </div>
        <div id="categoryContainer">
            <button class="category-button" onclick="fetchProductsByCategory('on sale', this)">On Sale</button>
            <button class="category-button" onclick="fetchProductsByCategory('babys', this)">Babys</button>
            <button class="category-button" onclick="fetchProductsByCategory('woman', this)">Woman</button>
            <button class="category-button" onclick="fetchProductsByCategory('man', this)">Man</button>
            <button class="category-button" onclick="fetchProductsByCategory('sports', this)">Sports</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="9999" value="9999" oninput="updatePriceValue()">
        <span id="priceRangeValue">9999</span>
        <button class="filter-button" onclick="fetchProducts()">Search All</button>
        <button class="filter-button" onclick="fetchProductsByType('brand')">Search by Brand</button>
        <div id="availableBrandsToggle" onclick="toggleAvailableBrands()">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        cartIcon.addEventListener('click', () => {
            cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
        });

        showFilters.addEventListener('click', () => {
            sidebar.classList.add('open');
            showFilters.style.display = 'none';
            filtersClose.style.display = 'block';
        });

        filtersClose.addEventListener('click', () => {
            sidebar.classList.remove('open');
            showFilters.style.display = 'block';
            filtersClose.style.display = 'none';
        });

        availableBrandsToggle.addEventListener('click', () => {
            availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
        });

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            fetch(`http://localhost:3000/api/products?category=${category}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('div');
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === productId);
                    if (product) {
                        if (cart[productId]) {
                            cart[productId].quantity++;
                        } else {
                            cart[productId] = { ...product, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            if (cart[productId]) {
                if (cart[productId].quantity > 1) {
                    cart[productId].quantity--;
                } else {
                    delete cart[productId];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button onclick="removeFromCart(${item.id})">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }

        searchInput.addEventListener('keyup', function(event) {
            if (event.key === "Enter") {
                fetchProducts();
            }
        });

        priceRange.addEventListener('input', function(event) {
            fetchProducts();
        });

        function toggleFilters() {
            sidebar.classList.toggle('hidden');
            showFilters.style.display = sidebar.classList.contains('hidden') ? 'block' : 'none';
        }
    </script>
</body>
</html>
const express = require('express');
const app = express();
const port = 3000;

// Sample product data
const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion']
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports']
    },
    {
        id: 3,
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/24a2b4a586fb4ecb8e2aac23013b4fbd_9366/Ultraboost_22_Shoes_Black_GX3061_01_standard.jpg',
        categories: ['man', 'sports']
    },
    {
        id: 4,
        brand: 'Puma',
        model: 'Suede Classic',
        description: 'style, fashion, casual',
        price: 70,
        image: 'https://images.puma.net/images/192055/03/sv01/fnd/PNA/w/1000/h/1000/bg/255,255,255',
        categories: ['woman', 'fashion']
    },
    {
        id: 5,
        brand: 'Reebok',
        model: 'Classic Leather',
        description: 'classic, fashion, casual',
        price: 75,
        image: 'https://assets.reebok.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/7eecf8e8c0a9430bb6ddacb30007b50e_9366/Classic_Leather_Shoes_White_49799_01_standard.jpg',
        categories: ['woman', 'fashion']
    },
    {
        id: 6,
        brand: 'Vans',
        model: 'Old Skool',
        description: 'classic, skateboarding, casual',
        price: 60,
        image: 'https://images.vans.com/is/image/VansEU/VN000D3HNVY-HERO?$583x583$',
        categories: ['man', 'fashion']
    }
];

// API endpoint to get products
app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

app.use(express.static('public'));

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
const express = require('express');
const app = express();
const port = 3000;

// Sample product data
const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion']
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports']
    },
    {
        id: 3,
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/24a2b4a586fb4ecb8e2aac23013b4fbd_9366/Ultraboost_22_Shoes_Black_GX3061_01_standard.jpg',
        categories: ['man', 'sports']
    },
    {
        id: 4,
        brand: 'Puma',
        model: 'Suede Classic',
        description: 'style, fashion, casual',
        price: 70,
        image: 'https://images.puma.net/images/192055/03/sv01/fnd/PNA/w/1000/h/1000/bg/255,255,255',
        categories: ['woman', 'fashion']
    },
    {
        id: 5,
        brand: 'Reebok',
        model: 'Classic Leather',
        description: 'classic, fashion, casual',
        price: 75,
        image: 'https://assets.reebok.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/7eecf8e8c0a9430bb6ddacb30007b50e_9366/Classic_Leather_Shoes_White_49799_01_standard.jpg',
        categories: ['woman', 'fashion']
    },
    {
        id: 6,
        brand: 'Vans',
        model: 'Old Skool',
        description: 'classic, skateboarding, casual',
        price: 60,
        image: 'https://images.vans.com/is/image/VansEU/VN000D3HNVY-HERO?$583x583$',
        categories: ['man', 'fashion']
    },
    {
        id: 7,
        brand: 'Converse',
        model: 'Chuck Taylor All Star',
        description: 'classic, casual, unisex',
        price: 55,
        image: 'https://images.converse.com/is/image/Converse/C162050C_STANDARD_PDP?$PDP-SKU$',
        categories: ['unisex', 'fashion']
    },
    {
        id: 8,
        brand: 'Asics',
        model: 'Gel-Kayano',
        description: 'comfort, running',
        price: 160,
        image: 'https://cdn.runrepeat.com/i/asics/29098/asics-gel-kayano-27-men-silver-black-glow-yellow-1200.jpg',
        categories: ['man', 'sports']
    },
    {
        id: 9,
        brand: 'Under Armour',
        model: 'Curry 7',
        description: 'basketball, sports',
        price: 140,
        image: 'https://underarmour.scene7.com/is/image/Underarmour/3021258-100_DEFAULT?rp=standard-01-regular',
        categories: ['man', 'sports']
    },
    {
        id: 10,
        brand: 'Saucony',
        model: 'Jazz Original Vintage',
        description: 'classic, retro',
        price: 80,
        image: 'https://cdn.runrepeat.com/i/saucony/30739/saucony-jazz-original-vintage-shadow-grey-black-9907-1200.jpg',
        categories: ['unisex', 'fashion']
    }
];

// API endpoint to get products
app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

app.use(express.static('public'));

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* Include the updated CSS here */
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" onclick="fetchProductsByCategory('on sale', this)">On Sale</button>
            <button class="category-button" onclick="fetchProductsByCategory('babys', this)">Babys</button>
            <button class="category-button" onclick="fetchProductsByCategory('woman', this)">Woman</button>
            <button class="category-button" onclick="fetchProductsByCategory('man', this)">Man</button>
            <button class="category-button" onclick="fetchProductsByCategory('sports', this)">Sports</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="9999" value="9999" oninput="updatePriceValue()">
        <span id="priceRangeValue">9999</span>
        <button class="filter-button" onclick="fetchProducts()">Search All</button>
        <button class="filter-button" onclick="fetchProductsByType('brand')">Search by Brand</button>
        <div id="availableBrandsToggle" onclick="toggleAvailableBrands()">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        cartIcon.addEventListener('click', () => {
            cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
        });

        showFilters.addEventListener('click', () => {
            sidebar.classList.add('open');
            showFilters.style.display = 'none';
            filtersClose.style.display = 'block';
        });

        filtersClose.addEventListener('click', () => {
            sidebar.classList.remove('open');
            showFilters.style.display = 'block';
            filtersClose.style.display = 'none';
        });

        availableBrandsToggle.addEventListener('click', () => {
            availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
        });

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            fetch(`http://localhost:3000/api/products?category=${category}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button onclick="addToCart(${product.id})">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('div');
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === productId);
                    if (product) {
                        if (cart[productId]) {
                            cart[productId].quantity++;
                        } else {
                            cart[productId] = { ...product, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            if (cart[productId]) {
                if (cart[productId].quantity > 1) {
                    cart[productId].quantity--;
                } else {
                    delete cart[productId];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button onclick="removeFromCart(${item.id})">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }

        searchInput.addEventListener('keyup', function(event) {
            if (event.key === "Enter") {
                fetchProducts();
            }
        });

        priceRange.addEventListener('input', function(event) {
            fetchProducts();
        });

        function toggleFilters() {
            sidebar.classList.toggle('hidden');
            showFilters.style.display = sidebar.classList.contains('hidden') ? 'block' : 'none';
        }
    </script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

cartIcon.addEventListener('click', () => {
    cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
});

showFilters.addEventListener('click', () => {
    sidebar.classList.add('open');
    showFilters.style.display = 'none';
    filtersClose.style.display = 'block';
});

filtersClose.addEventListener('click', () => {
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';
});

availableBrandsToggle.addEventListener('click', () => {
    availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
});

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    <button onclick="addToCart(${product.id})">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    <button onclick="addToCart(${product.id})">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    fetch(`http://localhost:3000/api/products?category=${category}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    <button onclick="addToCart(${product.id})">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Management</title>
    <style>
        /* Add your CSS here */
    </style>
</head>
<body>
    <h1>Admin Management</h1>
    <div id="adminPanel">
        <h2>Add New Product</h2>
        <form id="addProductForm">
            <input type="text" id="newBrand" placeholder="Brand" required>
            <input type="text" id="newModel" placeholder="Model" required>
            <input type="text" id="newDescription" placeholder="Description" required>
            <input type="number" id="newPrice" placeholder="Price" required>
            <input type="url" id="newImage" placeholder="Image URL" required>
            <input type="text" id="newCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Add Product</button>
        </form>

        <h2>Manage Products</h2>
        <div id="productList"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
        });

        const addProductForm = document.getElementById('addProductForm');

        addProductForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const newProduct = {
                brand: document.getElementById('newBrand').value,
                model: document.getElementById('newModel').value,
                description: document.getElementById('newDescription').value,
                price: document.getElementById('newPrice').value,
                image: document.getElementById('newImage').value,
                categories: document.getElementById('newCategories').value.split(',')
            };

            fetch('http://localhost:3000/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newProduct)
            })
            .then(response => response.json())
            .then(product => {
                console.log('Product added:', product);
                fetchProducts();
            })
            .catch(error => {
                console.error('Error adding product:', error);
            });
        });

        function fetchProducts() {
            fetch('http://localhost:3000/api/products')
                .then(response => response.json())
                .then(products => {
                    const productList = document.getElementById('productList');
                    productList.innerHTML = ''; // Clear previous products

                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="${product.model}" width="100">
                            <button onclick="removeProduct(${product.id})">Remove</button>
                            <button onclick="showUpdateForm(${product.id})">Update</button>
                        `;
                        productList.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function removeProduct(productId) {
            fetch(`http://localhost:3000/api/products/${productId}`, {
                method: 'DELETE'
            })
            .then(() => {
                console.log('Product removed');
                fetchProducts();
            })
            .catch(error => {
                console.error('Error removing product:', error);
            });
        }

        function showUpdateForm(productId) {
            // Implement functionality to show and handle the update form for a specific product
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #adminPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        h2 {
            margin-top: 0;
        }
        #productList {
            margin-top: 20px;
        }
        .product {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }
        .product img {
            width: 50px;
            height: auto;
            margin-right: 10px;
        }
        .product h3, .product p {
            margin: 0;
        }
        .product button {
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <h1>Admin Management</h1>
    <div id="adminPanel">
        <h2>Add New Product</h2>
        <form id="addProductForm">
            <input type="text" id="newBrand" placeholder="Brand" required>
            <input type="text" id="newModel" placeholder="Model" required>
            <input type="text" id="newDescription" placeholder="Description" required>
            <input type="number" id="newPrice" placeholder="Price" required>
            <input type="url" id="newImage" placeholder="Image URL" required>
            <input type="text" id="newCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Add Product</button>
        </form>

        <h2>Manage Products</h2>
        <div id="productList"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
        });

        const addProductForm = document.getElementById('addProductForm');

        addProductForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const newProduct = {
                brand: document.getElementById('newBrand').value,
                model: document.getElementById('newModel').value,
                description: document.getElementById('newDescription').value,
                price: document.getElementById('newPrice').value,
                image: document.getElementById('newImage').value,
                categories: document.getElementById('newCategories').value.split(',')
            };

            fetch('http://localhost:3000/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newProduct)
            })
            .then(response => response.json())
            .then(product => {
                console.log('Product added:', product);
                fetchProducts();
            })
            .catch(error => {
                console.error('Error adding product:', error);
            });
        });

        function fetchProducts() {
            fetch('http://localhost:3000/api/products')
                .then(response => response.json())
                .then(products => {
                    const productList = document.getElementById('productList');
                    productList.innerHTML = ''; // Clear previous products

                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div>
                                <h3>${product.brand} - ${product.model}</h3>
                                <p>${product.description}</p>
                                <p>Price: $${product.price}</p>
                                <img src="${product.image}" alt="${product.model}">
                            </div>
                            <div>
                                <button onclick="removeProduct(${product.id})">Remove</button>
                                <button onclick="showUpdateForm(${product.id})">Update</button>
                            </div>
                        `;
                        productList.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function removeProduct(productId) {
            fetch(`http://localhost:3000/api/products/${productId}`, {
                method: 'DELETE'
            })
            .then(() => {
                console.log('Product removed');
                fetchProducts();
            })
            .catch(error => {
                console.error('Error removing product:', error);
            });
        }

        function showUpdateForm(productId) {
            // Implement functionality to show and handle the update form for a specific product
        }
    </script>
</body>
</html>
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());
app.use(express.static('public'));

// Sample product data
let products = [
    // ... your existing products
];

// API endpoint to get products
app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

// Add a new product
app.post('/api/products', (req, res) => {
    const newProduct = req.body;
    newProduct.id = products.length ? products[products.length - 1].id + 1 : 1;
    products.push(newProduct);
    res.status(201).json(newProduct);
});

// Remove a product by ID
app.delete('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    products = products.filter(product => product.id !== productId);
    res.status(204).end();
});

// Update a product by ID
app.put('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const updatedProduct = req.body;
    products = products.map(product => product.id === productId ? { ...product, ...updatedProduct } : product);
    res.json(updatedProduct);
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());
app.use(express.static('public'));

// Sample product data
let products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion']
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports']
    },
    {
        id: 3,
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://cdn-images.farfetch-contents.com/18/86/15/72/18861572_40910565_1000.jpg',
        categories: ['man', 'sports']
    },
    {
        id: 4,
        brand: 'Puma',
        model: 'Suede Classic',
        description: 'style, fashion, casual',
        price: 70,
        image: 'https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_900,h_900/global/374915/01/sv01/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers',
        categories: ['woman', 'fashion']
    },
    {
        id: 5,
        brand: 'Reebok',
        model: 'Classic Leather',
        description: 'classic, fashion, casual',
        price: 75,
        image: 'https://www.jdsports.co.il/cdn/shop/products/jd_IF7694_a_1300x.jpg?v=1697525513',
        categories: ['woman', 'fashion']
    },
    {
        id: 6,
        brand: 'Vans',
        model: 'Old Skool',
        description: 'classic, skateboarding, casual',
        price: 60,
        image: 'https://images.vans.com/is/image/VansEU/VN000D3HNVY-HERO?$583x583$',
        categories: ['man', 'fashion']
    },
    {
        id: 7,
        brand: 'Converse',
        model: 'Chuck Taylor All Star',
        description: 'classic, casual, unisex',
        price: 55,
        image: 'https://www.converse.com/dw/image/v2/BCZC_PRD/on/demandware.static/-/Sites-cnv-master-catalog/default/dw3931bb17/images/a_107/M9160_A_107X1.jpg?sw=964',
        categories: ['man', 'woman', 'fashion']
    },
    {
        id: 8,
        brand: 'Under Armour',
        model: 'Curry 7',
        description: 'basketball, sports',
        price: 140,
        image: 'https://underarmour.scene7.com/is/image/Underarmour/3021258-100_DEFAULT?rp=standard-01-regular',
        categories: ['man', 'sports']
    },
    {
      id: 9,
      brand: 'Under Armour',
      model: 'HLMBB',
      description: 'classic, casual',
      price: 55,
      image: 'https://m.media-amazon.com/images/I/61q2Q0xHlAL._AC_SY695_.jpg',
      categories: ['babys', 'fashion']
  },
];

// API endpoint to get products
app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

// Add a new product
app.post('/api/products', (req, res) => {
    const newProduct = req.body;
    newProduct.id = products.length ? products[products.length - 1].id + 1 : 1;
    products.push(newProduct);
    res.status(201).json(newProduct);
});

// Remove a product by ID
app.delete('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    products = products.filter(product => product.id !== productId);
    res.status(204).end();
});

// Update a product by ID
app.put('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const updatedProduct = req.body;
    products = products.map(product => product.id === productId ? { ...product, ...updatedProduct } : product);
    res.json(updatedProduct);
});

// Serve the admin HTML file
app.get('/admin', (req, res) => {
    res.sendFile(__dirname + '/public/admin.html');
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #adminPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        h2 {
            margin-top: 0;
        }
        #productList {
            margin-top: 20px;
        }
        .product {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }
        .product img {
            width: 50px;
            height: auto;
            margin-right: 10px;
        }
        .product h3, .product p {
            margin: 0;
        }
        .product button {
            margin-left: 10px;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Admin Management</h1>
    <div id="adminPanel">
        <h2>Add New Product</h2>
        <form id="addProductForm">
            <input type="text" id="newBrand" placeholder="Brand" required>
            <input type="text" id="newModel" placeholder="Model" required>
            <input type="text" id="newDescription" placeholder="Description" required>
            <input type="number" id="newPrice" placeholder="Price" required>
            <input type="url" id="newImage" placeholder="Image URL" required>
            <input type="text" id="newCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Add Product</button>
        </form>

        <h2>Manage Products</h2>
        <div id="productList"></div>

        <h2 class="hidden" id="updateTitle">Update Product</h2>
        <form id="updateProductForm" class="hidden">
            <input type="hidden" id="updateProductId">
            <input type="text" id="updateBrand" placeholder="Brand" required>
            <input type="text" id="updateModel" placeholder="Model" required>
            <input type="text" id="updateDescription" placeholder="Description" required>
            <input type="number" id="updatePrice" placeholder="Price" required>
            <input type="url" id="updateImage" placeholder="Image URL" required>
            <input type="text" id="updateCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Update Product</button>
        </form>
    </div>

    <script src="admin.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Management</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <% include partials/header %>
    <div id="adminPanel">
        <h2>Add New Product</h2>
        <form id="addProductForm">
            <input type="text" id="newBrand" placeholder="Brand" required>
            <input type="text" id="newModel" placeholder="Model" required>
            <input type="text" id="newDescription" placeholder="Description" required>
            <input type="number" id="newPrice" placeholder="Price" required>
            <input type="url" id="newImage" placeholder="Image URL" required>
            <input type="text" id="newCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Add Product</button>
        </form>

        <h2>Manage Products</h2>
        <div id="productList"></div>

        <h2 class="hidden" id="updateTitle">Update Product</h2>
        <form id="updateProductForm" class="hidden">
            <input type="hidden" id="updateProductId">
            <input type="text" id="updateBrand" placeholder="Brand" required>
            <input type="text" id="updateModel" placeholder="Model" required>
            <input type="text" id="updateDescription" placeholder="Description" required>
            <input type="number" id="updatePrice" placeholder="Price" required>
            <input type="url" id="updateImage" placeholder="Image URL" required>
            <input type="text" id="updateCategories" placeholder="Categories (comma separated)" required>
            <button type="submit">Update Product</button>
        </form>
    </div>
    <% include partials/footer %>
    <script src="/js/admin.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();

    // Ensure event listener is added only once
    const addProductForm = document.getElementById('addProductForm');
    if (addProductForm) {
        addProductForm.addEventListener('submit', handleAddProduct);
    }

    // Event delegation for dynamically added buttons
    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.remove-button')) {
            handleRemoveProduct(event);
        } else if (event.target.matches('.update-button')) {
            showUpdateForm(event);
        }
    });

    const updateProductForm = document.getElementById('updateProductForm');
    if (updateProductForm) {
        updateProductForm.addEventListener('submit', handleUpdateProduct);
    }
});

function handleAddProduct(event) {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
}

function handleRemoveProduct(event) {
    const productId = event.target.getAttribute('data-id');
    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'DELETE'
    })
    .then(() => {
        console.log('Product removed');
        fetchProducts();
    })
    .catch(error => {
        console.error('Error removing product:', error);
    });
}

function handleUpdateProduct(event) {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(',')
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
}

function showUpdateForm(event) {
    const productId = event.target.getAttribute('data-id');
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('updateProductId').value = product.id;
                document.getElementById('updateBrand').value = product.brand;
                document.getElementById('updateModel').value = product.model;
                document.getElementById('updateDescription').value = product.description;
                document.getElementById('updatePrice').value = product.price;
                document.getElementById('updateImage').value = product.image;
                document.getElementById('updateCategories').value = product.categories.join(',');

                updateProductForm.classList.remove('hidden');
                updateTitle.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 250px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 250px;
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }
        .product img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }
        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            flex-grow: 1;
            text-align: center;
            flex: 1;
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
            <button class="category-button" data-category="sports">Sports</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    fetchProducts();
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            fetch(`http://localhost:3000/api/products?category=${category}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('div');
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        if (cart[productId]) {
                            cart[productId].quantity++;
                        } else {
                            cart[productId] = { ...product, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            if (cart[productId]) {
                if (cart[productId].quantity > 1) {
                    cart[productId].quantity--;
                } else {
                    delete cart[productId];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button class="remove-button" data-id="${item.id}">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }
        .product img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }
        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            fetch(`http://localhost:3000/api/products?search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            fetch(`http://localhost:3000/api/products?category=${category}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            fetch(`http://localhost:3000/api/products?brand=${encodeURIComponent(brand)}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('button');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        if (cart[productId]) {
                            cart[productId].quantity++;
                        } else {
                            cart[productId] = { ...product, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            if (cart[productId]) {
                if (cart[productId].quantity > 1) {
                    cart[productId].quantity--;
                } else {
                    delete cart[productId];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button class="remove-button" data-id="${item.id}">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion'],
        sizes: sizes
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports'],
        sizes: sizes
    },
    {
        id: 3,
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://cdn-images.farfetch-contents.com/18/86/15/72/18861572_40910565_1000.jpg',
        categories: ['man', 'sports'],
        sizes: sizes
    },
    {
        id: 4,
        brand: 'Puma',
        model: 'Suede Classic',
        description: 'style, fashion, casual',
        price: 70,
        image: 'https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_900,h_900/global/374915/01/sv01/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers',
        categories: ['woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 5,
        brand: 'Reebok',
        model: 'Classic Leather',
        description: 'classic, fashion, casual',
        price: 75,
        image: 'https://www.jdsports.co.il/cdn/shop/products/jd_IF7694_a_1300x.jpg?v=1697525513',
        categories: ['woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 6,
        brand: 'Vans',
        model: 'Old Skool',
        description: 'classic, skateboarding, casual',
        price: 60,
        image: 'https://images.vans.com/is/image/VansEU/VN000D3HNVY-HERO?$583x583$',
        categories: ['man', 'fashion'],
        sizes: sizes
    },
    {
        id: 7,
        brand: 'Converse',
        model: 'Chuck Taylor All Star',
        description: 'classic, casual, unisex',
        price: 55,
        image: 'https://www.converse.com/dw/image/v2/BCZC_PRD/on/demandware.static/-/Sites-cnv-master-catalog/default/dw3931bb17/images/a_107/M9160_A_107X1.jpg?sw=964',
        categories: ['man', 'woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 8,
        brand: 'Under Armour',
        model: 'Curry 7',
        description: 'basketball, sports',
        price: 140,
        image: 'https://underarmour.scene7.com/is/image/Underarmour/3021258-100_DEFAULT?rp=standard-01-regular',
        categories: ['man', 'sports'],
        sizes: sizes
    },
    {
        id: 9,
        brand: 'Under Armour',
        model: 'HLMBB',
        description: 'classic, casual',
        price: 55,
        image: 'https://m.media-amazon.com/images/I/61q2Q0xHlAL._AC_SY695_.jpg',
        categories: ['babys', 'fashion'],
        sizes: sizes
    },
];
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }
        .product img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }
        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
            ${Array.from({length: 25}, (_, i) => 36 + i * 0.5).map(size => `<option value="${size}">${size}</option>`).join('')}
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });

            document.getElementById('sizeFilter').addEventListener('change', () => {
                fetchProducts();
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('button');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                        if (!selectedSize) {
                            alert('Please select a size.');
                            return;
                        }
                        if (cart[productId]) {
                            if (cart[productId].sizes[selectedSize]) {
                                cart[productId].sizes[selectedSize]++;
                            } else {
                                cart[productId].sizes[selectedSize] = 1;
                            }
                        } else {
                            cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
            if (cart[productId] && cart[productId].sizes[selectedSize]) {
                if (cart[productId].sizes[selectedSize] > 1) {
                    cart[productId].sizes[selectedSize]--;
                } else {
                    delete cart[productId].sizes[selectedSize];
                    if (Object.keys(cart[productId].sizes).length === 0) {
                        delete cart[productId];
                    }
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                for (const size in item.sizes) {
                    totalPrice += item.price * item.sizes[size];
                    itemCount += item.sizes[size];
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                        <div>
                            <h4>${item.brand} - ${item.model}</h4>
                            <p>Size: ${size}</p>
                            <span>x${item.sizes[size]}</span>
                            <p>Price: $${item.price}</p>
                        </div>
                        <button class="remove-button" data-id="${item.id}">&times;</button>
                    `;
                    cartItemsContainer.appendChild(cartItem);
                }
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
const express = require('express');
const fetch = require('node-fetch'); // Ensure you have node-fetch installed
const app = express();
const port = 3000;

// Sample product data
const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    // Add more products similarly...
];

app.use(express.json());
app.use(express.static('public'));

const RAPIDAPI_KEY = 'your_rapidapi_key';
const RAPIDAPI_HOST = 'shoes-collections.p.rapidapi.com';

async function fetchShoesFromAPI() {
    const response = await fetch('https://shoes-collections.p.rapidapi.com/shoes', {
        method: 'GET',
        headers: {
            'X-RapidAPI-Key': RAPIDAPI_KEY,
            'X-RapidAPI-Host': RAPIDAPI_HOST
        }
    });

    if (!response.ok) {
        throw new Error('Network response was not ok');
    }

    const data = await response.json();
    return data;
}

app.get('/api/fetchShoes', async (req, res) => {
    try {
        const shoesData = await fetchShoesFromAPI();
        res.json(shoesData);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error fetching shoes data');
    }
});

app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category, size } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        const meetsSizeCriteria = size ? product.sizes.includes(parseFloat(size)) : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria && meetsSizeCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }

        .product .image-container {
            height: 200px; /* Consistent height for the image container */
            width: 100%; /* Full width */
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            overflow: hidden; /* Hide overflow to keep images contained */
        }

        .product img {
            width: 100%; /* Full width */
            height: auto; /* Maintain aspect ratio */
            object-fit: cover; /* Ensure image covers the container */
            display: block;
        }

        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            flex-grow: 1;
            text-align: center;
            flex: 1;
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();
            fetchShoesFromAPI(); // Fetch additional shoes data from the API

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });

            document.getElementById('sizeFilter').addEventListener('change', () => {
                fetchProducts();
            });

            // Populate the size filter options dynamically
            const sizeFilter = document.getElementById('sizeFilter');
            const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

            sizes.forEach(size => {
                const option = document.createElement('option');
                option.value = size;
                option.textContent = size;
                sizeFilter.appendChild(option);
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;

            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `category=${category}&search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('div');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=brand&brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');

            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === productId);
                    if (product) {
                        const sizeSelect = document.querySelector(`.size-select[data-id="${productId}"]`);
                        const selectedSize = sizeSelect ? sizeSelect.value : null;

                        if (!selectedSize) {
                            alert('Please select a size.');
                            return;
                        }

                        const cartItemKey = `${productId}-${selectedSize}`;
                        if (cart[cartItemKey]) {
                            cart[cartItemKey].quantity++;
                        } else {
                            cart[cartItemKey] = { ...product, size: selectedSize, quantity: 1 };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            const sizeSelect = document.querySelector(`.size-select[data-id="${productId}"]`);
            const selectedSize = sizeSelect ? sizeSelect.value : null;
            const cartItemKey = `${productId}-${selectedSize}`;

            if (cart[cartItemKey]) {
                if (cart[cartItemKey].quantity > 1) {
                    cart[cartItemKey].quantity--;
                } else {
                    delete cart[cartItemKey];
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const cartItemKey in cart) {
                const item = cart[cartItemKey];
                totalPrice += item.price * item.quantity;
                itemCount += item.quantity;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <span>x${item.quantity} (Size: ${item.size})</span>
                        <p>Price: $${item.price}</p>
                    </div>
                    <button class="remove-button" data-id="${item.id}">&times;</button>
                `;
                cartItemsContainer.appendChild(cartItem);
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }

        async function fetchShoesFromAPI() {
            try {
                const response = await fetch('http://localhost:3000/api/fetchShoes');
                const shoesData = await response.json();
                console.log(shoesData); // Verify the structure of the fetched data
                shoesData.forEach(shoe => {
                    const product = {
                        id: shoe.id,
                        brand: shoe.brand,
                        model: shoe.name,
                        description: shoe.description,
                        price: shoe.price,
                        image: shoe.imageUrl,
                        categories: shoe.category,
                        sizes: shoe.sizes
                    };
                    products.push(product); // Add the new shoe data to the existing products array
                });
                fetchProducts(); // Refresh the product display
            } catch (error) {
                console.error('Error fetching shoes from API:', error);
            }
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }

        .product .image-container {
            height: 200px; /* Consistent height for the image container */
            width: 100%; /* Full width */
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            overflow: hidden; /* Hide overflow to keep images contained */
        }

        .product img {
            width: 100%; /* Full width */
            height: auto; /* Maintain aspect ratio */
            object-fit: cover; /* Ensure image covers the container */
            display: block;
        }

        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });

            document.getElementById('sizeFilter').addEventListener('change', () => {
                fetchProducts();
            });

            // Populate the size filter options dynamically
            const sizeFilter = document.getElementById('sizeFilter');
            const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

            sizes.forEach(size => {
                const option = document.createElement('option');
                option.value = size;
                option.textContent = size;
                sizeFilter.appendChild(option);
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('button');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                        if (!selectedSize) {
                            alert('Please select a size.');
                            return;
                        }
                        if (cart[productId]) {
                            if (cart[productId].sizes[selectedSize]) {
                                cart[productId].sizes[selectedSize]++;
                            } else {
                                cart[productId].sizes[selectedSize] = 1;
                            }
                        } else {
                            cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
            if (cart[productId] && cart[productId].sizes[selectedSize]) {
                if (cart[productId].sizes[selectedSize] > 1) {
                    cart[productId].sizes[selectedSize]--;
                } else {
                    delete cart[productId].sizes[selectedSize];
                    if (Object.keys(cart[productId].sizes).length === 0) {
                        delete cart[productId];
                    }
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                for (const size in item.sizes) {
                    totalPrice += item.price * item.sizes[size];
                    itemCount += item.sizes[size];
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                        <div>
                            <h4>${item.brand} - ${item.model}</h4>
                            <p>Size: ${size}</p>
                            <span>x${item.sizes[size]}</span>
                            <p>Price: $${item.price}</p>
                        </div>
                        <button class="remove-button" data-id="${item.id}">&times;</button>
                    `;
                    cartItemsContainer.appendChild(cartItem);
                }
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }

        .product .image-container {
            height: 200px; /* Consistent height for the image container */
            width: 100%; /* Full width */
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            overflow: hidden; /* Hide overflow to keep images contained */
        }

        .product img {
            width: 100%; /* Full width */
            height: auto; /* Maintain aspect ratio */
            object-fit: cover; /* Ensure image covers the container */
            display: block;
        }

        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });

            document.getElementById('sizeFilter').addEventListener('change', () => {
                fetchProducts();
            });

            // Populate the size filter options dynamically
            const sizeFilter = document.getElementById('sizeFilter');
            const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

            sizes.forEach(size => {
                const option = document.createElement('option');
                option.value = size;
                option.textContent = size;
                sizeFilter.appendChild(option);
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('button');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                        if (!selectedSize) {
                            alert('Please select a size.');
                            return;
                        }
                        if (cart[productId]) {
                            if (cart[productId].sizes[selectedSize]) {
                                cart[productId].sizes[selectedSize]++;
                            } else {
                                cart[productId].sizes[selectedSize] = 1;
                            }
                        } else {
                            cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
            if (cart[productId] && cart[productId].sizes[selectedSize]) {
                if (cart[productId].sizes[selectedSize] > 1) {
                    cart[productId].sizes[selectedSize]--;
                } else {
                    delete cart[productId].sizes[selectedSize];
                    if (Object.keys(cart[productId].sizes).length === 0) {
                        delete cart[productId];
                    }
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                for (const size in item.sizes) {
                    totalPrice += item.price * item.sizes[size];
                    itemCount += item.sizes[size];
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                        <div>
                            <h4>${item.brand} - ${item.model}</h4>
                            <p>Size: ${size}</p>
                            <span>x${item.sizes[size]}</span>
                            <p>Price: $${item.price}</p>
                        </div>
                        <button class="remove-button" data-id="${item.id}">&times;</button>
                    `;
                    cartItemsContainer.appendChild(cartItem);
                }
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
const express = require('express');
const app = express();
const port = 3000;

// Sample product data
const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion'],
        sizes: sizes
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports'],
        sizes: sizes
    },
    {
        id: 3,
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://cdn-images.farfetch-contents.com/18/86/15/72/18861572_40910565_1000.jpg',
        categories: ['man', 'sports'],
        sizes: sizes
    },
    {
        id: 4,
        brand: 'Puma',
        model: 'Suede Classic',
        description: 'style, fashion, casual',
        price: 70,
        image: 'https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_900,h_900/global/374915/01/sv01/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers',
        categories: ['woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 5,
        brand: 'Reebok',
        model: 'Classic Leather',
        description: 'classic, fashion, casual',
        price: 75,
        image: 'https://www.jdsports.co.il/cdn/shop/products/jd_IF7694_a_1300x.jpg?v=1697525513',
        categories: ['woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 6,
        brand: 'Vans',
        model: 'Old Skool',
        description: 'classic, skateboarding, casual',
        price: 60,
        image: 'https://images.vans.com/is/image/VansEU/VN000D3HNVY-HERO?$583x583$',
        categories: ['man', 'fashion'],
        sizes: sizes
    },
    {
        id: 7,
        brand: 'Converse',
        model: 'Chuck Taylor All Star',
        description: 'classic, casual, unisex',
        price: 55,
        image: 'https://www.converse.com/dw/image/v2/BCZC_PRD/on/demandware.static/-/Sites-cnv-master-catalog/default/dw3931bb17/images/a_107/M9160_A_107X1.jpg?sw=964',
        categories: ['man', 'woman', 'fashion'],
        sizes: sizes
    },
    {
        id: 8,
        brand: 'Under Armour',
        model: 'Curry 7',
        description: 'basketball, sports',
        price: 140,
        image: 'https://underarmour.scene7.com/is/image/Underarmour/3021258-100_DEFAULT?rp=standard-01-regular',
        categories: ['man', 'sports'],
        sizes: sizes
    },
    {
        id: 9,
        brand: 'Under Armour',
        model: 'HLMBB',
        description: 'classic, casual',
        price: 55,
        image: 'https://m.media-amazon.com/images/I/61q2Q0xHlAL._AC_SY695_.jpg',
        categories: ['babys', 'fashion'],
        sizes: sizes
    },
];

// API endpoint to get products
app.get('/api/products', (req, res) => {
    const { search, maxPrice, type, category, size, brand } = req.query;

    let filteredProducts = products.filter(product => {
        const meetsTextCriteria = search ? 
            (type === 'brand' && product.brand.toLowerCase().includes(search.toLowerCase())) ||
            (type === 'model' && product.model.toLowerCase().includes(search.toLowerCase())) ||
            (!type && (product.brand.toLowerCase().includes(search.toLowerCase()) || product.model.toLowerCase().includes(search.toLowerCase()) || product.description.toLowerCase().includes(search.toLowerCase()))) : true;
        const meetsPriceCriteria = maxPrice ? product.price <= parseFloat(maxPrice) : true;
        const meetsCategoryCriteria = category ? product.categories.includes(category) : true;
        const meetsSizeCriteria = size ? product.sizes.includes(parseFloat(size)) : true;
        const meetsBrandCriteria = brand ? product.brand.toLowerCase() === brand.toLowerCase() : true;
        
        return meetsTextCriteria && meetsPriceCriteria && meetsCategoryCriteria && meetsSizeCriteria && meetsBrandCriteria;
    });

    console.log(filteredProducts); // Log filtered products to verify their structure
    res.json(filteredProducts);
});

// API endpoint to get brand counts
app.get('/api/brands', (req, res) => {
    const brandCounts = products.reduce((acc, product) => {
        acc[product.brand] = (acc[product.brand] || 0) + 1;
        return acc;
    }, {});

    res.json(brandCounts);
});

app.use(express.static('public'));

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
app.put('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const productIndex = products.findIndex(product => product.id === productId);

    if (productIndex !== -1) {
        products[productIndex] = { ...products[productIndex], ...req.body };
        res.json(products[productIndex]);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});
const { Pool } = require('pg');
const pool = new Pool({
    user: 'user',
    host: 'localhost',
    database: 'shoes',
    password: 'password',
    port: 5432,
});

app.get('/api/products', async (req, res) => {
    const result = await pool.query('SELECT * FROM products');
    res.json(result.rows);
});

// Add similar queries for other endpoints
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" class="proceed-button">Proceed to Payment</a>
    </div>

    <script src="js/main.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');

body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f4f4f9;
    color: #333;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#mainContent {
    flex: 1;
    padding-right: 220px; /* Adjust based on the width of the sidebar */
}

#sidebar {
    width: 220px; /* Make the sidebar slightly smaller */
    position: fixed;
    right: 0;
    top: 0;
    height: 100%;
    background-color: #fff;
    padding: 20px;
    box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

#sidebar.open {
    transform: translateX(0);
}

input, button, select {
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    border: 1px solid #ccc;
    width: 100%;
}

button {
    cursor: pointer;
    background-color: #5c67f2;
    color: white;
}

#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

#cartIcon {
    font-size: 24px;
    position: relative;
    cursor: pointer;
}

#cartCount {
    position: absolute;
    top: -10px;
    right: -10px;
    background: red;
    color: white;
    border-radius: 50%;
    padding: 2px 6px;
    font-size: 12px;
}

#title {
    font-family: 'Poppins', sans-serif;
    font-size: 2.5em;
    text-align: center;
    animation: move 5s infinite;
    margin: 0 auto;
}

@keyframes move {
    0% { transform: translateX(0); }
    50% { transform: translateX(10px); }
    100% { transform: translateX(0); }
}

#productContainer {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    margin-top: 20px;
}

.product {
    background: white;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 10px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    width: 300px; /* Adjust as necessary */
    margin: 10px;
    text-align: center;
}

.product .image-container {
    height: 200px; /* Consistent height for the image container */
    width: 100%; /* Full width */
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
    overflow: hidden; /* Hide overflow to keep images contained */
}

.product img {
    width: 100%; /* Full width */
    height: auto; /* Maintain aspect ratio */
    object-fit: cover; /* Ensure image covers the container */
    display: block;
}

#cartContainer {
    display: none;
    margin-top: 20px;
    background: #fff;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    position: absolute;
    left: 20px;
    top: 60px;
    z-index: 10;
    width: 300px;
}

.cart-item {
    border-bottom: 1px solid #ddd;
    padding: 10px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.cart-item img {
    width: 40px;
    height: auto;
    margin-right: 10px;
}

.cart-item h4 {
    display: inline;
}

.cart-item span {
    font-weight: bold;
}

.cart-item button {
    background: none;
    border: none;
    cursor: pointer;
    color: red;
    font-size: 18px;
}

.cart-total {
    font-weight: bold;
    margin-top: 10px;
    text-align: right;
}

.proceed-button {
    display: block;
    margin-top: 20px;
    padding: 10px;
    background-color: #5c67f2;
    color: white;
    text-align: center;
    border-radius: 5px;
    text-decoration: none;
}

#priceRangeValue {
    display: inline-block;
    width: 50px;
}

.category-button {
    padding: 10px;
    margin: 5px;
    cursor: pointer;
    background-color: #5c67f2;
    color: white;
    border: none;
    border-radius: 5px;
    display: inline-block;
    text-align: center;
    flex: 1;
    min-width: 150px; /* Add minimum width */
    max-width: 150px; /* Add maximum width to keep buttons consistent */
    box-sizing: border-box; /* Ensure padding and border are included in the width */
}

.category-button.active {
    background-color: #3c46b5;
}

.filter-button {
    width: 100%;
}

.brand-button {
    cursor: pointer;
    margin: 5px 0;
    background: none;
    border: none;
    text-align: left;
    width: 100%;
    font-size: 16px;
    padding: 5px;
    color: #333;
}

.brand-button:hover {
    background-color: #f0f0f0;
}

#availableBrandsToggle {
    cursor: pointer;
    text-align: center;
    padding: 10px;
    background-color: #5c67f2;
    color: white;
    border-radius: 5px;
    margin-top: 10px;
}

#availableBrands {
    display: none;
    margin-top: 10px;
}

#categoryContainer {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 10px; /* Add gap between buttons */
    margin-top: 20px; /* Adjust top margin */
}

#showFilters {
    position: fixed;
    right: 20px;
    top: 20px;
    font-size: 24px;
    cursor: pointer;
    display: block;
    z-index: 20;
}

#filtersClose {
    position: absolute;
    right: 20px;
    top: 20px;
    font-size: 24px;
    cursor: pointer;
    display: none;
}

#filtersClose.open {
    display: block;
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

updateProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(',')
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
});

function fetchProducts() {
    fetch('http://localhost:3000/api/products')
        .then(response => response.json())
        .then(products => {
            const productList = document.getElementById('productList');
            productList.innerHTML = ''; // Clear previous products

            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div>
                        <h3>${product.brand} - ${product.model}</h3>
                        <p>${product.description}</p>
                        <p>Price: $${product.price}</p>
                        <img src="${product.image}" alt="${product.model}">
                    </div>
                    <div>
                        <button onclick="removeProduct(${product.id})">Remove</button>
                        <button onclick="showUpdateForm(${product.id})">Update</button>
                    </div>
                `;
                productList.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function removeProduct(productId) {
    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'DELETE'
    })
    .then(() => {
        console.log('Product removed');
        fetchProducts();
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error removing product:', error);
    });
}

function showUpdateForm(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('updateProductId').value = product.id;
                document.getElementById('updateBrand').value = product.brand;
                document.getElementById('updateModel').value = product.model;
                document.getElementById('updateDescription').value = product.description;
                document.getElementById('updatePrice').value = product.price;
                document.getElementById('updateImage').value = product.image;
                document.getElementById('updateCategories').value = product.categories.join(',');

                updateProductForm.classList.remove('hidden');
                updateTitle.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
}

function notifyShopPage() {
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

updateProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(',')
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
});

function fetchProducts() {
    fetch('http://localhost:3000/api/products')
        .then(response => response.json())
        .then(products => {
            console.log('Fetched products:', products); // Debug log
            const productList = document.getElementById('productList');
            product
// Function to add a new product
function addProduct(productData) {
    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(productData)
    })
    .then(response => response.json())
    .then(data => {
        // Set the updateProducts flag to true
        window.localStorage.setItem('updateProducts', 'true');
        alert('Product added successfully!');
    })
    .catch(error => {
        console.error('Error adding product:', error);
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

updateProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(',')
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
});

function fetchProducts() {
    fetch('http://localhost:3000/api/products')
        .then(response => response.json())
        .then(products => {
            const productList = document.getElementById('productList');
            productList.innerHTML = ''; // Clear previous products

            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div>
                        <h3>${product.brand} - ${product.model}</h3>
                        <p>${product.description}</p>
                        <p>Price: $${product.price}</p>
                        <img src="${product.image}" alt="${product.model}">
                    </div>
                    <div>
                        <button onclick="removeProduct(${product.id})">Remove</button>
                        <button onclick="showUpdateForm(${product.id})">Update</button>
                    </div>
                `;
                productList.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function removeProduct(productId) {
    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'DELETE'
    })
    .then(() => {
        console.log('Product removed');
        fetchProducts();
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error removing product:', error);
    });
}

function showUpdateForm(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('updateProductId').value = product.id;
                document.getElementById('updateBrand').value = product.brand;
                document.getElementById('updateModel').value = product.model;
                document.getElementById('updateDescription').value = product.description;
                document.getElementById('updatePrice').value = product.price;
                document.getElementById('updateImage').value = product.image;
                document.getElementById('updateCategories').value = product.categories.join(',');

                updateProductForm.classList.remove('hidden');
                updateTitle.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
}

function notifyShopPage() {
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'updateProducts' && event.newValue === 'true') {
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

// ... Rest of your code ...
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

updateProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(',')
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
});

function fetchProducts() {
    fetch('http://localhost:3000/api/products')
        .then(response => response.json())
        .then(products => {
            const productList = document.getElementById('productList');
            productList.innerHTML = ''; // Clear previous products

            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div>
                        <h3>${product.brand} - ${product.model}</h3>
                        <p>${product.description}</p>
                        <p>Price: $${product.price}</p>
                        <img src="${product.image}" alt="${product.model}">
                    </div>
                    <div>
                        <button onclick="removeProduct(${product.id})">Remove</button>
                        <button onclick="showUpdateForm(${product.id})">Update</button>
                    </div>
                `;
                productList.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function removeProduct(productId) {
    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'DELETE'
    })
    .then(() => {
        console.log('Product removed');
        fetchProducts();
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error removing product:', error);
    });
}

function showUpdateForm(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('updateProductId').value = product.id;
                document.getElementById('updateBrand').value = product.brand;
                document.getElementById('updateModel').value = product.model;
                document.getElementById('updateDescription').value = product.description;
                document.getElementById('updatePrice').value = product.price;
                document.getElementById('updateImage').value = product.image;
                document.getElementById('updateCategories').value = product.categories.join(',');

                updateProductForm.classList.remove('hidden');
                updateTitle.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
}

function notifyShopPage() {
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(',')
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

function notifyShopPage() {
    console.log('Setting updateProducts to true in localStorage');
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'updateProducts' && event.newValue === 'true') {
            console.log('updateProducts flag detected, fetching products...');
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

// Other fetch functions (fetchProductsByType, fetchProductsByCategory, fetchProductsByBrand) 
// with similar error handling as fetchProducts()...

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(brands => {
            console.log('Brands fetched:', brands);
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(','),
        sizes: [36, 37, 38, 39, 40] // Adding a default sizes array for debugging
    };

    console.log('Adding new product:', newProduct); // Log new product data

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

function notifyShopPage() {
    console.log('Setting updateProducts to true in localStorage');
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(','),
        sizes: Array.from(document.getElementById('newSizes').selectedOptions).map(option => parseFloat(option.value)) // Collect selected sizes
    };

    console.log('Adding new product:', newProduct);

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

function notifyShopPage() {
    console.log('Setting updateProducts to true in localStorage');
    window.localStorage.setItem('updateProducts', 'true');
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});

const addProductForm = document.getElementById('addProductForm');
const updateProductForm = document.getElementById('updateProductForm');
const updateTitle = document.getElementById('updateTitle');

addProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const newProduct = {
        brand: document.getElementById('newBrand').value,
        model: document.getElementById('newModel').value,
        description: document.getElementById('newDescription').value,
        price: document.getElementById('newPrice').value,
        image: document.getElementById('newImage').value,
        categories: document.getElementById('newCategories').value.split(','),
        sizes: Array.from(document.getElementById('newSizes').selectedOptions).map(option => parseFloat(option.value)) // Collect selected sizes
    };

    fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product added:', product);
        fetchProducts();
        addProductForm.reset(); // Reset the form fields after successful addition
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error adding product:', error);
    });
});

updateProductForm.addEventListener('submit', (event) => {
    event.preventDefault();
    const productId = document.getElementById('updateProductId').value;
    const updatedProduct = {
        brand: document.getElementById('updateBrand').value,
        model: document.getElementById('updateModel').value,
        description: document.getElementById('updateDescription').value,
        price: document.getElementById('updatePrice').value,
        image: document.getElementById('updateImage').value,
        categories: document.getElementById('updateCategories').value.split(','),
        sizes: Array.from(document.getElementById('updateSizes').selectedOptions).map(option => parseFloat(option.value)) // Collect selected sizes
    };

    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedProduct)
    })
    .then(response => response.json())
    .then(product => {
        console.log('Product updated:', product);
        fetchProducts();
        updateProductForm.reset();
        updateProductForm.classList.add('hidden');
        updateTitle.classList.add('hidden');
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error updating product:', error);
    });
});

function fetchProducts() {
    fetch('http://localhost:3000/api/products')
        .then(response => response.json())
        .then(products => {
            const productList = document.getElementById('productList');
            productList.innerHTML = ''; // Clear previous products

            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div>
                        <h3>${product.brand} - ${product.model}</h3>
                        <p>${product.description}</p>
                        <p>Price: $${product.price}</p>
                        <img src="${product.image}" alt="${product.model}">
                    </div>
                    <div>
                        <button onclick="removeProduct(${product.id})">Remove</button>
                        <button onclick="showUpdateForm(${product.id})">Update</button>
                    </div>
                `;
                productList.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function removeProduct(productId) {
    fetch(`http://localhost:3000/api/products/${productId}`, {
        method: 'DELETE'
    })
    .then(() => {
        console.log('Product removed');
        fetchProducts();
        notifyShopPage();
    })
    .catch(error => {
        console.error('Error removing product:', error);
    });
}

function showUpdateForm(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === productId);
            if (product) {
                document.getElementById('updateProductId').value = product.id;
                document.getElementById('updateBrand').value = product.brand;
                document.getElementById('updateModel').value = product.model;
                document.getElementById('updateDescription').value = product.description;
                document.getElementById('updatePrice').value = product.price;
                document.getElementById('updateImage').value = product.image;
                document.getElementById('updateCategories').value = product.categories.join(',');
                // Populate sizes
                const updateSizes = document.getElementById('updateSizes');
                Array.from(updateSizes.options).forEach(option => {
                    option.selected = product.sizes.includes(parseFloat(option.value));
                });

                updateProductForm.classList.remove('hidden');
                updateTitle.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
}

function notifyShopPage() {
    console.log('Setting updateProducts to true in localStorage');
    window.localStorage.setItem('updateProducts', 'true');
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #checkoutPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        h2 {
            margin-top: 0;
        }
    </style>
</head>
<body>
    <h1>Checkout</h1>
    <div id="checkoutPanel">
        <h2>Payment Information</h2>
        <form id="paymentForm">
            <input type="text" id="cardName" placeholder="Name on Card" required>
            <input type="text" id="cardNumber" placeholder="Card Number" required>
            <input type="text" id="expiryDate" placeholder="Expiry Date (MM/YY)" required>
            <input type="text" id="cvv" placeholder="CVV" required>
            <button type="submit">Pay Now</button>
        </form>
    </div>
    <script src="checkout.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'updateProducts' && event.newValue === 'true') {
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        } else if (event.target.matches('.proceed-button')) {
            proceedToCheckout();
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function proceedToCheckout() {
    window.location.href = 'checkout.html';
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'updateProducts' && event.newValue === 'true') {
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function proceedToCheckout() {
    window.location.href = 'checkout.html';
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <header>
        <h1>SHOE SHOP</h1>
        <div id="cartIcon">
            <span id="cartCount">0</span>
            <img src="cart-icon.png" alt="Cart">
        </div>
    </header>
    <main>
        <div id="cartContainer" style="display: none;">
            <h2>Shopping Cart</h2>
            <div id="cartItems"></div>
            <div id="cartTotal"></div>
            <button class="proceed-button" onclick="proceedToCheckout()">Proceed to Payment</button>
        </div>
        <div id="filters">
            <!-- Your filter buttons -->
        </div>
        <div id="productContainer"></div>
    </main>
    <script src="js/main.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'updateProducts' && event.newValue === 'true') {
            console.log('updateProducts flag detected, fetching products...');
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products); // Log raw response
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product); // Log products missing sizes
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

// Other fetch functions (fetchProductsByType, fetchProductsByCategory, fetchProductsByBrand) 
// with similar error handling as fetchProducts()...

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(brands => {
            console.log('Brands fetched:', brands);
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

// Add this function to link to the checkout page
document.getElementById('proceedToPayment').addEventListener('click', () => {
    window.location.href = 'checkout.html';
});
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Existing event listeners...

    document.getElementById('proceedToPayment').addEventListener('click', () => {
        console.log('Proceed to Payment button clicked');
        window.location.href = 'checkout.html';
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products); // Log raw response
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product); // Log products missing sizes
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(brands => {
            console.log('Brands fetched:', brands);
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
document.getElementById('proceedToPayment').addEventListener('click', () => {
    console.log('Proceed to Payment button clicked');
    window.location.href = 'checkout.html';
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <header>
        <h1>SHOE SHOP</h1>
        <div id="cartIcon">
            <span id="cartCount">0</span>
            <img src="cart-icon.png" alt="Cart">
        </div>
    </header>
    <main>
        <div id="cartContainer" style="display: none;">
            <h2>Shopping Cart</h2>
            <div id="cartItems"></div>
            <div id="cartTotal"></div>
            <button id="proceedToPayment" class="proceed-button">Proceed to Payment</button>
        </div>
        <div id="filters">
            <!-- Your filter buttons -->
        </div>
        <div id="productContainer"></div>
    </main>
    <script src="js/main.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <header>
        <h1>SHOE SHOP</h1>
        <div id="cartIcon">
            <span id="cartCount">0</span>
            <img src="cart-icon.png" alt="Cart">
        </div>
    </header>
    <main>
        <div id="cartContainer" style="display: none;">
            <h2>Shopping Cart</h2>
            <div id="cartItems"></div>
            <div id="cartTotal"></div>
            <button id="proceedToPayment" class="proceed-button">Proceed to Payment</button>
        </div>
        <div id="filters">
            <!-- Your filter buttons -->
        </div>
        <div id="productContainer"></div>
    </main>
    <script src="js/main.js"></script>
</body>
</html>
function displayCartItems() {
    checkoutCartItems.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;

    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            const quantity = item.sizes[size];
            totalPrice += item.price * quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${quantity}</span>
                    <p>Price: $${item.price}</p>
                </div>
            `;
            checkoutCartItems.appendChild(cartItem);
        }
    }

    checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
}

// Display the cart items on page load
displayCartItems();
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }

        .product .image-container {
            height: 200px; /* Consistent height for the image container */
            width: 100%; /* Full width */
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            overflow: hidden; /* Hide overflow to keep images contained */
        }

        .product img {
            width: 100%; /* Full width */
            height: auto; /* Maintain aspect ratio */
            object-fit: cover; /* Ensure image covers the container */
            display: block;
        }

        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" id="proceedToPaymentButton" class="proceed-button">Proceed to Payment</a>
    </div>

    <script src="main.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');
        
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #mainContent {
            flex: 1;
            padding-right: 220px; /* Adjust based on the width of the sidebar */
        }
        #sidebar {
            width: 220px; /* Make the sidebar slightly smaller */
            position: fixed;
            right: 0;
            top: 0;
            height: 100%;
            background-color: #fff;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        #sidebar.open {
            transform: translateX(0);
        }
        input, button, select {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
        }
        #cartIcon {
            font-size: 24px;
            position: relative;
            cursor: pointer;
        }
        #cartCount {
            position: absolute;
            top: -10px;
            right: -10px;
            background: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        #title {
            font-family: 'Poppins', sans-serif;
            font-size: 2.5em;
            text-align: center;
            animation: move 5s infinite;
            margin: 0 auto;
        }
        @keyframes move {
            0% { transform: translateX(0); }
            50% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }
        #productContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .product {
            background: white;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 300px; /* Adjust as necessary */
            margin: 10px;
            text-align: center;
        }

        .product .image-container {
            height: 200px; /* Consistent height for the image container */
            width: 100%; /* Full width */
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            overflow: hidden; /* Hide overflow to keep images contained */
        }

        .product img {
            width: 100%; /* Full width */
            height: auto; /* Maintain aspect ratio */
            object-fit: cover; /* Ensure image covers the container */
            display: block;
        }

        #cartContainer {
            display: none;
            margin-top: 20px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: absolute;
            left: 20px;
            top: 60px;
            z-index: 10;
            width: 300px;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 40px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-item button {
            background: none;
            border: none;
            cursor: pointer;
            color: red;
            font-size: 18px;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
        .proceed-button {
            display: block;
            margin-top: 20px;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
        }
        #priceRangeValue {
            display: inline-block;
            width: 50px;
        }
        .category-button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
            border: none;
            border-radius: 5px;
            display: inline-block;
            text-align: center;
            flex: 1;
            min-width: 150px; /* Add minimum width */
            max-width: 150px; /* Add maximum width to keep buttons consistent */
            box-sizing: border-box; /* Ensure padding and border are included in the width */
        }
        .category-button.active {
            background-color: #3c46b5;
        }
        .filter-button {
            width: 100%;
        }
        .brand-button {
            cursor: pointer;
            margin: 5px 0;
            background: none;
            border: none;
            text-align: left;
            width: 100%;
            font-size: 16px;
            padding: 5px;
            color: #333;
        }
        .brand-button:hover {
            background-color: #f0f0f0;
        }
        #availableBrandsToggle {
            cursor: pointer;
            text-align: center;
            padding: 10px;
            background-color: #5c67f2;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
        }
        #availableBrands {
            display: none;
            margin-top: 10px;
        }
        #categoryContainer {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px; /* Add gap between buttons */
            margin-top: 20px; /* Adjust top margin */
        }
        #showFilters {
            position: fixed;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: block;
            z-index: 20;
        }
        #filtersClose {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 24px;
            cursor: pointer;
            display: none;
        }
        #filtersClose.open {
            display: block;
        }
    </style>
</head>
<body>
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars"></div>
    </div>
    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>
    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>
    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="#" id="proceedToPaymentButton" class="proceed-button">Proceed to Payment</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();
            fetchBrands();

            document.body.addEventListener('click', function(event) {
                if (event.target.matches('.category-button')) {
                    fetchProductsByCategory(event.target.dataset.category, event.target);
                } else if (event.target.matches('.filter-button')) {
                    if (event.target.dataset.category) {
                        fetchProductsByCategory(event.target.dataset.category, event.target);
                    } else {
                        fetchProducts();
                    }
                } else if (event.target.matches('.brand-button')) {
                    fetchProductsByBrand(event.target.dataset.brand);
                } else if (event.target.matches('.remove-button')) {
                    removeFromCart(event.target.dataset.id);
                } else if (event.target.matches('.add-to-cart-button')) {
                    addToCart(event.target.dataset.id);
                }
            });

            document.getElementById('cartIcon').addEventListener('click', () => {
                cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
            });

            document.getElementById('showFilters').addEventListener('click', () => {
                sidebar.classList.add('open');
                showFilters.style.display = 'none';
                filtersClose.style.display = 'block';
            });

            document.getElementById('filtersClose').addEventListener('click', () => {
                sidebar.classList.remove('open');
                showFilters.style.display = 'block';
                filtersClose.style.display = 'none';
            });

            document.getElementById('availableBrandsToggle').addEventListener('click', () => {
                availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
            });

            searchInput.addEventListener('keyup', function(event) {
                if (event.key === "Enter") {
                    fetchProducts();
                }
            });

            priceRange.addEventListener('input', function(event) {
                fetchProducts();
            });

            document.getElementById('sizeFilter').addEventListener('change', () => {
                fetchProducts();
            });

            document.getElementById('proceedToPaymentButton').addEventListener('click', function(event) {
                event.preventDefault();
                window.location.href = 'checkout.html';
            });

            // Populate the size filter options dynamically
            const sizeFilter = document.getElementById('sizeFilter');
            const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

            sizes.forEach(size => {
                const option = document.createElement('option');
                option.value = size;
                option.textContent = size;
                sizeFilter.appendChild(option);
            });
        });

        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const priceRangeValue = document.getElementById('priceRangeValue');
        const productContainer = document.getElementById('productContainer');
        const cartContainer = document.getElementById('cartContainer');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalContainer = document.getElementById('cartTotal');
        const cartIcon = document.getElementById('cartIcon');
        const cartCount = document.getElementById('cartCount');
        const availableBrands = document.getElementById('availableBrands');
        const availableBrandsToggle = document.getElementById('availableBrandsToggle');
        const sidebar = document.getElementById('sidebar');
        const showFilters = document.getElementById('showFilters');
        const filtersClose = document.getElementById('filtersClose');
        const cart = {};
        let activeCategoryButton = null;

        function updatePriceValue() {
            priceRangeValue.textContent = priceRange.value;
        }

        function fetchProducts() {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByType(type) {
            const searchQuery = searchInput.value;
            const maxPrice = priceRange.value;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
            
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByCategory(category, button) {
            if (activeCategoryButton === button) {
                activeCategoryButton.classList.remove('active');
                activeCategoryButton = null;
                fetchProducts();
                return;
            }
            if (activeCategoryButton) {
                activeCategoryButton.classList.remove('active');
            }
            button.classList.add('active');
            activeCategoryButton = button;
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchProductsByBrand(brand) {
            const selectedSize = document.getElementById('sizeFilter').value;
            const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
            fetch(`http://localhost:3000/api/products?${query}`)
                .then(response => response.json())
                .then(products => {
                    productContainer.innerHTML = ''; // Clear previous results
                    products.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <select class="size-select" data-id="${product.id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    });
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                });
        }

        function fetchBrands() {
            fetch('http://localhost:3000/api/brands')
                .then(response => response.json())
                .then(brands => {
                    availableBrands.innerHTML = ''; // Clear previous brands
                    for (const brand in brands) {
                        const brandDiv = document.createElement('button');
                        brandDiv.className = 'brand-button';
                        brandDiv.dataset.brand = brand;
                        brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                        availableBrands.appendChild(brandDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching brands:', error);
                });
        }

        function addToCart(productId) {
            fetch(`http://localhost:3000/api/products`)
                .then(response => response.json())
                .then(products => {
                    const product = products.find(product => product.id === parseInt(productId));
                    if (product) {
                        const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                        if (!selectedSize) {
                            alert('Please select a size.');
                            return;
                        }
                        if (cart[productId]) {
                            if (cart[productId].sizes[selectedSize]) {
                                cart[productId].sizes[selectedSize]++;
                            } else {
                                cart[productId].sizes[selectedSize] = 1;
                            }
                        } else {
                            cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                        }
                        updateCart();
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart:', error);
                });
        }

        function removeFromCart(productId) {
            const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
            if (cart[productId] && cart[productId].sizes[selectedSize]) {
                if (cart[productId].sizes[selectedSize] > 1) {
                    cart[productId].sizes[selectedSize]--;
                } else {
                    delete cart[productId].sizes[selectedSize];
                    if (Object.keys(cart[productId].sizes).length === 0) {
                        delete cart[productId];
                    }
                }
                updateCart();
            }
        }

        function updateCart() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;
            for (const productId in cart) {
                const item = cart[productId];
                for (const size in item.sizes) {
                    totalPrice += item.price * item.sizes[size];
                    itemCount += item.sizes[size];
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                        <div>
                            <h4>${item.brand} - ${item.model}</h4>
                            <p>Size: ${size}</p>
                            <span>x${item.sizes[size]}</span>
                            <p>Price: $${item.price}</p>
                        </div>
                        <button class="remove-button" data-id="${item.id}">&times;</button>
                    `;
                    cartItemsContainer.appendChild(cartItem);
                }
            }
            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            cartCount.innerText = itemCount;
            if (itemCount === 0) {
                cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
                document.querySelector('.proceed-button').style.display = 'none';
            } else {
                document.querySelector('.proceed-button').style.display = 'block';
            }
        }
    </script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart); // Debug log

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const paymentDetails = {
            cardNumber: document.getElementById('cardNumber').value,
            cardName: document.getElementById('cardName').value,
            cardExpiry: document.getElementById('cardExpiry').value,
            cardCVC: document.getElementById('cardCVC').value
        };

        console.log('Processing payment with details:', paymentDetails);

        // Simulate payment process
        setTimeout(() => {
            alert('Payment successful!');
            localStorage.removeItem('cart'); // Clear the cart after successful payment
            window.location.href = 'index.html'; // Redirect to main page after payment
        }, 2000);
    });
});
document.addEventListener('DOMContentLoaded', initialize);

function initialize() {
    fetchProducts();
    fetchBrands();
    setupEventListeners();
    populateSizeFilter();
}

function setupEventListeners() {
    window.addEventListener('storage', handleStorageChange);
    document.body.addEventListener('click', handleBodyClick);
    document.getElementById('cartIcon').addEventListener('click', toggleCartVisibility);
    document.getElementById('showFilters').addEventListener('click', openFilters);
    document.getElementById('filtersClose').addEventListener('click', closeFilters);
    document.getElementById('availableBrandsToggle').addEventListener('click', toggleAvailableBrands);
    searchInput.addEventListener('keyup', handleSearchKeyup);
    priceRange.addEventListener('input', fetchProducts);
    document.getElementById('sizeFilter').addEventListener('change', fetchProducts);
    document.getElementById('proceedToPaymentButton').addEventListener('click', proceedToPayment);
}

function handleStorageChange(event) {
    if (event.key === 'updateProducts' && event.newValue === 'true') {
        console.log('updateProducts flag detected, fetching products...');
        fetchProducts();
        window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
    }
}

function handleBodyClick(event) {
    if (event.target.matches('.category-button')) {
        fetchProductsByCategory(event.target.dataset.category, event.target);
    } else if (event.target.matches('.filter-button')) {
        if (event.target.dataset.category) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else {
            fetchProducts();
        }
    } else if (event.target.matches('.brand-button')) {
        fetchProductsByBrand(event.target.dataset.brand);
    } else if (event.target.matches('.remove-button')) {
        removeFromCart(event.target.dataset.id);
    } else if (event.target.matches('.add-to-cart-button')) {
        addToCart(event.target.dataset.id);
    }
}

function toggleCartVisibility() {
    cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
}

function openFilters() {
    sidebar.classList.add('open');
    showFilters.style.display = 'none';
    filtersClose.style.display = 'block';
}

function closeFilters() {
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';
}

function toggleAvailableBrands() {
    availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
}

function handleSearchKeyup(event) {
    if (event.key === "Enter") {
        fetchProducts();
    }
}

function proceedToPayment() {
    window.location.href = 'checkout.html';
}

function populateSizeFilter() {
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);
    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
}

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = JSON.parse(localStorage.getItem('cart')) || {}; // Initialize cart from localStorage
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products);
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product);
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(brands => {
            console.log('Brands fetched:', brands);
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
                saveCartToLocalStorage(); // Save cart to localStorage
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
        saveCartToLocalStorage(); // Save cart to localStorage
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
    saveCartToLocalStorage(); // Save cart to localStorage
}

function saveCartToLocalStorage() {
    localStorage.setItem('cart', JSON.stringify(cart));
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #checkoutPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        h2 {
            margin-top: 0;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 50px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
    </style>
</head>
<body>
    <h1>Checkout</h1>
    <div id="checkoutPanel">
        <h2>Your Cart</h2>
        <div id="checkoutCartItems"></div>
        <div id="checkoutCartTotal"></div>
        <h2>Payment Information</h2>
        <form id="paymentForm">
            <input type="text" id="cardNumber" placeholder="Card Number" required>
            <input type="text" id="cardName" placeholder="Name on Card" required>
            <input type="month" id="cardExpiry" placeholder="Expiry Date" required>
            <input type="text" id="cardCVC" placeholder="CVC" required>
            <button type="submit">Pay Now</button>
        </form>
    </div>

    <script src="checkout.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart); // Debug log

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const paymentDetails = {
            cardNumber: document.getElementById('cardNumber').value,
            cardName: document.getElementById('cardName').value,
            cardExpiry: document.getElementById('cardExpiry').value,
            cardCVC: document.getElementById('cardCVC').value
        };

        console.log('Processing payment with details:', paymentDetails);

        // Simulate payment process
        setTimeout(() => {
            alert('Payment successful!');
            localStorage.removeItem('cart'); // Clear the cart after successful payment
            window.location.href = 'index.html'; // Redirect to main page after payment
        }, 2000);
    });
});
document.addEventListener('DOMContentLoaded', initialize);

function initialize() {
    fetchProducts();
    fetchBrands();
    setupEventListeners();
    populateSizeFilter();
}

function setupEventListeners() {
    window.addEventListener('storage', handleStorageChange);
    document.body.addEventListener('click', handleBodyClick);
    document.getElementById('cartIcon').addEventListener('click', toggleCartVisibility);
    document.getElementById('showFilters').addEventListener('click', openFilters);
    document.getElementById('filtersClose').addEventListener('click', closeFilters);
    document.getElementById('availableBrandsToggle').addEventListener('click', toggleAvailableBrands);
    searchInput.addEventListener('keyup', handleSearchKeyup);
    priceRange.addEventListener('input', fetchProducts);
    document.getElementById('sizeFilter').addEventListener('change', fetchProducts);
    document.getElementById('proceedToPaymentButton').addEventListener('click', proceedToPayment);
}

function handleStorageChange(event) {
    if (event.key === 'updateProducts' && event.newValue === 'true') {
        console.log('updateProducts flag detected, fetching products...');
        fetchProducts();
        window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
    }
}

function handleBodyClick(event) {
    if (event.target.matches('.category-button')) {
        fetchProductsByCategory(event.target.dataset.category, event.target);
    } else if (event.target.matches('.filter-button')) {
        if (event.target.dataset.category) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else {
            fetchProducts();
        }
    } else if (event.target.matches('.brand-button')) {
        fetchProductsByBrand(event.target.dataset.brand);
    } else if (event.target.matches('.remove-button')) {
        removeFromCart(event.target.dataset.id);
    } else if (event.target.matches('.add-to-cart-button')) {
        addToCart(event.target.dataset.id);
    }
}

function toggleCartVisibility() {
    cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
}

function openFilters() {
    sidebar.classList.add('open');
    showFilters.style.display = 'none';
    filtersClose.style.display = 'block';
}

function closeFilters() {
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';
}

function toggleAvailableBrands() {
    availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
}

function handleSearchKeyup(event) {
    if (event.key === "Enter") {
        fetchProducts();
    }
}

function proceedToPayment() {
    window.location.href = 'checkout.html';
}

function populateSizeFilter() {
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);
    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
}

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = JSON.parse(localStorage.getItem('cart')) || {}; // Initialize cart from localStorage
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products);
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product);
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(brands => {
            console.log('Brands fetched:', brands);
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
                saveCartToLocalStorage(); // Save cart to localStorage
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
        saveCartToLocalStorage(); // Save cart to localStorage
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
    saveCartToLocalStorage(); // Save cart to localStorage
}

function saveCartToLocalStorage() {
    localStorage.setItem('cart', JSON.stringify(cart));
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        /* Your styles here */
    </style>
</head>
<body>
    <h1>Checkout</h1>
    <div id="checkoutPanel">
        <h2>Your Cart</h2>
        <div id="checkoutCartItems"></div>
        <div id="checkoutCartTotal"></div>
        <h2>Payment Information</h2>
        <form id="paymentForm">
            <input type="text" id="cardNumber" placeholder="Card Number" required>
            <input type="text" id="cardName" placeholder="Name on Card" required>
            <input type="month" id="cardExpiry" placeholder="Expiry Date" required>
            <input type="text" id="cardCVC" placeholder="CVC" required>
            <button type="submit">Pay Now</button>
        </form>
    </div>
    <script src="checkout.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    console.log('paymentForm:', paymentForm);
    console.log('checkoutCartItems:', checkoutCartItems);
    console.log('checkoutCartTotal:', checkoutCartTotal);

    if (!checkoutCartItems) {
        console.error('checkoutCartItems element not found');
        return;
    }

    if (!checkoutCartTotal) {
        console.error('checkoutCartTotal element not found');
        return;
    }

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart); // Debug log

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const paymentDetails = {
            cardNumber: document.getElementById('cardNumber').value,
            cardName: document.getElementById('cardName').value,
            cardExpiry: document.getElementById('cardExpiry').value,
            cardCVC: document.getElementById('cardCVC').value
        };

        console.log('Processing payment with details:', paymentDetails);

        // Simulate payment process
        setTimeout(() => {
            alert('Payment successful!');
            localStorage.removeItem('cart'); // Clear the cart after successful payment
            window.location.href = 'index.html'; // Redirect to main page after payment
        }, 2000);
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input, button {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: 1px solid #ccc;
            width: 100%;
        }
        button {
            cursor: pointer;
            background-color: #5c67f2;
            color: white;
        }
        #checkoutPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        h2 {
            margin-top: 0;
        }
        .cart-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .cart-item img {
            width: 50px;
            height: auto;
            margin-right: 10px;
        }
        .cart-item h4 {
            display: inline;
        }
        .cart-item span {
            font-weight: bold;
        }
        .cart-total {
            font-weight: bold;
            margin-top: 10px;
            text-align: right;
        }
    </style>
</head>
<body>
    <h1>Checkout</h1>
    <div id="checkoutPanel">
        <h2>Your Cart</h2>
        <div id="checkoutCartItems"></div>
        <div id="checkoutCartTotal"></div>
        <h2>Payment Information</h2>
        <form id="paymentForm">
            <input type="text" id="cardNumber" placeholder="Card Number" required>
            <input type="text" id="cardName" placeholder="Name on Card" required>
            <input type="month" id="cardExpiry" placeholder="Expiry Date" required>
            <input type="text" id="cardCVC" placeholder="CVC" required>
            <button type="submit">Pay Now</button>
        </form>
    </div>

    <script src="checkout.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <style>
        /* Your CSS styles here */
    </style>
</head>
<body>
    <header>
        <h1>SHOE SHOP</h1>
        <div id="cartIcon">Cart (<span id="cartCount">0</span>)</div>
    </header>
    
    <div id="productContainer"></div>
    
    <div id="cartContainer" style="display:none;">
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <button class="proceed-button" onclick="location.href='checkout.html'" style="display:none;">Proceed to Payment</button>
    </div>

    <script src="main.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    document.getElementById('proceedToPaymentButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'checkout.html';
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }

    // Save cart to localStorage
    localStorage.setItem('cart', JSON.stringify(cart));
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    document.getElementById('proceedToPaymentButton').addEventListener('click', function(event) {
        event.preventDefault();
        const cartData = encodeURIComponent(JSON.stringify(cart));
        window.location.href = `checkout.html?cart=${cartData}`;
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }

    // Save cart to sessionStorage
    sessionStorage.setItem('cart', JSON.stringify(cart));
    console.log('Cart saved to sessionStorage:', cart); // Debug log
}
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    console.log('paymentForm:', paymentForm);
    console.log('checkoutCartItems:', checkoutCartItems);
    console.log('checkoutCartTotal:', checkoutCartTotal);

    if (!checkoutCartItems) {
        console.error('checkoutCartItems element not found');
        return;
    }

    if (!checkoutCartTotal) {
        console.error('checkoutCartTotal element not found');
        return;
    }

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart);

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const paymentDetails = {
            cardNumber: document.getElementById('cardNumber').value,
            cardName: document.getElementById('cardName').value,
            cardExpiry: document.getElementById('cardExpiry').value,
            cardCVC: document.getElementById('cardCVC').value
        };

        console.log('Processing payment with details:', paymentDetails);

        // Basic validation (improve as needed)
        if (!paymentDetails.cardNumber || !paymentDetails.cardName || !paymentDetails.cardExpiry || !paymentDetails.cardCVC) {
            alert('Please fill in all payment details.');
            return;
        }

        // Simulate payment process with a loading indicator
        const loadingMessage = document.createElement('p');
        loadingMessage.innerText = 'Processing payment...';
        paymentForm.appendChild(loadingMessage);

        setTimeout(() => {
            alert('Payment successful!');
            localStorage.removeItem('cart'); // Clear the cart after successful payment
            window.location.href = 'index.html'; // Redirect to main page after payment
        }, 2000);
    });
});
document.addEventListener('DOMContentLoaded', () => {
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    if (!checkoutCartItems) {
        console.error('checkoutCartItems element not found');
        return;
    }

    if (!checkoutCartTotal) {
        console.error('checkoutCartTotal element not found');
        return;
    }

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart); // Debug log

    if (Object.keys(cart).length === 0) {
        console.warn('Cart is empty');
        checkoutCartItems.innerHTML = '<p>Your cart is empty.</p>';
        checkoutCartTotal.innerHTML = '<p>Total Price: $0.00</p>';
        return;
    }

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();
});
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    console.log('paymentForm:', paymentForm);
    console.log('checkoutCartItems:', checkoutCartItems);
    console.log('checkoutCartTotal:', checkoutCartTotal);

    if (!checkoutCartItems) {
        console.error('checkoutCartItems element not found');
        return;
    }

    if (!checkoutCartTotal) {
        console.error('checkoutCartTotal element not found');
        return;
    }

    // Fetch cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    console.log('Cart data from localStorage:', cart);

    // Function to display cart items and total price
    function displayCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the cart items on page load
    displayCartItems();

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const paymentDetails = {
            cardNumber: document.getElementById('cardNumber').value,
            cardName: document.getElementById('cardName').value,
            cardExpiry: document.getElementById('cardExpiry').value,
            cardCVC: document.getElementById('cardCVC').value
        };

        console.log('Processing payment with details:', paymentDetails);

        // Basic validation (improve as needed)
        if (!paymentDetails.cardNumber || !paymentDetails.cardName || !paymentDetails.cardExpiry || !paymentDetails.cardCVC) {
            alert('Please fill in all payment details.');
            return;
        }

        // Simulate payment process with a loading indicator
        const loadingMessage = document.createElement('p');
        loadingMessage.innerText = 'Processing payment...';
        paymentForm.appendChild(loadingMessage);

        setTimeout(() => {
            alert('Payment successful!');
            localStorage.removeItem('cart'); // Clear the cart after successful payment
            window.location.href = 'index.html'; // Redirect to main page after payment
        }, 2000);
    });
});
function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                console.log('Cart before saving:', JSON.stringify(cart));
                // Update localStorage
                localStorage.setItem('cart', JSON.stringify(cart));
                console.log('Cart saved to localStorage');
                updateCart();  // Update UI to reflect the new cart state
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}
function updateCartDisplay() {
    const cartData = JSON.parse(localStorage.getItem('cart')) || {};
    cartItemsContainer.innerHTML = ''; // Clear existing cart items
    let totalPrice = 0;
    Object.keys(cartData).forEach(id => {
        const product = cartData[id];
        Object.keys(product.sizes).forEach(size => {
            const quantity = product.sizes[size];
            totalPrice += product.price * quantity;
            const cartItemHtml = `
                <div class="cart-item">
                    <img src="${product.image}" alt="${product.brand} ${product.model}" />
                    <div>
                        <h4>${product.brand} - ${product.model}</h4>
                        <p>Size: ${size} x${quantity}</p>
                        <p>Price: $${product.price}</p>
                        <button onclick="removeFromCart('${id}', '${size}')" class="remove-button">Remove</button>
                    </div>
                </div>
            `;
            cartItemsContainer.insertAdjacentHTML('beforeend', cartItemHtml);
        });
    });
    cartTotalContainer.innerHTML = `Total Price: $${totalPrice.toFixed(2)}`;
}
function updateCart() {
    // Retrieve the most current cart data from localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            const quantity = item.sizes[size];
            totalPrice += item.price * quantity;
            itemCount += quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${quantity}</span>
                    <p>Price: $${item.price}</p>
                    <button onclick="removeFromCart('${productId}', '${size}')" class="remove-button">&times;</button>
                </div>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (!cart[productId]) {
                    cart[productId] = { ...product, sizes: {} };
                }
                if (cart[productId].sizes[selectedSize]) {
                    cart[productId].sizes[selectedSize]++;
                } else {
                    cart[productId].sizes[selectedSize] = 1;
                }
                console.log('Cart before saving:', JSON.stringify(cart));
                updateCart();  // Make sure this function does not clear or incorrectly manipulate the cart before saving
                localStorage.setItem('cart', JSON.stringify(cart));  // Save every update
                console.log('Cart saved to localStorage', localStorage.getItem('cart'));
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}
function addToCart(productId) {
    console.log("Attempting to add product to cart, ID:", productId);
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === parseInt(productId));
            console.log("Product fetched for cart:", product);
            if (!product) {
                console.error("Product not found, cannot add to cart");
                return;
            }
            const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
            if (!selectedSize) {
                alert("Please select a size.");
                return;
            }
            if (!cart[productId]) {
                cart[productId] = { ...product, sizes: {} };
            }
            if (cart[productId].sizes[selectedSize]) {
                cart[productId].sizes[selectedSize]++;
            } else {
                cart[productId].sizes[selectedSize] = 1;
            }
            console.log("Cart before updating localStorage:", cart);
            localStorage.setItem('cart', JSON.stringify(cart));
            console.log("Cart after updating localStorage:", localStorage.getItem('cart'));
        })
        .catch(error => {
            console.error("Error in addToCart:", error);
        });
}
function addToCart(productId) {
    console.log('Adding to cart, product ID:', productId);
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id === parseInt(productId));
            console.log('Product to add:', product);
            if (!product) {
                console.error('Product not found, cannot add to cart');
                return;
            }
            // Assume product size selection logic here
            // Update cart logic
            localStorage.setItem('cart', JSON.stringify(cart));
            console.log('Cart updated in localStorage:', localStorage.getItem('cart'));
        })
        .catch(error => {
            console.error('Error fetching product data:', error);
        });
}
function updateCart() {
    // Update local storage with the current cart state
    localStorage.setItem('cart', JSON.stringify(cart));

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    fetchBrands();

    // Load cart from local storage
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
        cart = JSON.parse(savedCart);
        updateCart();
    }

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'cart') {
            cart = JSON.parse(event.newValue);
            updateCart();
        } else if (event.key === 'updateProducts' && event.newValue === 'true') {
            console.log('updateProducts flag detected, fetching products...');
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = {};

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products);
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = '';
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product);
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    // Update local storage with the current cart state
    localStorage.setItem('cart', JSON.stringify(cart));

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
document.addEventListener('DOMContentLoaded', () => {
    // Initialize or load the cart from local storage
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
        cart = JSON.parse(savedCart);
    } else {
        // If no cart is saved, initialize an empty cart and save it
        cart = {};
        localStorage.setItem('cart', JSON.stringify(cart));
    }
    updateCart(); // Update cart display based on current cart status

    fetchProducts();
    fetchBrands();

    // Listen for localStorage changes
    window.addEventListener('storage', function(event) {
        if (event.key === 'cart') {
            cart = JSON.parse(event.newValue);
            updateCart();
        } else if (event.key === 'updateProducts' && event.newValue === 'true') {
            console.log('updateProducts flag detected, fetching products...');
            fetchProducts();
            window.localStorage.setItem('updateProducts', 'false'); // Reset the flag
        }
    });

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            removeFromCart(event.target.dataset.id);
        } else if (event.target.matches('.add-to-cart-button')) {
            addToCart(event.target.dataset.id);
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({length: 25}, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
let cart = {};

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    console.log('Fetching products with query:', query);

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(products => {
            console.log('Raw products response:', products);
            if (!Array.isArray(products)) {
                throw new Error('Expected an array of products but got something else');
            }
            console.log('Products fetched:', products);
            productContainer.innerHTML = '';
            products.forEach(product => {
                if (!product.sizes) {
                    console.error('Product missing sizes:', product);
                    return;
                }
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product.id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

function removeFromCart(productId) {
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (cart[productId] && cart[productId].sizes[selectedSize]) {
        if (cart[productId].sizes[selectedSize] > 1) {
            cart[productId].sizes[selectedSize]--;
        } else {
            delete cart[productId].sizes[selectedSize];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart();
    }
}

function updateCart() {
    // Update local storage with the current cart state
    localStorage.setItem('cart', JSON.stringify(cart));

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;
    for the const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }
    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}
// Cookie Utility Functions
function setCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + '=' + (value || "") + expires + "; path=/";
}

function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length);
    }
    return null;
}

function eraseCookie(name) {
    document.cookie = name + '=; Max-Age=-99999999;';
}

// Modify existing cart functions to use cookies
document.addEventListener('DOMContentLoaded', () => {
    const paymentForm = document.getElementById('paymentForm');
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');

    const cart = JSON.parse(getCookie('cart') || '{}');
    displayCartItems(cart);

    paymentForm.addEventListener('submit', (event) => {
        event.preventDefault();
        alert('Payment successful!');
        eraseCookie('cart');  // Clear cart after payment
        window.location.href = 'index.html'; // Redirect after payment
    });
});

function displayCartItems(cart) {
    checkoutCartItems.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;

    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            const cartItem = document.createElement('div');function addToCart(productId) {
    console.log("Attempting to add to cart:", productId);  // Debug log to check function call

    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            console.log("Product found:", product);  // Debug log to verify product retrieval

            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                console.log("Selected size:", selectedSize);  // Debug log to check size selection

                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }

                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }

                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}

            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
            `;
            checkoutCartItems.appendChild(cartItem);
        }
    }

    checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
}

// Example to update the cart in cookies instead of localStorage
function addToCart(productId) {
    var cart = JSON.parse(getCookie('cart') || '{}');
    // Add product logic
    setCookie('cart', JSON.stringify(cart), 7);  // Save for 7 days
}

// Call displayCartItems on page load with cart data from cookies
document.addEventListener('DOMContentLoaded', function() {
    var cart = JSON.parse(getCookie('cart') || '{}');
    displayCartItems(cart);
});
import requests

url = 'https://api.example.com/fashion/products'
headers = {
    'Authorization': 'Bearer your_api_key'
}

response = requests.get(url, headers=headers)
if response.status_code == 200:
    products = response.json()
    for product in products:
        print(product['name'], product['price'])
else:
    print('Failed to retrieve products')
function updateCart() {
    console.log("Updating cart with current items:", cart);  // Log the entire cart object

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    for (const productId in cart) {
        const item = cart[productId];
        console.log("Processing item:", item);  // Log each item being processed

        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];
            
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${item.id}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
            console.log("Added item to cart UI:", cartItem);  // Log the UI update for the item
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;
    console.log("Cart total updated:", totalPrice, "Total items:", itemCount);  // Log totals

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
        console.log("Cart is empty");  // Log empty cart state
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
        console.log("Proceed to checkout button displayed");  // Log button display state
    }
}
function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                saveCartToCookies(); // Save cart to cookies
                updateCart();
                console.log(`Product added:`, cart); // This will log the entire cart object to the console
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}
function updateCart() {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');
    cartItemsContainer.innerHTML = ''; // Clear the cart items container
    let total = 0;

    // Assuming `cart` is an object where keys are product IDs and values are objects containing `name`, `price`, and `quantity`
    for (const id in cart) {
        const item = cart[id];
        total += item.price * item.quantity;

        const itemElement = document.createElement('div');
        itemElement.className = 'cart-item';
        itemElement.innerHTML = `
            <img src="${item.image}" alt="${item.name}">
function loadCartFromCookies() {
    const cookieValue = getCookie('cart');
    if (cookieValue) {
        try {
            Object.assign(cart, JSON.parse(cookieValue));
            console.log('Cart Loaded from Cookies:', cart);
            updateCart();  // Ensure the cart display is updated after loading
        } catch (e) {
            console.error('Error parsing cart from cookies:', e);
        }
    } else {
        console.log('No Cart Data in Cookies');
    }
}
function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i].trim();
        if (c.indexOf(nameEQ) === 0) {
            const value = c.substring(nameEQ.length, c.length);
            if (value) {
                console.log(`Cookie Retrieved: ${name} = ${value}`);
                return value;
            }
        }
    }
    console.log(`Cookie Not Found: ${name}`);
    return null;
}
function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                saveCartToCookies(); // Save cart to cookies
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}
function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = "; expires=" + date.toUTCString();
    const secureFlag = window.location.protocol === 'https:' ? '; Secure' : '';
    document.cookie = `${name}=${value || ""}${expires}; path=/${secureFlag}`;
    console.log(`Cookie Set: ${name} = ${value}`);
}

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i].trim();
        if (c.indexOf(nameEQ) === 0) {
            const value = c.substring(nameEQ.length, c.length);
            if (value) {
                console.log(`Cookie Retrieved: ${name} = ${value}`);
                return value;
            }
        }
    }
    console.log(`Cookie Not Found: ${name}`);
    return null;
}

function eraseCookie(name) {
    document.cookie = name + '=; Max-Age=-99999999;';
    console.log(`Cookie Erased: ${name}`);
}

function loadCartFromCookies() {
    const cookieValue = getCookie('cart');
    if (cookieValue) {
        try {
            Object.assign(cart, JSON.parse(cookieValue));
            console.log('Cart Loaded from Cookies:', cart);
            updateCart();  // Ensure the cart display is updated after loading
        } catch (e) {
            console.error('Error parsing cart from cookies:', e);
        }
    } else {
        console.log('No Cart Data in Cookies');
    }
}

function saveCartToCookies() {
    setCookie('cart', JSON.stringify(cart), 7); // Save for 7 days
    console.log('Cart Saved to Cookies:', cart);
}

function addToCart(productId) {
    fetch(`http://localhost:3000/api/products`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(products => {
            const product = products.find(product => product.id === parseInt(productId));
            if (product) {
                const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }
                if (cart[productId]) {
                    if (cart[productId].sizes[selectedSize]) {
                        cart[productId].sizes[selectedSize]++;
                    } else {
                        cart[productId].sizes[selectedSize] = 1;
                    }
                } else {
                    cart[productId] = { ...product, sizes: { [selectedSize]: 1 } };
                }
                saveCartToCookies(); // Save cart to cookies
                updateCart();
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
        });
}
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const crypto = require('crypto');
const User = require('./models/User');
const Product = require('./models/Product');
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

app.use(session({
  secret: sessionSecret,
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// Example initial products
const initialProducts = [
    {
        name: "Nike Air Max",
        description: "Comfortable and stylish running shoes.",
        price: 120,
        brand: "Nike",
        sizes: ["8", "9", "10", "11"],
        categories: ["Sports", "Running"],
        image: "http://example.com/path/to/nike_air_max.jpg"
    },
    {
        name: "Adidas UltraBoost",
        description: "High performance sneakers with superior cushioning.",
        price: 180,
        brand: "Adidas",
        sizes: ["8", "9", "10"],
        categories: ["Sports", "Athletic"],
        image: "http://example.com/path/to/adidas_ultraboost.jpg"
    },
    {
        name: "Converse All Star",
        description: "Classic sneakers for everyday style.",
        price: 50,
        brand: "Converse",
        sizes: ["7", "8", "9", "10", "11"],
        categories: ["Casual"],
        image: "http://example.com/path/to/converse_all_star.jpg"
    }
];

// Route to initialize products
app.get('/api/initialize-products', async (req, res) => {
    try {
        const existingCount = await Product.countDocuments();
        if (existingCount === 0) {
            await Product.insertMany(initialProducts);
            res.status(201).json({ message: "Products initialized successfully" });
        } else {
            res.status(200).json({ message: "Products are already initialized" });
        }
    } catch (error) {
        console.error('Error initializing products:', error);
        res.status(500).json({ message: 'Failed to initialize products' });
    }
});

// Existing routes and server startup logic here...
// ...

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const crypto = require('crypto');
const User = require('./models/User');
const Product = require('./models/Product');
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

app.use(session({
  secret: sessionSecret,
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// Example initial products
const initialProducts = [
    {
        name: "Nike Air Max",
        description: "Comfortable and stylish running shoes.",
        price: 120,
        brand: "Nike",
        sizes: ["8", "9", "10", "11"],
        categories: ["Sports", "Running"],
        image: "http://example.com/path/to/nike_air_max.jpg"
    },
    {
        name: "Adidas UltraBoost",
        description: "High performance sneakers with superior cushioning.",
        price: 180,
        brand: "Adidas",
        sizes: ["8", "9", "10"],
        categories: ["Sports", "Athletic"],
        image: "http://example.com/path/to/adidas_ultraboost.jpg"
    },
    {
        name: "Converse All Star",
        description: "Classic sneakers for everyday style.",
        price: 50,
        brand: "Converse",
        sizes: ["7", "8", "9", "10", "11"],
        categories: ["Casual"],
        image: "http://example.com/path/to/converse_all_star.jpg"
    }
];

// Route to initialize products
app.get('/api/initialize-products', async (req, res) => {
    try {
        const existingCount = await Product.countDocuments();
        if (existingCount === 0) {
            await Product.insertMany(initialProducts);
            res.status(201).json({ message: "Products initialized successfully" });
        } else {
            res.status(200).json({ message: "Products are already initialized" });
        }
    } catch (error) {
        console.error('Error initializing products:', error);
        res.status(500).json({ message: 'Failed to initialize products' });
    }
});

// Middleware to check if the user is an admin
function isAdmin(req, res, next) {
    if (req.session.user && req.session.user.isAdmin) {
      return next();
    }
    res.status(403).json({ message: 'Access denied' });
}

// Route to serve the admin page if the user is an admin
app.get('/admin.html', isAdmin, (req, res) => {
    res.sendFile(__dirname + '/public/admin.html');
});

// Redirect to login if not logged in
app.get('/', (req, res) => {
  if (req.session.user) {
    res.redirect('/index.html');
  } else {
    res.redirect('/login');
  }
});

app.get('/login', (req, res) => {
  res.sendFile(__dirname + '/public/login.html');
});

// Route to the shoes page (only accessible if logged in)
app.get('/index.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/index.html');
  } else {
    res.redirect('/login');
  }
});

// Serve static files
app.use(express.static('public'));

// API Endpoints for Products

// Get all products with optional filters
app.get('/api/products', async (req, res) => {
  try {
    const { search, maxPrice, category, brand, size } = req.query;

    // Build the query object
    const query = {};

    if (search) {
      const regex = new RegExp(search, 'i');
      query.$or = [
        { brand: regex },
        { model: regex },
        { description: regex }
      ];
    }

    if (maxPrice) {
      query.price = { $lte: parseFloat(maxPrice) };
    }

    if (category) {
      query.categories = category;
    }

    if (brand) {
      query.brand = brand;
    }

    if (size) {
      query.sizes = size;
    }

    const products = await Product.find(query);
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Failed to fetch products' });
  }
});

// Get a specific product by ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ message: 'Server error fetching product' });
  }
});

// Add a product to the cart and store it in a cookie
app.post('/cart/add', (req, res) => {
  const { productId, size, price, image, brand, model } = req.body;
  let cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};

  if (!cart[productId]) {
    cart[productId] = { sizes: {}, price, image, brand, model };
  }

  if (!cart[productId].sizes[size]) {
    cart[productId].sizes[size] = 0;
  }

  cart[productId].sizes[size] += 1;

  res.cookie('cart', JSON.stringify(cart), { httpOnly: true });
  console.log('Cart stored in cookie:', cart); // Log cart content
  res.status(200).json({ message: 'Product added to cart', cart });
});

// User login
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
  
    try {
      const user = await User.findOne({ username });
  
      if (!user) {
        return res.status(400).json({ message: 'Invalid username or password' });
      }
  
      const isMatch = await bcrypt.compare(password, user.password);
  
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid username or password' });
      }
  
      req.session.user = {
        id: user._id,
        username: user.username,
        isAdmin: user.isAdmin
      };
  
      if (user.isAdmin) {
        // Redirect admin to the admin page
        res.redirect('/admin.html');
      } else {
        // Redirect regular user to the index page
        res.redirect('/index.html');
      }
    } catch (error) {
      console.error('Error during login:', error);
      res.status(500).json({ message: 'Server error during login' });
    }
});

// Fetch cart data for display on the checkout page
app.get('/cart', (req, res) => {
  const cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};
  res.status(200).json(cart);
});

// User registration
app.post('/register', async (req, res) => {
    const { username, password, email } = req.body;
  
    try {
      // Check if the user already exists
      const existingUser = await User.findOne({ username });
      if (existingUser) {
        return res.status(400).json({ message: 'Username already exists' });
      }
  
      // Hash the password before saving
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);
  
      // Create a new user
      const newUser = new User({
        username,
        password: hashedPassword,
        email
      });
  
      // Save the user to the database
      await newUser.save();
  
      res.status(200).json({ message: 'Registration successful' });
    } catch (error) {
      console.error('Error during registration:', error);
      res.status(500).json({ message: 'Server error during registration' });
    }
});

// Add a new product
app.post('/api/products', async (req, res) => {
    try {
      const newProduct = new Product(req.body);
      await newProduct.save();
      res.status(201).json(newProduct);
    } catch (error) {
      console.error('Error adding product:', error);
      res.status(500).json({ message: 'Failed to add product' });
    }
});

// Update a product
app.put('/api/products/:id', async (req, res) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Failed to update product' });
  }
});

// Delete a product
app.delete('/api/products/:id', async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.status(204).end();
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ message: 'Failed to delete product' });
  }
});

// Get a list of brands with product counts
app.get('/api/brands', async (req, res) => {
  try {
    const brands = await Product.aggregate([
      { $group: { _id: '$brand', count: { $sum: 1 } } }
    ]);

    const brandCounts = brands.reduce((acc, brand) => {
      acc[brand._id] = brand.count;
      return acc;
    }, {});

    res.json(brandCounts);
  } catch (error) {
    console.error('Error fetching brands:', error);
    res.status(500).json({ message: 'Failed to fetch brands' });
  }
});

// Logout route
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login');
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const UserSchema = new Schema({
    username: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    isAdmin: {
        type: Boolean,
        default: false
    }
});

const User = mongoose.model('User', UserSchema);
module.exports = User;
const axios = require('axios');

const products = [
    {
        id: 1,
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    {
        id: 2,
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    // Add the rest of your products here
];

const addProducts = async () => {
    for (const product of products) {
        try {
            const response = await axios.post('http://localhost:3000/api/products', product);
            console.log(`Added product: ${response.data.model} with ID: ${response.data.id}`);
        } catch (error) {
            console.error(`Error adding product: ${product.model}`, error.message);
        }
    }
};

addProducts();
const axios = require('axios');

const products = [
    {
        brand: 'Nike',
        model: 'Air Force 1',
        description: 'style, fashion',
        price: 300,
        image: 'https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/b7d9211c-26e7-431a-ac24-b0540fb3c00f/air-force-1-07-shoes-rWtqPn.png',
        categories: ['woman', 'sports', 'fashion'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    {
        brand: 'New Balance',
        model: '574 Classic',
        description: 'style, fashion, running',
        price: 630,
        image: 'https://media.terminalx.com/pub/media/catalog/product/cache/f112238e8de94b6d480bd02e7a9501b8/w/1/w151130005-11700041806.jpg',
        categories: ['sports'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    // Repeat for each product...
    {
        brand: 'Adidas',
        model: 'Ultraboost',
        description: 'comfort, running',
        price: 180,
        image: 'https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/f5373115e0784e498914b402b059200d_9366/Ultraboost_1.0_Shoes_Grey_ID9674_01_standard.jpg',
        categories: ['man', 'sports'],
        sizes: Array.from({ length: 25 }, (_, i) => 36 + i * 0.5)
    },
    // Add other products similarly...
];

const addProducts = async () => {
    for (const product of products) {
        try {
            const response = await axios.post('http://localhost:3000/api/products', product);
            console.log(`Added product: ${response.data.model} with ID: ${response.data.id}`);
        } catch (error) {
            console.error(`Error adding product: ${product.model}`, error.message);
        }
    }
};

addProducts();
const express = require('express');
const mongoose = require('mongoose');
const Product = require('./models/Product'); // Import your Product model

const app = express();
app.use(express.json()); // Middleware to parse JSON bodies

app.get('/api/products/:id', async (req, res) => {
    const productId = req.params.id; // This can be an alphanumeric string like '507f1f77bcf86cd799439011'
    try {
        const product = await Product.findById(productId);
        if (product) {
            res.json(product);
        } else {
            res.status(404).send('Product not found');
        }
    } catch (error) {
        res.status(500).send('Server error');
    }
});

app.listen(3000, () => console.log('Server running on port 3000'));
function addToCart(productId) {
    // Assuming the productId is already fetched and does not need to be fetched again
    const selectedSize = document.querySelector(`.size-select[data-id="${productId}"]`).value;
    if (!selectedSize) {
        alert('Please select a size.');
        return;
    }

    // Simulate adding to cart
    const product = { id: productId, price: 100, sizes: [selectedSize] }; // Simplified product data
    if (!cart[productId]) {
        cart[productId] = { sizes: {}, price: product.price, image: product.image, brand: product.brand, model: product.model };
    }
    if (!cart[productId].sizes[selectedSize]) {
        cart[productId].sizes[selectedSize] = 0;
    }
    cart[productId].sizes[selectedSize] += 1;

    saveCartToCookies(); // Save cart to cookies
    updateCart();
}
// cart.js
function addToCart(productId, price, image, brand, model) {
    const selectedSizeElement = document.querySelector(`.size-select[data-id="${productId}"]`);
    if (!selectedSizeElement) {
        alert('Size selector not found.');
        return;
    }
    const selectedSize = selectedSizeElement.value;
    if (!selectedSize) {
        alert('Please select a size.');
        return;
    }

    // Initialize or update the cart entry
    if (!cart[productId]) {
        cart[productId] = { price, image, brand, model, sizes: {} };
    }

    cart[productId].sizes[selectedSize] = (cart[productId].sizes[selectedSize] || 0) + 1;

    saveCartToCookies();
    updateCartUI();
}

function updateCartUI() {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');
    cartItemsContainer.innerHTML = '';
    let total = 0;

    for (const id in cart) {
        const product = cart[id];
        for (const size in product.sizes) {
            const quantity = product.sizes[size];
            const cost = quantity * product.price;
            total += cost;

            const itemElement = document.createElement('div');
            itemElement.innerHTML = `
                <div>
                    ${product.brand} ${product.model} - Size: ${size} - Qty: ${quantity}
                    <br>Price per unit: $${product.price}, Subtotal: $${cost.toFixed(2)}
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
        }
    }

    cartTotalContainer.textContent = `Total: $${total.toFixed(2)}`;
}

// Save cart to cookies for persistence
function saveCartToCookies() {
    const data = JSON.stringify(cart);
    setCookie('cart', data, 7);  // Save for 7 days
}

// Load cart from cookies on startup
function loadCartFromCookies() {
    const data = getCookie('cart');
    if (data) {
        cart = JSON.parse(data);
        updateCartUI();
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <script src="/js/profile.js"></script>

    <!-- Navigation Home Icon -->
    <a id="homeButton" href="index.html">
        <i class="fas fa-home"></i>
    </a>

    <h1>User Profile</h1>
    <div id="profilePanel">
        <h2>My Information:</h2>
        <div class="profile-info">
            <div>
                <label>Username:</label>
                <input type="text" id="username" disabled value="JohnDoe">
            </div>
            <i class="fas fa-pen edit-icon" onclick="toggleEdit('username')"></i>
        </div>
        <div class="profile-info">
            <div>
                <label>Email:</label>
                <input type="email" id="email" disabled value="johndoe@example.com">
            </div>
            <i class="fas fa-pen edit-icon" onclick="toggleEdit('email')"></i>
        </div>
        <div class="profile-info">
            <div>
                <label>Address:</label>
                <input type="text" id="address" disabled value="123 Main St">
            </div>
            <i class="fas fa-pen edit-icon" onclick="toggleEdit('address')"></i>
        </div>
        <div class="profile-info">
            <div>
                <label>Phone Number:</label>
                <input type="text" id="phoneNumber" disabled value="555-1234">
            </div>
            <i class="fas fa-pen edit-icon" onclick="toggleEdit('phoneNumber')"></i>
        </div>
        <button id="saveButton" onclick="saveProfile()">Save Changes</button>
    </div>
    <script src="/js/profile.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase History</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <script src="/js/purchase-history.js"></script>

    <!-- Navigation Home Icon -->
    <a id="homeButton" href="index.html">
        <i class="fas fa-home"></i>
    </a>

    <h1>Purchase History</h1>
    <div id="purchaseHistory">
        <!-- Purchase items will be dynamically inserted here -->
    </div>

    <script src="/js/purchase-history.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    loadUserProfile();
});

function loadUserProfile() {
    const username = getCookie('username');
    if (username) {
        fetch(`/api/user-profile?username=${username}`)
            .then(response => response.json())
            .then(userProfile => {
                document.getElementById('username').value = userProfile.username;
                document.getElementById('email').value = userProfile.email;
                document.getElementById('address').value = userProfile.address || 'Update your address';
                document.getElementById('phoneNumber').value = userProfile.phoneNumber || 'Update your phone number';
            })
            .catch(error => {
                console.error('Error loading user profile:', error);
                alert('An error occurred while loading the user profile.');
            });
    } else {
        alert('User not logged in');
        window.location.href = '/login.html'; // Redirect to login if user not logged in
    }
}

function toggleEdit(fieldId) {
    const inputField = document.getElementById(fieldId);
    inputField.disabled = !inputField.disabled;
    if (!inputField.disabled) {
        inputField.focus();
        document.getElementById('saveButton').style.display = 'block';
    }
}

function saveProfile() {
    const oldUsername = getCookie('username'); 
    const newUsername = document.getElementById('username').value;
    const oldEmail = getCookie('email');
    const newEmail = document.getElementById('email').value;
    const address = document.getElementById('address').value;
    const phoneNumber = document.getElementById('phoneNumber').value;

    const updates = {
        oldUsername,
        newUsername,
        oldEmail,
        newEmail,
        address,
        phoneNumber
    };

    fetch('/api/update-profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
    })
    .then(response => response.json())
    .then(data => {
        if (data.message === 'Profile updated successfully') {
            alert('Profile updated successfully!');
        } else {
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('Error updating profile:', error);
        alert('An error occurred while updating the profile.');
    });

    document.getElementById('email').disabled = true;
    document.getElementById('address').disabled = true;
    document.getElementById('phoneNumber').disabled = true;

    document.getElementById('saveButton').style.display = 'none';
}

function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = "; expires=" + date.toUTCString();
    document.cookie = name + "=" + (value || "") + expires + "; path=/";
}

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>User Profile</h1>
    <div id="profilePanel">
        <div class="profile-info">
            <label>Username:</label>
            <input type="text" id="username" disabled>
            <span class="edit-icon" data-field="username">✎</span>
        </div>
        <div class="profile-info">
            <label>Email:</label>
            <input type="email" id="email" disabled>
            <span class="edit-icon" data-field="email">✎</span>
        </div>
        <div class="profile-info">
            <label>Address:</label>
            <input type="text" id="address" disabled>
            <span class="edit-icon" data-field="address">✎</span>
        </div>
        <div class="profile-info">
            <label>Phone Number:</label>
            <input type="text" id="phoneNumber" disabled>
            <span class="edit-icon" data-field="phoneNumber">✎</span>
        </div>
        <button id="saveButton" onclick="saveProfile()" style="display:none;">Save Changes</button>
    </div>
    <script src="profile.js"></script>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f4f4f9;
    color: #333;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.profile-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    position: relative;
    width: 100%;  /* Ensures the container uses the full width */
}

.profile-info label {
    width: 30%;  /* Allocates width to the label */
    min-width: 70px;
    padding-right: 10px;  /* Adds spacing between label and input field */
    text-align: right;  /* Aligns the label text to the right */
}

.profile-info input {
    flex: 1;  /* Allows input fields to fill the remaining space */
    padding: 10px;
    margin-left: 10px;  /* Adds spacing after label */
    border: 1px solid #ccc;
    border-radius: 5px;
}

.edit-icon {
    cursor: pointer;
    position: absolute;
    right: 10px;  /* Positions icon to the right inside the input area */
    color: #333;  /* Icon color */
    font-size: 18px;
}

input[disabled] {
    background: #fff;  /* Background of disabled input */
    color: #333;
}

#saveButton {
    padding: 10px 20px;
    background-color: black;  /* Button color */
    color: white;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
}
document.addEventListener('DOMContentLoaded', () => {
    // Load user profile data
    loadUserProfile();

    // Optionally load purchase history
    if (shouldDisplayPurchaseHistory()) {
        loadPurchaseHistory();
    }
});

function shouldDisplayPurchaseHistory() {
    // Add your logic here to determine if the purchase history should be displayed
    // This could be based on user roles, specific conditions, etc.
    return false; // Set to `true` to enable by default
}

function loadPurchaseHistory() {
    // Fetch and display purchase history
    fetch('/api/purchase-history')
        .then(response => response.json())
        .then(data => {
            // Assuming you have a container div for purchase history
            const container = document.getElementById('purchaseHistory');
            data.forEach(item => {
                const div = document.createElement('div');
                div.innerHTML = `
                    <p>${item.productName} - ${item.date}</p>
                `;
                container.appendChild(div);
            });
        })
        .catch(error => console.error('Failed to load purchase history:', error));
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase History</title>
    <link rel="stylesheet" href="styles.css"> <!-- Assuming styles.css contains necessary styles -->
</head>
<body>
    <a id="homeButton" href="index.html">
        <i class="fas fa-home"></i> Home
    </a>
    <h1>Purchase History</h1>
    <div id="purchaseHistory">
        <!-- Purchase items will be dynamically inserted here -->
        <div class="purchase-item">
            <img src="images/shoe1.png" alt="Nike Air Force 1">
            <div class="order-info">
                <h3>Nike Air Force 1</h3>
                <p>Order Number: 0000001</p>
                <p>Date: 12/06/2024</p>
                <p>Price: $100</p>
                <button class="leave-review-button" onclick="window.location.href='review.html'">Leave a Review</button>
            </div>
        </div>
        <div class="purchase-item">
            <img src="images/shoe2.png" alt="Adidas Ultraboost">
            <div class="order-info">
                <h3>Adidas Ultraboost</h3>
                <p>Order Number: 0000002</p>
                <p>Date: 01/07/2024</p>
                <p>Price: $180</p>
                <button class="leave-review-button" onclick="window.location.href='review.html'">Leave a Review</button>
            </div>
        </div>
    </div>
    <script src="js/purchase-history.js"></script> <!-- Placeholder for your JavaScript if needed -->
</body>
</html>
#showFilters {
    position: fixed;
    right: 20px;
    top: 20px;
    font-size: 24px;
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 5px;
    background: #dee4e5;
    border-radius: 5px;
}

#showFilters a {
    color: #5c67f2;
    transition: color 0.3s ease, transform 0.3s ease;
}

#showFilters a:hover {
    color: #3c46b5;
    transform: scale(1.1);
}
document.addEventListener('DOMContentLoaded', () => {
    // Ensure the sidebar starts closed on page load
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';

    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });

    // Other existing code...
});

// This event listener should be the first one inside the DOMContentLoaded callback
document.addEventListener('DOMContentLoaded', () => {
    // Ensure the sidebar starts closed on page load
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';

    // Rest of your existing code...

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    // Other event listeners...

});
document.addEventListener('DOMContentLoaded', () => {
    // Ensure the sidebar starts closed on page load
    sidebar.classList.remove('open');
    showFilters.style.display = 'block';
    filtersClose.style.display = 'none';

    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });

    // Update cart and fetch initial data
    updateCart(); // Make sure to pass the loaded cart to updateCart if necessary
    fetchProducts();
    fetchBrands();

    // Handle various button clicks
    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            if (event.target.dataset.category) {
                fetchProductsByCategory(event.target.dataset.category, event.target);
            } else {
                fetchProducts();
            }
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            const productId = event.target.dataset.id;
            const size = event.target.dataset.size;
            removeFromCart(productId, size);
        } else if (event.target.matches('.add-to-cart-button')) {
            const productId = event.target.dataset.id;
            const sizeSelector = event.target.closest('.product').querySelector('.size-select');
            if (sizeSelector) {
              addToCart(productId, sizeSelector.value);
            } else {
              console.error('Size selector not found for product', productId);
              alert('Please select a size before adding to cart.');
            }
        }
    });

    // Handle cart icon click
    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    // Handle show/hide sidebar (filters)
    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    // Handle brand toggle
    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    // Handle search input enter key
    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    // Handle price range change
    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    // Handle size filter change
    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    // Handle view cart button click
    document.getElementById('viewCartButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'cart.html';
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });

    updateCart(); // Make sure to pass the loaded cart to updateCart if necessary
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
const cart = loadCartFromCookies();
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product._id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');
    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product.id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                `;
                productContainer.appendChild(productDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId, selectedSize) {
    fetch(`http://localhost:3000/api/products`)
      .then(response => response.json())
      .then(products => {
        const product = products.find(product => product._id === productId);
  
        if (product) {
          if (!selectedSize) {
            alert('Please select a size.');
            return;
          }
  
          if (!cart[productId]) {
            cart[productId] = { ...product, sizes: {} };
          }
  
          if (!cart[productId].sizes[selectedSize]) {
            cart[productId].sizes[selectedSize] = 0;
          }
  
          cart[productId].sizes[selectedSize]++;
  
          saveCartToCookies();
          updateCart();
          alert('Product added to cart successfully!');
        } else {
          console.error(`Product with ID ${productId} not found`);
          alert('Error: Product not found.');
        }
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('An error occurred while adding the product to the cart.');
      });
}

function removeFromCart(productId, size) {
    if (cart[productId] && cart[productId].sizes[size]) {
        if (cart[productId].sizes[size] > 1) {
            cart[productId].sizes[size]--;
        } else {
            delete cart[productId].sizes[size];
            if (Object.keys(cart[productId].sizes).length === 0) {
                delete cart[productId];
            }
        }
        updateCart(); // Update the cart display
        saveCartToCookies(); // Save the updated cart to cookies
    }
}

function saveCartToCookies() {
    try {
        const cartString = JSON.stringify(cart);

        // setCookie('cart', encodeURIComponent(cartString), 7);
        setCookie('cart', cartString, 60);

    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function updateCart() {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    for (const productId in cart) {
        const item = cart[productId];
        for (const size in item.sizes) {
            totalPrice += item.price * item.sizes[size];
            itemCount += item.sizes[size];

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${size}</p>
                    <span>x${item.sizes[size]}</span>
                    <p>Price: $${item.price}</p>
                </div>
                <button class="remove-button" data-id="${productId}" data-size="${size}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount;

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = "; expires=" + date.toUTCString();
    
    // Consider encoding the value to prevent issues with special characters
    const encodedValue = encodeURIComponent(value || "");
    
    // Set the cookie with additional attributes if necessary
    document.cookie = `${name}=${encodedValue}${expires}; path=/; SameSite=None; Secure=true;`;
}

function loadCartFromCookies() {
    try {
        const cartCookie = document.cookie.split('; ').find(row => row.startsWith('cart='));
        if (cartCookie) {
            const cartData = decodeURIComponent(cartCookie.split('=')[1]);
            return JSON.parse(cartData);
        } else {
            return {};
        }
    } catch (error) {
        console.error("Error loading cart from cookies, resetting cart:", error);
        setCookie('cart', '', -1); // Clear the cookie if there's an error
        return {};
    }
}
document.addEventListener('DOMContentLoaded', () => {
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');
    const paymentForm = document.getElementById('paymentForm');

    // Fetch cart data from cookies
    const cart = JSON.parse(getCookie('cart') || '{}');

    // Function to display checkout cart items and total price
    function displayCheckoutCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                totalPrice += item.price * item.sizes[size];
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.style.display = 'flex';
                cartItem.style.alignItems = 'center';
                cartItem.innerHTML = `
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the checkout cart items on page load
    displayCheckoutCartItems();

    // Handle form submission
    paymentForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent default form submission
        window.location.href = 'thankyou.html'; // Redirect to thank you page
    });
});

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thank You</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }
        #thankyouContainer {
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 {
            font-size: 2.5em;
            color: #5c67f2;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.2em;
            margin-bottom: 40px;
            color: #555;
        }
        .home-button {
            padding: 15px 30px;
            background-color: #5c67f2;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 1em;
            cursor: pointer;
        }
        .home-button:hover {
            background-color: #3c46b5;
        }
    </style>
</head>
<body>

    <div id="thankyouContainer">
        <h1>Thank You for Your Purchase!</h1>
        <p>Your payment was successful.</p>
        <a href="index.html" class="home-button">Return to Home</a>
    </div>

</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const checkoutCartItems = document.getElementById('checkoutCartItems');
    const checkoutCartTotal = document.getElementById('checkoutCartTotal');
    const paymentForm = document.getElementById('paymentForm');

    // Fetch cart data from cookies
    const cart = JSON.parse(getCookie('cart') || '{}');

    // Function to display checkout cart items and total price
    function displayCheckoutCartItems() {
        checkoutCartItems.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        for (const productId in cart) {
            const item = cart[productId];
            for (const size in item.sizes) {
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.style.display = 'flex';
                cartItem.style.alignItems = 'center';
                cartItem.innerHTML = `
                    <input type="checkbox" class="checkout-checkbox" data-id="${productId}" data-size="${size}">
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${size}</p>
                        <span>x${item.sizes[size]}</span>
                        <p>Price: $${item.price}</p>
                    </div>
                `;
                checkoutCartItems.appendChild(cartItem);
            }
        }

        // Update the total price when a checkbox is checked/unchecked
        const checkboxes = document.querySelectorAll('.checkout-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                totalPrice = 0;
                checkboxes.forEach(cb => {
                    if (cb.checked) {
                        const productId = cb.dataset.id;
                        const size = cb.dataset.size;
                        totalPrice += cart[productId].price * cart[productId].sizes[size];
                    }
                });
                checkoutCartTotal.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            });
        });
    }

    // Display the checkout cart items on page load
    displayCheckoutCartItems();

    // Handle form submission
    paymentForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent default form submission
        window.location.href = 'thankyou.html'; // Redirect to thank you page
    });
});

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const crypto = require('crypto'); // Import crypto module
const helmet = require('helmet'); // Import helmet for security headers
const rateLimit = require('express-rate-limit'); // Import rate limiting
const User = require('./models/User');
const Product = require('./models/Product'); // Import the Product model
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(helmet()); // Apply helmet middleware for securing HTTP headers
app.use(bodyParser.json({ limit: '10kb' })); // Limit request body size to 10kb
app.use(bodyParser.urlencoded({ limit: '10kb', extended: true }));
app.use(cookieParser());

// Apply rate limiting to all requests
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: "Too many requests from this IP, please try again after 15 minutes"
});
app.use(limiter);

app.use(session({
  secret: sessionSecret, // Use the generated secret key
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false } // Set 'secure: true' if using HTTPS
}));

function isAdmin(req, res, next) {
    if (req.session.user && req.session.user.isAdmin) {
      return next();
    }
    res.status(403).json({ message: 'Access denied' });
}

app.get('/admin.html', isAdmin, (req, res) => {
  res.sendFile(__dirname + '/public/admin.html'); // Serve the admin page if user is admin
});

// Redirect to login if not logged in
app.get('/', (req, res) => {
    res.redirect('/index.html'); // Redirect to shoes page if logged in
});

app.get('/login', (req, res) => {
  res.sendFile(__dirname + '/public/login.html');
});

// Route to the shoes page (only accessible if logged in)
app.get('/index.html', (req, res) => {
    res.sendFile(__dirname + '/public/index.html'); // Serve index.html if logged in
});

app.get('/checkout.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/checkout.html'); // Serve index.html if logged in
  } else {
    res.redirect('/login'); // Redirect to login if not logged in
  }
});

app.get('/profile.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/profile.html'); // Serve index.html if logged in
  } else {
    res.redirect('/login'); // Redirect to login if not logged in
  }
});

app.get('/review.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/review.html'); // Serve index.html if logged in
  } else {
    res.redirect('/login'); // Redirect to login if not logged in
  }
});

app.get('/get-session-data', (req, res) => {
  if (req.session.user) {
      res.status(200).json(req.session.user);
  } else {
      res.status(400).json({ message: 'No session data found' });
  }
});

app.get('/cart.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/cart.html'); // Serve index.html if logged in
  } else {
    res.redirect('/login'); // Redirect to login if not logged in
  }
});

// Serve static files
app.use(express.static('public'));

// API Endpoints for Products

// Get all products with optional filters
app.get('/api/products', async (req, res) => {
  try {
    const { search, maxPrice, category, brand, size } = req.query;

    // Build the query object
    const query = {};

    if (search) {
      const regex = new RegExp(search, 'i');
      query.$or = [
        { brand: regex },
        { model: regex },
        { description: regex }
      ];
    }

    if (maxPrice) {
      query.price = { $lte: parseFloat(maxPrice) };
    }

    if (category) {
      query.categories = category;
    }

    if (brand) {
      query.brand = brand;
    }

    if (size) {
      query.sizes = size;
    }

    const products = await Product.find(query);
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Failed to fetch products' });
  }
});

// Get a specific product by ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ message: 'Server error fetching product' });
  }
});

app.put('/api/update-username', async (req, res) => {
  const { oldUsername, newUsername } = req.body;

  try {
      const user = await User.findOne({ username: oldUsername });
      if (!user) {
          return res.status(404).json({ message: 'User not found' });
      }

      // Check if the new username is already taken
      const existingUser = await User.findOne({ username: newUsername });
      if (existingUser) {
          return res.status(400).json({ message: 'Username already exists' });
      }

      user.username = newUsername;
      await user.save();

      // Update session with new username
      req.session.user.username = newUsername;

      res.status(200).json({ message: 'Username updated successfully' });
  } catch (error) {
      console.error('Error updating username:', error);
      res.status(500).json({ message: 'Server error updating username' });
  }
});

app.put('/api/update-email', async (req, res) => {
  const { username, newEmail } = req.body;

  try {
      const user = await User.findOne({ username });
      if (!user) {
          return res.status(404).json({ message: 'User not found' });
      }

      // Check if the new email is already taken
      const existingUser = await User.findOne({ email: newEmail });
      if (existingUser) {
          return res.status(400).json({ message: 'Email already exists' });
      }

      user.email = newEmail;
      await user.save();

      res.status(200).json({ message: 'Email updated successfully' });
  } catch (error) {
      console.error('Error updating email:', error);
      res.status(500).json({ message: 'Server error updating email' });
  }
});

app.get('/api/user-profile', async (req, res) => {
  const { username } = req.query;

  try {
      const user = await User.findOne({ username });
      if (!user) {
          return res.status(404).json({ message: 'User not found' });
      }

      res.status(200).json({
          username: user.username,
          email: user.email,
          address: user.address,
          phoneNumber: user.phoneNumber
      });
  } catch (error) {
      console.error('Error fetching user profile:', error);
      res.status(500).json({ message: 'Server error fetching user profile' });
  }
});

app.put('/api/update-profile', async (req, res) => {
    const { username, address, phoneNumber } = req.body;

    try {
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        user.address = address;
        user.phoneNumber = phoneNumber;
        await user.save();

        res.status(200).json({ message: 'Profile updated successfully' });
    } catch (error) {
        console.error('Error updating profile:', error);
        res.status(500).json({ message: 'Server error updating profile' });
    }
});

// Add a product to the cart and store it in a cookie
app.post('/cart/add', (req, res) => {
  const { productId, size, price, image, brand, model } = req.body;
  let cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};

  if (!cart[productId]) {
    cart[productId] = { sizes: {}, price, image, brand, model };
  }

  if (!cart[productId].sizes[size]) {
    cart[productId].sizes[size] = 0;
  }

  cart[productId].sizes[size] += 1;

  res.cookie('cart', JSON.stringify(cart), { httpOnly: true });
  console.log('Cart stored in cookie:', cart); // Log cart content
  res.status(200).json({ message: 'Product added to cart', cart });
});

app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
      const user = await User.findOne({ username });

      if (!user) {
          return res.status(400).json({ message: 'Invalid username or password' });
      }

      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch) {
          return res.status(400).json({ message: 'Invalid username or password' });
      }

      // Include email in session
      req.session.user = {
          id: user._id,
          username: user.username,
          email: user.email,  // Add email to the session
          isAdmin: user.isAdmin
      };

      if (user.isAdmin) {
          res.redirect('/admin.html');
      } else {
          res.redirect('/index.html');
      }
  } catch (error) {
      console.error('Error during login:', error);
      res.status(500).json({ message: 'Server error during login' });
  }
});

// Fetch cart data for display on the checkout page
app.get('/cart', (req, res) => {
  const cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};
  res.status(200).json(cart);
});

// User registration
app.post('/register', async (req, res) => {
    const { username, password, email } = req.body;
  
    try {
      // Check if the user already exists
      const existingUser = await User.findOne({ username });
      if (existingUser) {
        return res.status(400).json({ message: 'Username already exists' });
      }
  
      // Hash the password before saving
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);
  
      // Create a new user
      const newUser = new User({
        username,
        password: hashedPassword,
        email
      });
  
      // Save the user to the database
      await newUser.save();
  
      res.status(200).json({ message: 'Registration successful' });
    } catch (error) {
      console.error('Error during registration:', error);
      res.status(500).json({ message: 'Server error during registration' });
    }
  });

// Add a new product
app.post('/api/products', async (req, res) => {
    try {
      const newProduct = new Product(req.body);
      await newProduct.save();
      res.status(201).json(newProduct);
    } catch (error) {
      console.error('Error adding product:', error);
      res.status(500).json({ message: 'Failed to add product' });
    }
  });

// Update a product
app.put('/api/products/:id', async (req, res) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Failed to update product' });
  }
});

// Delete a product
app.delete('/api/products/:id', async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.status(204).end();
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ message: 'Failed to delete product' });
  }
});

// Get a list of brands with product counts
app.get('/api/brands', async (req, res) => {
  try {
    const brands = await Product.aggregate([
      { $group: { _id: '$brand', count: { $sum: 1 } } }
    ]);

    const brandCounts = brands.reduce((acc, brand) => {
      acc[brand._id] = brand.count;
      return acc;
    }, {});

    res.json(brandCounts);
  } catch (error) {
    console.error('Error fetching brands:', error);
    res.status(500).json({ message: 'Failed to fetch brands' });
  }
});

// Logout route
app.get('/logout', (req, res) => {
  req.session.destroy();
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const crypto = require('crypto');
const rateLimit = require('express-rate-limit'); // Import express-rate-limit
const User = require('./models/User');
const Product = require('./models/Product');
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

app.use(session({
  secret: sessionSecret,
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// Apply rate limiting to all requests
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again after 15 minutes'
});

// Apply the rate limiting middleware to all requests
app.use(limiter);

function isAdmin(req, res, next) {
  if (req.session.user && req.session.user.isAdmin) {
    return next();
  }
  res.status(403).json({ message: 'Access denied' });
}

app.get('/admin.html', isAdmin, (req, res) => {
  res.sendFile(__dirname + '/public/admin.html');
});

app.get('/', (req, res) => {
  res.redirect('/index.html');
});

app.get('/login', (req, res) => {
  res.sendFile(__dirname + '/public/login.html');
});

app.get('/index.html', (req, res) => {
  res.sendFile(__dirname + '/public/index.html');
});

app.get('/checkout.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/checkout.html');
  } else {
    res.redirect('/login');
  }
});

app.get('/profile.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/profile.html');
  } else {
    res.redirect('/login');
  }
});

app.get('/review.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/review.html');
  } else {
    res.redirect('/login');
  }
});

app.get('/get-session-data', (req, res) => {
  if (req.session.user) {
    res.status(200).json(req.session.user);
  } else {
    res.status(400).json({ message: 'No session data found' });
  }
});

app.get('/cart.html', (req, res) => {
  if (req.session.user) {
    res.sendFile(__dirname + '/public/cart.html');
  } else {
    res.redirect('/login');
  }
});

// Serve static files
app.use(express.static('public'));

// API Endpoints for Products

app.get('/api/products', async (req, res) => {
  try {
    const { search, maxPrice, category, brand, size } = req.query;

    const query = {};

    if (search) {
      const regex = new RegExp(search, 'i');
      query.$or = [
        { brand: regex },
        { model: regex },
        { description: regex }
      ];
    }

    if (maxPrice) {
      query.price = { $lte: parseFloat(maxPrice) };
    }

    if (category) {
      query.categories = category;
    }

    if (brand) {
      query.brand = brand;
    }

    if (size) {
      query.sizes = size;
    }

    const products = await Product.find(query);
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Failed to fetch products' });
  }
});

app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ message: 'Server error fetching product' });
  }
});

app.put('/api/update-username', async (req, res) => {
  const { oldUsername, newUsername } = req.body;

  try {
    const user = await User.findOne({ username: oldUsername });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const existingUser = await User.findOne({ username: newUsername });
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    user.username = newUsername;
    await user.save();

    req.session.user.username = newUsername;

    res.status(200).json({ message: 'Username updated successfully' });
  } catch (error) {
    console.error('Error updating username:', error);
    res.status(500).json({ message: 'Server error updating username' });
  }
});

app.put('/api/update-email', async (req, res) => {
  const { username, newEmail } = req.body;

  try {
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const existingUser = await User.findOne({ email: newEmail });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already exists' });
    }

    user.email = newEmail;
    await user.save();

    res.status(200).json({ message: 'Email updated successfully' });
  } catch (error) {
    console.error('Error updating email:', error);
    res.status(500).json({ message: 'Server error updating email' });
  }
});

app.get('/api/user-profile', async (req, res) => {
  const { username } = req.query;

  try {
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({
      username: user.username,
      email: user.email,
      address: user.address,
      phoneNumber: user.phoneNumber
    });
  } catch (error) {
    console.error('Error fetching user profile:', error);
    res.status(500).json({ message: 'Server error fetching user profile' });
  }
});

app.put('/api/update-profile', async (req, res) => {
  const { username, address, phoneNumber } = req.body;

  try {
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    user.address = address;
    user.phoneNumber = phoneNumber;
    await user.save();

    res.status(200).json({ message: 'Profile updated successfully' });
  } catch (error) {
    console.error('Error updating profile:', error);
    res.status(500).json({ message: 'Server error updating profile' });
  }
});

app.post('/cart/add', (req, res) => {
  const { productId, size, price, image, brand, model } = req.body;
  let cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};

  if (!cart[productId]) {
    cart[productId] = { sizes: {}, price, image, brand, model };
  }

  if (!cart[productId].sizes[size]) {
    cart[productId].sizes[size] = 0;
  }

  cart[productId].sizes[size] += 1;

  res.cookie('cart', JSON.stringify(cart), { httpOnly: true });
  console.log('Cart stored in cookie:', cart);
  res.status(200).json({ message: 'Product added to cart', cart });
});

app.post('/login', loginLimiter, async (req, res) => { // Apply rate limiting to login route
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(400).json({ message: 'Invalid username or password' });
    }

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid username or password' });
    }

    req.session.user = {
      id: user._id,
      username: user.username,
      email: user.email,
      isAdmin: user.isAdmin
    };

    if (user.isAdmin) {
      res.redirect('/admin.html');
    } else {
      res.redirect('/index.html');
    }
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ message: 'Server error during login' });
  }
});

app.get('/cart', (req, res) => {
  const cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : {};
  res.status(200).json(cart);
});

app.post('/register', async (req, res) => {
  const { username, password, email } = req.body;

  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User({
      username,
      password: hashedPassword,
      email
    });

    await newUser.save();

    res.status(200).json({ message: 'Registration successful' });
  } catch (error) {
    console.error('Error during registration:', error);
    res.status(500).json({ message: 'Server error during registration' });
  }
});

app.post('/api/products', async (req, res) => {
  try {
    const newProduct = new Product(req.body);
    await newProduct.save();
    res.status(201).json(newProduct);
  } catch (error) {
    console.error('Error adding product:', error);
    res.status(500).json({ message: 'Failed to add product' });
  }
});

app.put('/api/products/:id', async (req, res) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(updatedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Failed to update product' });
  }
});

app.delete('/api/products/:id', async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.status(204).end();
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ message: 'Failed to delete product' });
  }
});

app.get('/api/brands', async (req, res) => {
  try {
    const brands = await Product.aggregate([
      { $group: { _id: '$brand', count: { $sum: 1 } } }
    ]);

    const brandCounts = brands.reduce((acc, brand) => {
      acc[brand._id] = brand.count;
      return acc;
    }, {});

    res.json(brandCounts);
  } catch (error) {
    console.error('Error fetching brands:', error);
    res.status(500).json({ message: 'Failed to fetch brands' });
  }
});

app.get('/logout', (req, res) => {
  req.session.destroy();
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginError = document.getElementById('login-error');
    const registerError = document.getElementById('register-error');

    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.redirected) {
                // Fetch the session data from the server
                const sessionResponse = await fetch('/get-session-data');
                const session = await sessionResponse.json();

                // Determine the expiration time based on "Remember Me"
                const rememberMe = data.rememberMe; // Get the checkbox value
                const cookieExpirationDays = rememberMe ? 10 : (1 / 48); // 10 days or 30 minutes

                // Ensure that username and email are properly set
                if (session.username) {
                    setCookie('username', session.username, cookieExpirationDays);
                } else {
                    console.warn('Username is missing.');
                }

                if (session.email) {
                    setCookie('email', session.email, cookieExpirationDays);
                } else {
                    console.warn('Email is missing.');
                }

                // Redirect to the new page
                window.location.href = response.url;
            } else {
                const result = await response.json();
                loginError.textContent = result.message || 'Login failed. Please try again.';
            }
        } catch (error) {
            loginError.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
        }
    });

    registerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(registerForm);
        const data = Object.fromEntries(formData.entries());

        if (data.password !== data.repeatPassword) {
            registerError.textContent = 'Passwords do not match.';
            return;
        }

        try {
            const response = await fetch('/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
                alert('Registration successful. Good luck!');
            } else {
                registerError.textContent = result.message || 'Registration failed. Please try again.';
            }
        } catch (error) {
            registerError.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
        }
    });

    // Helper function to set a cookie
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
});
loginForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const formData = new FormData(loginForm);
    const data = Object.fromEntries(formData.entries());

    // Log the checkbox value for debugging
    console.log("Remember Me checkbox value:", data.rememberMe);

    const rememberMe = data.rememberMe === 'on'; // Check if the checkbox was checked
    const cookieExpirationDays = rememberMe ? 10 : (1 / 48); // 10 days or 30 minutes

    console.log("Setting cookie expiration to", cookieExpirationDays, "days");

    // Assuming session.username and session.email are already fetched
    if (session.username) {
        setCookie('username', session.username, cookieExpirationDays);
    }

    if (session.email) {
        setCookie('email', session.email, cookieExpirationDays);
    }

    // Redirect to the next page
    window.location.href = response.url;
});
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginError = document.getElementById('login-error');
    const registerError = document.getElementById('register-error');

    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.redirected) {
                // Fetch the session data from the server
                const sessionResponse = await fetch('/get-session-data');
                const session = await sessionResponse.json();

                // Determine the expiration time based on "Remember Me"
                const rememberMe = data.rememberMe === 'on'; // Check if the checkbox was checked
                const cookieExpirationDays = rememberMe ? 10 : (1 / 48); // 10 days or 30 minutes

                // Ensure that username and email are properly set
                if (session.username) {
                    setCookie('username', session.username, cookieExpirationDays);
                } else {
                    console.warn('Username is missing.');
                }

                if (session.email) {
                    setCookie('email', session.email, cookieExpirationDays);
                } else {
                    console.warn('Email is missing.');
                }

                // Redirect to the new page
                window.location.href = response.url;
            } else {
                const result = await response.json();
                loginError.textContent = result.message || 'Login failed. Please try again.';
            }
        } catch (error) {
            loginError.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
        }
    });

    registerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(registerForm);
        const data = Object.fromEntries(formData.entries());

        if (data.password !== data.repeatPassword) {
            registerError.textContent = 'Passwords do not match.';
            return;
        }

        try {
            const response = await fetch('/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
                alert('Registration successful. Good luck!');
            } else {
                registerError.textContent = result.message || 'Registration failed. Please try again.';
            }
        } catch (error) {
            registerError.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
        }
    });

    // Helper function to set a cookie
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="/auth.css">
    <link rel="stylesheet" href="/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body class="auth-body">
    <div class="auth-container">
        <div class="auth-form">
            <h2 class="auth-title">Sign In</h2>
            <form id="login-form" action="/signin" method="POST">
                <div class="mb-3">
                    <label for="signin-name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="signin-name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="signin-password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="signin-password" name="password" required>
                </div>
                <div class="form-group">
                    <input type="checkbox" name="rememberMe" value="true"> Remember Me
                </div>
                <button type="submit" class="btn btn-primary btn-block">Sign In</button>
                <p class="mt-3">Don't have an account? <a href="/signup">Sign up here</a></p>
            </form>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    
    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        // Log the checkbox value to ensure it is being captured
        console.log("Remember Me checkbox value:", data.rememberMe);

        try {
            const response = await fetch('/signin', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.redirected) {
                // Fetch the session data from the server
                const sessionResponse = await fetch('/get-session-data');
                const session = await sessionResponse.json();

                // Determine the expiration time based on "Remember Me"
                const rememberMe = data.rememberMe === 'true'; // Check if the checkbox was checked
                const cookieExpirationDays = rememberMe ? 10 : (1 / 48); // 10 days or 30 minutes

                console.log("Remember Me is checked:", rememberMe);
                console.log("Cookie Expiration Days:", cookieExpirationDays);

                // Ensure that username and email are properly set
                if (session.username) {
                    setCookie('username', session.username, cookieExpirationDays);
                    console.log("Cookie 'username' set with expiration:", cookieExpirationDays);
                } else {
                    console.warn('Username is missing.');
                }

                if (session.email) {
                    setCookie('email', session.email, cookieExpirationDays);
                    console.log("Cookie 'email' set with expiration:", cookieExpirationDays);
                } else {
                    console.warn('Email is missing.');
                }

                // Redirect to the new page
                window.location.href = response.url;
            } else {
                const result = await response.json();
                console.error(result.message || 'Login failed. Please try again.');
            }
        } catch (error) {
            console.error('Login error:', error);
        }
    });

    // Helper function to set a cookie
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="/auth.css">
    <link rel="stylesheet" href="/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body class="auth-body">
    <div class="auth-container">
        <div class="auth-form">
            <h2 class="auth-title">Sign In</h2>
            <form id="login-form">
                <div class="mb-3">
                    <label for="signin-name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="signin-name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="signin-password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="signin-password" name="password" required>
                </div>
                <div class="form-group">
                    <input type="checkbox" id="rememberMe" name="rememberMe" value="true"> Remember Me
                </div>
                <button type="submit" class="btn btn-primary btn-block">Sign In</button>
                <p class="mt-3">Don't have an account? <a href="/signup">Sign up here</a></p>
            </form>
        </div>
    </div>
    <script src="/js/script.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Authentication</title> 
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="login-wrap">
        <div class="login-html">
            <input id="tab-1" type="radio" name="tab" class="sign-in" checked>
            <label for="tab-1" class="tab">Sign In</label>
            <input id="tab-2" type="radio" name="tab" class="sign-up">
            <label for="tab-2" class="tab">Sign Up</label>
            <div class="login-form">
                <!-- Sign In Form -->
                <form id="login-form" class="sign-in-htm">
                    <div class="group">
                        <label for="user-login" class="label">Username</label>
                        <input id="user-login" name="username" type="text" class="input" required>
                    </div>
                    <div class="group">
                        <label for="pass-login" class="label">Password</label>
                        <input id="pass-login" name="password" type="password" class="input" required>
                    </div>
                    <div class="group">
                        <input id="check" name="rememberMe" type="checkbox" class="check" checked>
                        <label for="check"><span class="icon"></span> Remember me</label>
                    </div>
                    
                    <div class="group">
                        <input type="submit" class="button" value="Sign In">
                    </div>
                    <div id="login-error" class="error"></div>
                    <div class="hr"></div>
                    <div class="foot-lnk">
                        <a href="#forgot">Forgot Password?</a>
                    </div>
                </form>
                <!-- Sign Up Form -->
                <form id="register-form" class="sign-up-htm">
                    <div class="group">
                        <label for="user-register" class="label">Username</label>
                        <input id="user-register" name="username" type="text" class="input" required>
                    </div>
                    <div class="group">
                        <label for="pass-register" class="label">Password</label>
                        <input id="pass-register" name="password" type="password" class="input" required>
                    </div>
                    <div class="group">
                        <label for="repeat-pass-register" class="label">Repeat Password</label>
                        <input id="repeat-pass-register" name="repeatPassword" type="password" class="input" required>
                    </div>
                    <div class="group">
                        <label for="email-register" class="label">Email Address</label>
                        <input id="email-register" name="email" type="email" class="input" required>
                    </div>
                    <div class="group">
                        <input type="submit" class="button" value="Sign Up">
                    </div>
                    <div id="register-error" class="error"></div>
                    <div class="hr"></div>
                    <div class="foot-lnk">
                        <label for="tab-1">Already a Member?</label>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script src="/js/script.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginError = document.getElementById('login-error');
    const registerError = document.getElementById('register-error');

    loginError.textContent = '';
    registerError.textContent = '';

    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.redirected) {
                const sessionResponse = await fetch('/get-session-data');
                const session = await sessionResponse.json();

                // Retrieve "Remember Me" checkbox status, assuming 'rememberMe' is the name attribute in the form
                const rememberMe = formData.get('rememberMe') === 'on';

                // Adjust expiration for "Remember Me": 10 days in milliseconds or 30 minutes in milliseconds
                const cookieExpirationTime = rememberMe ? 10 * 24 * 60 * 60 * 1000 : 30 * 60 * 1000;

                if (session.username) {
                    setCookie('username', session.username, cookieExpirationTime);
                }
                if (session.email) {
                    setCookie('email', session.email, cookieExpirationTime);
                }
                if (session.cart) {
                    setCookie('cart', JSON.stringify(session.cart), cookieExpirationTime);
                    cart = loadCartFromCookies(); // Assume this function loads the cart from cookies
                    updateCart(cart); // Assume this function updates UI with cart data
                }
                
                window.location.href = response.url;
            } else {
                const result = await response.json();
                loginError.textContent = result.message || 'Login failed. Please try again.';
            }
        } catch (error) {
            loginError.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
        }
    });

    registerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(registerForm);
        const data = Object.fromEntries(formData.entries());

        if (data.password !== data.repeatPassword) {
            registerError.textContent = 'Passwords do not match.';
            return;
        }

        try {
            const response = await fetch('/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
                alert('Registration successful. Please log in.');
            } else {
                registerError.textContent = result.message || 'Registration failed. Please try again.';
            }
        } catch (error) {
            registerError.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
        }
    });

    function setCookie(name, value, milliseconds) {
        const date = new Date();
        date.setTime(date.getTime() + milliseconds);
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
});
const { getUserById } = require('./userModel'); // Adjust path as necessary

const autoLoginMiddleware = (req, res, next) => {
    if (req.cookies.userId && !req.session.user) {
        getUserById(req.cookies.userId)
            .then(user => {
                if (user) {
                    req.session.user = user; // Log in the user automatically
                    next();
                } else {
                    res.clearCookie('userId'); // Clear the cookie if user not found
                    next();
                }
            })
            .catch(err => {
                console.error('Error during auto-login:', err);
                next();
            });
    } else {
        next(); // Proceed if no userId cookie or user already set in session
    }
};

module.exports = autoLoginMiddleware;
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const crypto = require('crypto'); // Import crypto module
const User = require('./models/User');
const Product = require('./models/Product'); // Import the Product model
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

app.use(session({
  secret: sessionSecret, // Use the generated secret key
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false } // Set 'secure: true' if using HTTPS
}));

// Auto-login Middleware
app.use(async (req, res, next) => {
    if (req.cookies.userId && !req.session.user) {
        try {
            const user = await User.findById(req.cookies.userId).exec();
            if (user) {
                req.session.user = user; // Set the user in the session
                next();
            } else {
                res.clearCookie('userId'); // Clear the cookie if user not found
                next();
            }
        } catch (error) {
            console.error('Auto-login error:', error);
            next();
        }
    } else {
        next(); // Proceed if no userId cookie or user already set in session
    }
});

// Add the remaining code for your server setup and routes here...
// For example:
app.get('/admin.html', (req, res) => {
  if (req.session.user && req.session.user.isAdmin) {
    res.sendFile(__dirname + '/public/admin.html'); // Serve the admin page if user is admin
  } else {
    res.status(403).json({ message: 'Access denied' });
  }
});

// You can place the rest of your routes and server logic below this line...

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const cookieParser = require('cookie-parser');
const crypto = require('crypto');
const User = require('./models/User');
const Product = require('./models/Product');
const app = express();
const PORT = process.env.PORT || 3000;

// Generate a random secret key
const sessionSecret = crypto.randomBytes(32).toString('hex');

// Connect to MongoDBs
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

// Configure session with connect-mongo
app.use(session({
    secret: sessionSecret,
    resave: false,
    saveUninitialized: true,
    store: MongoStore.create({
        mongoUrl: 'mongodb://127.0.0.1:27018/authDB'
    }),
    cookie: {
        secure: false, // Set to true in production with HTTPS
        httpOnly: true,
        maxAge: 30 * 24 * 60 * 60 * 1000 // 30 days
    }
}));

// Remaining server setup...
function getCookie(name) {
    const nameEQ = encodeURIComponent(name) + "=";
    const cookies = document.cookie.split(';');
    
    console.log("Checking cookies for:", name); // Debug: Log which cookie is being searched
    
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length); // Handling leading spaces
        if (c.indexOf(nameEQ) === 0) {
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
        }
    }
    console.log("Cookie not found:", name); // Debug: Log if cookie is not found
    return null;
}
function getCookie(name) {
    console.log("Attempting to retrieve cookie:", name);
    const nameEQ = encodeURIComponent(name) + '=';
    const ca = document.cookie.split(';');
    for(let i=0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1);
        if (c.indexOf(nameEQ) === 0) {
            const value = decodeURIComponent(c.substring(nameEQ.length));
            console.log(`Cookie found - ${name}:`, value);
            return value;
        }
    }
    console.log(`Cookie not found: ${name}`);
    return null;
}
const response = await fetch('/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
});

if (!response.ok) {
    const text = await response.text();  // Read response as text first
    console.error('Login failed:', text);
    loginError.textContent = 'Login failed. Please try again.';
    return;
}

// Assuming the response should be JSON
const result = await response.json();
if (result.success) {
    // Proceed with your login logic
} else {
    loginError.textContent = result.message || 'Login failed. Please try again.';
}
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginError = document.getElementById('login-error');
    const registerError = document.getElementById('register-error');

    // Clear previous errors after initializing the variables
    loginError.textContent = '';  // Clear previous login errors
    registerError.textContent = '';  // Clear previous registration errors

    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(loginForm);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const text = await response.text();
                console.error('Login failed:', text);
                loginError.textContent = 'Login failed. Please try again.';
                return;
            }

            const result = await response.json();
            if (result.redirected) {
                const sessionResponse = await fetch('/get-session-data');
                if (!sessionResponse.ok) {
                    throw new Error('Failed to fetch session data.');
                }
                const session = await sessionResponse.json();

                const rememberMe = formData.has('rememberMe');
                const cookieExpirationDays = rememberMe ? 10 : (1 / 48);
                
                if (session.username) {
                    setCookie('username', session.username, cookieExpirationDays);
                } else {
                    console.warn('Username is missing.');
                }
                
                if (session.email) {
                    setCookie('email', session.email, cookieExpirationDays);
                } else {
                    console.warn('Email is missing.');
                }

                if (session.cart) {
                    setCookie('cart', JSON.stringify(session.cart), cookieExpirationDays);
                    cart = loadCartFromCookies();
                    updateCart(cart);
                }

                window.location.href = result.url;
            } else {
                loginError.textContent = result.message || 'Login failed. Please try again.';
            }
        } catch (error) {
            loginError.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
        }
    });

    registerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(registerForm);
        const data = Object.fromEntries(formData.entries());

        if (data.password !== data.repeatPassword) {
            registerError.textContent = 'Passwords do not match.';
            return;
        }

        try {
            const response = await fetch('/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const text = await response.text();
                console.error('Registration failed:', text);
                registerError.textContent = 'Registration failed. Please try again.';
                return;
            }

            const result = await response.json();
            if (result.success) {
                alert('Registration successful. Good luck!');
            } else {
                registerError.textContent = result.message || 'Registration failed. Please try again.';
            }
        } catch (error) {
            registerError.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
        }
    });

    // Helper function to set a cookie
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
});

try {
    const response = await fetch('/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    });

    if (!response.ok) {
        const text = await response.text();  // Getting the full response as text
        console.error('Login failed with response:', text);
        loginError.textContent = 'Login failed. Please try again.';
        return;
    }

    const result = await response.json();
    if (result.redirected) {
        window.location.href = result.url;
    } else {
        loginError.textContent = result.message || 'Login failed. Please try again.';
    }
} catch (error) {
    console.error('Error during login:', error);
    loginError.textContent = 'An error occurred. Please try again.';
}
const User = require('./models/User');  // Adjust the path to your User model

async function isAuthenticated(req, res, next) {
    const { userId, userName } = req.cookies;

    if (!userId || !userName) {
        res.redirect('/login');  // Redirect to login if the cookies are not present
        return;
    }

    try {
        const user = await User.findById(userId);
        if (!user || user.username !== userName) {
            res.clearCookie('userId');
            res.clearCookie('userName');
            res.clearCookie('cart');  // Clear the cart cookie as well
            res.redirect('/login');  // Redirect to login if the user is not found
        } else {
            req.user = user;  // Attach the user object to the request for use in subsequent routes
            next();  // Proceed to the next middleware or route handler
        }
    } catch (err) {
        console.error('Authentication error:', err);
        res.clearCookie('userId');
        res.clearCookie('userName');
        res.clearCookie('cart');
        res.redirect('/login');  // Handle any other errors by redirecting to login
    }
}

module.exports = { isAuthenticated };
// Login route
app.post('/login', async (req, res) => {
  const { username, password, rememberMe } = req.body;

  try {
    const user = await User.findOne({ username }).exec();
    if (!user || !(await bcrypt.compare(password, user.password))) {
      // Direct response when credentials are invalid
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Calculate cookie maxAge based on the "Remember Me" option
    const maxAge = rememberMe ? 10 * 24 * 60 * 60 * 1000 : 30 * 60 * 1000; // 10 days or 30 minutes

    // Set secure cookies with appropriate flags
    res.cookie('userId', user._id.toString(), { maxAge, httpOnly: true, secure: true, sameSite: 'Strict' });
    res.cookie('username', user.username, { maxAge, httpOnly: true, secure: true, sameSite: 'Strict' });

    // Fetch the cart from the database and set it in a cookie
    const userCart = user.cart && user.cart.length > 0 ? await Promise.all(user.cart.map(async item => {
        const product = await Product.findById(item.productId);
        return {
            productId: item.productId.toString(),
            quantity: item.quantity,
            size: item.size,
            price: product.price,
            image: product.image,
            brand: product.brand,
            model: product.model
        };
    })) : [];

    // Secure the cart cookie; note that HTTP-only is false to allow client-side access
    res.cookie('cart', JSON.stringify(userCart), { httpOnly: false, secure: true, sameSite: 'Lax' });

    // Redirect to the appropriate page based on the user's admin status
    res.redirect(user.isAdmin ? '/admin.html' : '/index.html');
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Server error during login' });
  }
});

// Fetch cart data for display on the checkout page
app.get('/cart', (req, res) => {
  const cart = req.cookies.cart ? JSON.parse(req.cookies.cart) : [];
  res.status(200).json(cart);
});
loginForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const formData = new FormData(loginForm);
    const data = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
            redirect: 'follow'  // This allows fetch to follow redirects
        });

        if (response.redirected) {
            window.location.href = response.url; // Redirects manually if fetch was redirected
        } else if (!response.ok) {
            const text = await response.text();
            console.error('Login failed:', text);
            loginError.textContent = 'Login failed. Please try again.';
        } else {
            const result = await response.json();
            loginError.textContent = result.message || 'Login failed. Please try again.';
        }
    } catch (error) {
        loginError.textContent = 'An error occurred. Please try again.';
        console.error('Login error:', error);
    }
});
// Example addToCart function on client-side
async function addToCart(productId, size, quantity) {
    const data = { productId, size, quantity };
    try {
        const response = await fetch('/api/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
            credentials: 'include'  // Ensure cookies are sent with the request
        });

        if (!response.ok) {
            throw new Error('Failed to add to cart');
        }

        const result = await response.json();
        console.log('Added to cart:', result);
        // Update UI or perform further actions
    } catch (error) {
        console.error('Error adding to cart:', error);
        // Handle error (e.g., show error message)
    }
}
function addToCart(productId, selectedSize) {
    const username = getCookie('username'); // Ensures the username is fetched from cookies

    if (!username) {
        console.log("User not logged in, redirecting to login.");
        window.location.href = '/login';
        return;
    }

    console.log(`Username from cookie: ${username}`);
    const productUrl = `/api/products/${productId}`;
    fetch(productUrl)
        .then(response => response.json())
        .then(product => {
            if (!selectedSize) {
                alert('Please select a size.');
                return;
            }

            const cartItem = {
                productId: product._id,
                size: selectedSize,
                quantity: 1,
                image: product.image,
                brand: product.brand,
                model: product.model,
                price: product.price
            };

            // Save the cart to the database
            fetch('/api/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cartItem),
                credentials: 'include' // This ensures that cookies are included in the request
            })
            .then(response => response.json())
            .then(data => {
                if (!response.ok) {
                    throw new Error(`Failed to add to cart: ${data.message}`);
                }
                console.log('Product added to cart in the database successfully!', data);
                cart.push(cartItem); // Update local cart
                saveCartToCookies(cart); // Save updated cart to cookies
                updateCart(cart); // Update UI with the new cart
            })
            .catch(error => {
                console.error('Error adding to cart:', error);
                alert('Failed to add product to cart.');
            });
        })
        .catch(error => {
            console.error('Product fetch error:', error);
            alert('Error: Product not found.');
        });
}
function addToCart(productId, selectedSize) {
    const username = getCookie('username'); // Get the username from the cookie

    if (username) {
        console.log(`Username from cookie: ${username}`);
        const productUrl = `/api/products/${productId}`;
        fetch(productUrl)
            .then(response => response.json())
            .then(product => {
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }

                let cartItem = {
                    productId: product._id,
                    size: selectedSize,
                    quantity: 1,
                    image: product.image,
                    brand: product.brand,
                    model: product.model,
                    price: product.price
                };

                // Check if the product is already in the cart
                let existingItem = cart.find(item => item.productId === productId && item.size === selectedSize);
                if (existingItem) {
                    existingItem.quantity += cartItem.quantity;
                } else {
                    cart.push(cartItem);
                }

                // Save the cart to the database with credentials included
                fetch('/api/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(cartItem),
                    credentials: 'include' // Ensures cookies (and thus the session) are sent
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add to cart in the database');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Product added to cart in the database successfully!');
                        saveCartToCookies(cart); // Save to cookies
                        updateCart(cart); // Update UI
                    } else {
                        console.error('Failed to add to cart in the database:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart in the database:', error.message);
                });
            })
            .catch(error => {
                console.error('Product fetch error:', error);
                alert('Error: Product not found.');
            });
    } else {
        console.log("User not logged in, redirecting to login.");
        // User is not logged in, redirect to the login page
        window.location.href = '/login';
    }
}
app.post('/login', async (req, res) => {
    const { username, password, rememberMe } = req.body;

    try {
        const user = await User.findOne({ username }).exec();
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Set cookies based on the "Remember me" option
        const maxAge = rememberMe ? 10 * 24 * 60 * 60 * 1000 : 30 * 60 * 1000; // 10 days or 30 minutes
        res.cookie('userId', user._id.toString(), { maxAge, httpOnly: true });
        res.cookie('username', user.username, { maxAge, httpOnly: true });

        // Optionally set other cookies like cart
        res.redirect(user.isAdmin ? '/admin.html' : '/index.html');
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ message: 'Server error during login' });
    }
});
async function isAuthenticated(req, res, next) {
    const { userId, username } = req.cookies; // Retrieve cookies

    if (!userId || !username) {
        return res.redirect('/signin');  // Redirect to sign-in if the cookies are not present
    }

    try {
        const user = await User.findById(userId); // Find the user by userId from the cookie

        if (!user || user.username !== username) {
            // If the user is not found or the username doesn't match, clear cookies and redirect to login
            res.clearCookie('userId');
            res.clearCookie('username');
            res.clearCookie('cart');
            return res.redirect('/signin');
        }

        // Attach the user object to the request for use in subsequent routes
        req.user = user;
        next();  // Proceed to the next middleware or route handler
    } catch (err) {
        console.error('Authentication error:', err);
        // On any other error, clear cookies and redirect to login
        res.clearCookie('userId');
        res.clearCookie('username');
        res.clearCookie('cart');
        res.redirect('/signin');
    }
}
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    if (!cartItemsContainer || !cartTotalContainer) {
        console.error('Cart items container or cart total container not found.');
        return;
    }

    // Fetch cart data from cookies
    const cart = loadCartFromCookies();

    // Function to display cart items and total price
    function displayCartItems() {
        cartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;
        let itemCount = 0;

        cart.forEach((item, index) => {
            itemCount += item.quantity;
            totalPrice += item.price * item.quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <input type="checkbox" class="cart-checkbox" data-index="${index}" checked />
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <div class="quantity-control">
                        <button class="decrease-quantity" data-index="${index}">-</button>
                        <span>${item.quantity}</span>
                        <button class="increase-quantity" data-index="${index}">+</button>
                    </div>
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            cartItemsContainer.appendChild(cartItem);
        });

        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;

        attachEventListeners(); // Attach event listeners after elements are rendered
    }

    // Function to attach event listeners
    function attachEventListeners() {
        // Attach event listeners for increase/decrease buttons
        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                increaseQuantity(index);
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                decreaseQuantity(index);
            });
        });

        // Attach event listeners for checkboxes
        document.querySelectorAll('.cart-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateTotalPrice);
        });

        // Attach event listener to "Proceed to Checkout" button
        const proceedToCheckoutButton = document.getElementById('proceedToCheckoutButton');
        if (proceedToCheckoutButton) {
            proceedToCheckoutButton.addEventListener('click', function() {
                saveSelectedItemsToCookie();
            });
        } else {
            console.error('Proceed to Checkout button not found.');
        }
    }

    // Function to increase quantity
    function increaseQuantity(index) {
        cart[index].quantity += 1;
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to decrease quantity
    function decreaseQuantity(index) {
        if (cart[index].quantity > 1) {
            cart[index].quantity -= 1;
        } else {
            cart.splice(index, 1); // Remove the item if quantity is zero
        }
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to update total price based on selected items
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            totalPrice += cart[index].price * cart[index].quantity;
        });
        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Function to save selected items to a cookie for checkout
    function saveSelectedItemsToCookie() {
        const selectedItems = [];
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            selectedItems.push(cart[index]);
        });
        document.cookie = `selectedItems=${encodeURIComponent(JSON.stringify(selectedItems))}; path=/;`;
    }

    // Display the cart items on page load
    displayCartItems();
});

// Function to get cookie by name
function getCookie(name) {
    const encodedName = encodeURIComponent(name) + "=";
    const cookieArray = document.cookie.split(';');
    
    for (let cookie of cookieArray) {
        cookie = cookie.trim();
        if (cookie.indexOf(encodedName) === 0) {
            const cookieValue = cookie.substring(encodedName.length, cookie.length);
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

// Function to load the cart from cookies
function loadCartFromCookies() {
    const cartData = getCookie('cart');
    if (cartData) {
        try {
            return JSON.parse(cartData);
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return [];
}

// Function to save the cart to cookies
function saveCartToCookies(cart) {
    document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/;`;
}
app.post('/login', async (req, res) => {
    const { username, password, rememberMe } = req.body;

    try {
        const user = await User.findOne({ username }).exec();
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const maxAge = rememberMe ? 10 * 24 * 60 * 60 * 1000 : 30 * 60 * 1000; // 10 days or 30 minutes
        res.cookie('userId', user._id.toString(), { maxAge, httpOnly: true });
        res.cookie('username', user.username, { maxAge, httpOnly: true });

        res.redirect(user.isAdmin ? '/admin.html' : '/index.html');
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ message: 'Server error during login' });
    }
});
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    // Only proceed if these elements exist
    if (cartItemsContainer && cartTotalContainer) {
        // Fetch cart data from cookies
        const cart = loadCartFromCookies();

        // Function to display cart items and total price
        function displayCartItems() {
            cartItemsContainer.innerHTML = ''; // Clear previous cart items
            let totalPrice = 0;
            let itemCount = 0;

            cart.forEach((item, index) => {
                itemCount += item.quantity;
                totalPrice += item.price * item.quantity;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <input type="checkbox" class="cart-checkbox" data-index="${index}" checked />
                    <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                    <div>
                        <h4>${item.brand} - ${item.model}</h4>
                        <p>Size: ${item.size}</p>
                        <div class="quantity-control">
                            <button class="decrease-quantity" data-index="${index}">-</button>
                            <span>${item.quantity}</span>
                            <button class="increase-quantity" data-index="${index}">+</button>
                        </div>
                        <p>Price: $${item.price.toFixed(2)}</p>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
            attachEventListeners(); // Attach event listeners after elements are rendered
        }

        displayCartItems(); // Display the cart items on page load
    } else {
        console.log("Cart items container or cart total container not found. Skipping cart rendering.");
    }
});
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('checkoutCartItems');
    const cartTotalContainer = document.getElementById('checkoutCartTotal');

    if (!cartItemsContainer || !cartTotalContainer) {
        console.error('Cart items container or cart total container not found.');
        return;
    }

    // Fetch cart data from cookies
    const cart = loadCartFromCookies();

    // Function to display cart items and total price
    function displayCartItems() {
        cartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;
        let itemCount = 0;

        cart.forEach((item, index) => {
            itemCount += item.quantity;
            totalPrice += item.price * item.quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <input type="checkbox" class="cart-checkbox" data-index="${index}" checked />
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <div class="quantity-control">
                        <button class="decrease-quantity" data-index="${index}">-</button>
                        <span>${item.quantity}</span>
                        <button class="increase-quantity" data-index="${index}">+</button>
                    </div>
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            cartItemsContainer.appendChild(cartItem);
        });

        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
        attachEventListeners(); // Attach event listeners after elements are rendered
    }

    // Function to attach event listeners
    function attachEventListeners() {
        // Attach event listeners for increase/decrease buttons
        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                increaseQuantity(index);
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                decreaseQuantity(index);
            });
        });

        // Attach event listeners for checkboxes
        document.querySelectorAll('.cart-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateTotalPrice);
        });

        // Attach event listener to "Proceed to Checkout" button
        const proceedToCheckoutButton = document.getElementById('proceedToCheckoutButton');
        if (proceedToCheckoutButton) {
            proceedToCheckoutButton.addEventListener('click', function() {
                saveSelectedItemsToCookie();
            });
        } else {
            console.error('Proceed to Checkout button not found.');
        }
    }

    // Function to increase quantity
    function increaseQuantity(index) {
        cart[index].quantity += 1;
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to decrease quantity
    function decreaseQuantity(index) {
        if (cart[index].quantity > 1) {
            cart[index].quantity -= 1;
        } else {
            cart.splice(index, 1); // Remove the item if quantity is zero
        }
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to update total price based on selected items
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            totalPrice += cart[index].price * cart[index].quantity;
        });
        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Function to save selected items to a cookie for checkout
    function saveSelectedItemsToCookie() {
        const selectedItems = [];
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            selectedItems.push(cart[index]);
        });
        document.cookie = `selectedItems=${encodeURIComponent(JSON.stringify(selectedItems))}; path=/;`;
    }

    // Display the cart items on page load
    displayCartItems();
});
document.addEventListener('DOMContentLoaded', () => {
    const checkoutCartItemsContainer = document.getElementById('checkoutCartItems');
    const checkoutCartTotalContainer = document.getElementById('checkoutCartTotal');

    // Load selected items from the cookie
    const selectedItems = JSON.parse(getCookie('selectedItems') || '[]');

    if (selectedItems.length === 0) {
        console.error('No items in the cart.');
        checkoutCartItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
        return;
    }

    let totalPrice = 0;

    selectedItems.forEach(item => {
        if (item) {
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <p>Quantity: ${item.quantity}</p> <!-- Show quantity here -->
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            checkoutCartItemsContainer.appendChild(cartItem);

            totalPrice += item.price * item.quantity;
        } else {
            console.error('Error: One of the cart items is null.');
        }
    });

    checkoutCartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
});

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    if (!cartItemsContainer || !cartTotalContainer) {
        console.error('Cart items container or cart total container not found.');
        return;
    }

    const selectedItemsCookie = getCookie('selectedItems');
    console.log('Selected Items Cookie:', selectedItemsCookie);

    if (!selectedItemsCookie) {
        console.error('No selected items found in the cookie.');
        cartItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
        return;
    }

    const selectedItems = JSON.parse(selectedItemsCookie || '[]');
    const validItems = selectedItems.filter(item => item !== null && item !== undefined);
    console.log('Valid Items:', validItems);

    if (validItems.length === 0) {
        console.error('No valid items in the cart.');
        cartItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
        return;
    }

    let totalPrice = 0;

    validItems.forEach(item => {
        if (!item || !item.price) {
            console.error('Invalid item found:', item);
            return;
        }

        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
            <div>
                <h4>${item.brand} - ${item.model}</h4>
                <p>Size: ${item.size}</p>
                <p>Quantity: ${item.quantity}</p> <!-- Show quantity here -->
                <p>Price: $${item.price.toFixed(2)}</p>
            </div>
        `;
        cartItemsContainer.appendChild(cartItem);

        totalPrice += item.price * item.quantity;
    });

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
});

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    if (!cartItemsContainer || !cartTotalContainer) {
        console.error('Cart items container or cart total container not found.');
        return;
    }

    // Fetch cart data from cookies
    const cart = loadCartFromCookies();

    // Function to display cart items and total price
    function displayCartItems() {
        cartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;
        let itemCount = 0;

        cart.forEach((item, index) => {
            itemCount += item.quantity;
            totalPrice += item.price * item.quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <input type="checkbox" class="cart-checkbox" data-index="${index}" checked />
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <div class="quantity-control">
                        <button class="decrease-quantity" data-index="${index}">-</button>
                        <span>${item.quantity}</span>
                        <button class="increase-quantity" data-index="${index}">+</button>
                    </div>
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            cartItemsContainer.appendChild(cartItem);
        });

        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;

        attachEventListeners(); // Attach event listeners after elements are rendered
    }

    // Function to attach event listeners
    function attachEventListeners() {
        // Attach event listeners for increase/decrease buttons
        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                increaseQuantity(index);
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                decreaseQuantity(index);
            });
        });

        // Attach event listeners for checkboxes
        document.querySelectorAll('.cart-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateTotalPrice);
        });

        // Attach event listener to "Proceed to Checkout" button
        const proceedToCheckoutButton = document.getElementById('proceedToCheckoutButton');
        if (proceedToCheckoutButton) {
            proceedToCheckoutButton.addEventListener('click', function() {
                saveSelectedItemsToCookie();
                window.location.href = 'checkout.html'; // Redirect to checkout page
            });
        } else {
            console.error('Proceed to Checkout button not found.');
        }
    }

    // Function to increase quantity
    function increaseQuantity(index) {
        cart[index].quantity += 1;
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to decrease quantity
    function decreaseQuantity(index) {
        if (cart[index].quantity > 1) {
            cart[index].quantity -= 1;
        } else {
            cart.splice(index, 1); // Remove the item if quantity is zero
        }
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to update total price based on selected items
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            totalPrice += cart[index].price * cart[index].quantity;
        });
        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Function to save selected items to a cookie for checkout
    function saveSelectedItemsToCookie() {
        const selectedItems = [];
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            selectedItems.push(cart[index]);
        });
        document.cookie = `selectedItems=${encodeURIComponent(JSON.stringify(selectedItems))}; path=/;`;
    }

    // Display the cart items on page load
    displayCartItems();
});

// Function to get cookie by name
function getCookie(name) {
    const encodedName = encodeURIComponent(name) + "=";
    const cookieArray = document.cookie.split(';');
    
    for (let cookie of cookieArray) {
        cookie = cookie.trim();
        if (cookie.indexOf(encodedName) === 0) {
            const cookieValue = cookie.substring(encodedName.length, cookie.length);
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

// Function to load the cart from cookies
function loadCartFromCookies() {
    const cartData = getCookie('cart');
    if (cartData) {
        try {
            return JSON.parse(cartData);
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return [];
}

// Function to save the cart to cookies
function saveCartToCookies(cart) {
    document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/;`;
}
app.post('/api/checkout', async (req, res) => {
    try {
        const purchases = req.body.purchases;
        if (!purchases || !Array.isArray(purchases)) {
            return res.status(400).send('Invalid purchases data');
        }

        // Filter out any null or invalid items
        const validPurchases = purchases.filter(item => item && item.productId);

        if (validPurchases.length === 0) {
            return res.status(400).send('No valid items in the cart');
        }

        // Proceed with processing the valid purchases
        const purchaseHistory = validPurchases.map(item => {
            return {
                productId: item.productId,
                size: item.size,
                quantity: item.quantity,
                price: item.price
            };
        });

        // Assume you're storing the purchase history in MongoDB
        const userId = req.cookies.userId;
        await PurchaseHistory.create({ userId, purchases: purchaseHistory });

        res.send('Checkout successful');
    } catch (error) {
        console.error('Error processing checkout:', error);
        res.status(500).send('Error processing checkout');
    }
});
paymentForm.addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    // Fetch selected items from cookies
    const selectedItems = JSON.parse(getCookie('selectedItems') || '[]');

    // Filter out any null items
    const validItems = selectedItems.filter(item => item && item.productId);

    if (validItems.length === 0) {
        console.error('No valid items to checkout');
        return;
    }

    try {
        // Send the valid items to the server to save them as purchase history
        const response = await fetch('/api/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ purchases: validItems })
        });

        if (response.ok) {
            // Clear the cart cookie after successful checkout
            document.cookie = 'cart=; Max-Age=0; path=/;';
            document.cookie = 'selectedItems=; Max-Age=0; path=/;';
            window.location.href = 'thankyou.html'; // Redirect to thank you page
        } else {
            console.error('Checkout failed:', await response.text());
        }
    } catch (error) {
        console.error('Error during checkout:', error);
    }
});
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    // Fetch cart data from cookies
    const cart = loadCartFromCookies();

    // Function to display cart items and total price
    function displayCartItems() {
        cartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;
        let itemCount = 0;

        cart.forEach((item, index) => {
            itemCount += item.quantity;
            totalPrice += item.price * item.quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <input type="checkbox" class="cart-checkbox" data-index="${index}" checked />
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <div class="quantity-control">
                        <button class="decrease-quantity" data-index="${index}">-</button>
                        <span>${item.quantity}</span>
                        <button class="increase-quantity" data-index="${index}">+</button>
                    </div>
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            cartItemsContainer.appendChild(cartItem);
        });

        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;

        // Attach event listeners for increase/decrease buttons
        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                increaseQuantity(index);
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function() {
                const index = this.getAttribute('data-index');
                decreaseQuantity(index);
            });
        });

        // Attach event listeners for checkboxes
        document.querySelectorAll('.cart-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateTotalPrice);
        });

        // Attach event listener to "Proceed to Checkout" button
        const proceedToCheckoutButton = document.getElementById('proceedToCheckoutButton');
        proceedToCheckoutButton.addEventListener('click', function() {
            saveSelectedItemsToCookie();
            window.location.href = 'checkout.html'; // Redirect to checkout page after saving selected items
        });
    }

    // Function to increase quantity
    function increaseQuantity(index) {
        cart[index].quantity += 1;
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to decrease quantity
    function decreaseQuantity(index) {
        if (cart[index].quantity > 1) {
            cart[index].quantity -= 1;
            saveCartToCookies(cart);
        } else {
            cart.splice(index, 1); // Remove the item if quantity is zero
            saveCartToCookies(cart);
        }
        displayCartItems();
    }

    // Function to update total price based on selected items
    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            totalPrice += cart[index].price * cart[index].quantity;
        });
        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Function to save selected items to a cookie for checkout
    function saveSelectedItemsToCookie() {
        const selectedItems = [];
        document.querySelectorAll('.cart-checkbox:checked').forEach(checkbox => {
            const index = checkbox.getAttribute('data-index');
            selectedItems.push(cart[index]);
        });
        document.cookie = `selectedItems=${encodeURIComponent(JSON.stringify(selectedItems))}; path=/;`;
    }

    // Display the cart items on page load
    displayCartItems();
});

// Function to get cookie by name
function getCookie(name) {
    const encodedName = encodeURIComponent(name) + "=";
    const cookieArray = document.cookie.split(';');
    
    for (let cookie of cookieArray) {
        cookie = cookie.trim();
        if (cookie.indexOf(encodedName) === 0) {
            const cookieValue = cookie.substring(encodedName.length, cookie.length);
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

// Function to load the cart from cookies
function loadCartFromCookies() {
    const cartData = getCookie('cart');
    if (cartData) {
        try {
            return JSON.parse(cartData);
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return [];
}

// Function to save the cart to cookies
function saveCartToCookies(cart) {
    document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/;`;
}
purchaseHistory.forEach(purchase => {

    const purchaseItem = document.createElement('div');
    purchaseItem.className = 'purchase-item';
    purchaseItem.innerHTML = `
        <img src="${purchase.image}" alt="${purchase.name}">
        <div class="order-info">
            <h3>${purchase.name}</h3>
            <p>Order Number: ${purchase._id}</p>
            <p>Date: ${new Date(purchase.purchaseDate).toLocaleDateString()}</p>
            <p>Price: $${purchase.price}</p>
            <p>Quantity: ${purchase.quantity}</p>
        </div>
        <button class="leave-review-button" onclick="window.location.href='review.html?imageUrl=${encodeURIComponent(purchase.image)}'">Leave a Review</button>
    `;
    purchaseHistoryContainer.appendChild(purchaseItem);
});
document.addEventListener('DOMContentLoaded', () => {
    const purchaseHistoryContainer = document.getElementById('purchaseHistory');

    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to set cookie
    function setCookie(name, value, days) {
        const d = new Date();
        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "expires=" + d.toUTCString();
        document.cookie = `${name}=${value};${expires};path=/`;
    }

    // Get the purchaseHistory cookie
    const purchaseHistoryCookie = getCookie('purchaseHistory');
    if (purchaseHistoryCookie) {
        // Decode the URL-encoded cookie value
        const decodedCookieValue = decodeURIComponent(purchaseHistoryCookie);

        try {
            const purchaseHistory = JSON.parse(decodedCookieValue);

            // Display the purchase history on the page
            purchaseHistory.forEach(purchase => {
                const purchaseItem = document.createElement('div');
                purchaseItem.className = 'purchase-item';
                purchaseItem.innerHTML = `
                    <img src="${purchase.image}" alt="${purchase.name}">
                    <div class="order-info">
                        <h3>${purchase.name}</h3>
                        <p>Order Number: ${purchase._id}</p>
                        <p>Date: ${new Date(purchase.purchaseDate).toLocaleDateString()}</p>
                        <p>Price: $${purchase.price}</p>
                        <p>Quantity: ${purchase.quantity}</p>
                    </div>
                    <button class="leave-review-button" onclick="window.location.href='review.html?imageUrl=${encodeURIComponent(purchase.image)}'">Leave a Review</button>
                `;
                purchaseHistoryContainer.appendChild(purchaseItem);
            });
        } catch (error) {
            console.error('Error parsing purchase history:', error);
        }
    } else {
        purchaseHistoryContainer.innerHTML = '<p>No purchase history found.</p>';
    }
});
document.addEventListener('DOMContentLoaded', () => {
    const purchaseHistoryContainer = document.getElementById('purchaseHistory');

    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to set cookie
    function setCookie(name, value, days) {
        const d = new Date();
        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "expires=" + d.toUTCString();
        document.cookie = `${name}=${value};${expires};path=/`;
    }

    // Get the purchaseHistory cookie
    const purchaseHistoryCookie = getCookie('purchaseHistory');
    if (purchaseHistoryCookie) {
        // Decode the URL-encoded cookie value
        const decodedCookieValue = decodeURIComponent(purchaseHistoryCookie);
        
        try {
            const purchaseHistory = JSON.parse(decodedCookieValue);

            // Display the purchase history on the page
            purchaseHistory.forEach(purchase => {
                const purchaseItem = document.createElement('div');
                purchaseItem.className = 'purchase-item';
                purchaseItem.innerHTML = `
                    <img src="${purchase.image}" alt="${purchase.name}">
                    <div class="order-info">
                        <h3>${purchase.name}</h3>
                        <p>Order Number: ${purchase._id}</p>
                        <p>Date: ${new Date(purchase.purchaseDate).toLocaleDateString()}</p>
                        <p>Price: $${purchase.price}</p>
                        <p>Quantity: ${purchase.quantity}</p>
                    </div>
                    <button class="leave-review-button" onclick="leaveReview('${purchase.image}', '${purchase.name}')">Leave a Review</button>
                `;
                purchaseHistoryContainer.appendChild(purchaseItem);
            });
        } catch (error) {
            console.error('Error parsing purchase history:', error);
        }
    } else {
        purchaseHistoryContainer.innerHTML = '<p>No purchase history found.</p>';
    }

    // Function called on button click to set cookies and redirect
    window.leaveReview = function(imageUrl, productName) {
        setCookie('productImage', imageUrl, 1); // Set cookie for the image URL
        setCookie('productTitle', productName, 1); // Set cookie for the product title
        window.location.href = 'review.html'; // Redirect to the review page
    }
});
document.addEventListener('DOMContentLoaded', () => {
    // Function to get the URL parameter by name
    function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    // Retrieve the image URL from the URL parameters
    const imageUrl = getParameterByName('imageUrl');
    
    // Set the image src to the retrieved URL
    const productImageElement = document.getElementById('productImage');
    if (productImageElement && imageUrl) {
        productImageElement.src = imageUrl;
    } else {
        console.error('Image URL not found or productImage element missing');
    }

    // The rest of your existing code...
});
document.addEventListener('DOMContentLoaded', () => {
    // Function to get the URL parameter by name
    function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    const imageUrl = getParameterByName('imageUrl');
    const productImageElement = document.getElementById('productImage');
    if (productImageElement && imageUrl) {
        productImageElement.src = imageUrl;
    }

    // Existing functionality to handle product title and review submission
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    const productTitle = getCookie('productTitle');
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', (event) => {
            const starContainer = event.currentTarget.parentElement;
            const ratingValue = event.currentTarget.dataset.value;
            starContainer.dataset.value = ratingValue;
            Array.from(starContainer.children).forEach(star => {
                star.classList.remove('selected');
                if (star.dataset.value <= ratingValue) {
                    star.classList.add('selected');
                }
            });
        });
    });

    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault();
        const submitButton = event.target;
        submitButton.disabled = true;

        const review = {
            title: productTitle || 'General Review',
            comfort: parseInt(document.getElementById('comfort').dataset.value, 10) || 0,
            style: parseInt(document.getElementById('style').dataset.value, 10) || 0,
            durability: parseInt(document.getElementById('durability').dataset.value, 10) || 0,
            materialQuality: parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0,
            valueForMoney: parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0,
            additionalComments: document.getElementById('additionalComments').value
        };

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle'); // Deleting the productTitle cookie after successful submission
                window.location.href = '/all-reviews.html';
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false;
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    // Function to get the URL parameter by name
    function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    // Retrieve the image URL from the URL parameters and set the image source
    const imageUrl = getParameterByName('imageUrl');
    const productImageElement = document.getElementById('productImage');
    if (productImageElement && imageUrl) {
        productImageElement.src = imageUrl;
    }

    // Function to get and delete cookies
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    // Fetch and display the product title from cookies
    const productTitle = getCookie('productTitle');
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    // Star rating event handling
    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', (event) => {
            const starContainer = event.currentTarget.parentElement;
            const ratingValue = event.currentTarget.dataset.value;
            starContainer.dataset.value = ratingValue;
            Array.from(starContainer.children).forEach(star => {
                star.classList.remove('selected');
                if (star.dataset.value <= ratingValue) {
                    star.classList.add('selected');
                }
            });
        });
    });

    // Form submission for review
    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault();
        const submitButton = event.target;
        submitButton.disabled = true;

        const review = {
            title: productTitle || 'General Review',
            comfort: parseInt(document.getElementById('comfort').dataset.value, 10) || 0,
            style: parseInt(document.getElementById('style').dataset.value, 10) || 0,
            durability: parseInt(document.getElementById('durability').dataset.value, 10) || 0,
            materialQuality: parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0,
            valueForMoney: parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0,
            additionalComments: document.getElementById('additionalComments').value
        };

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle');
                window.location.href = '/all-reviews.html';
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false;
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    // Helper function to retrieve URL parameters by name
    function getParameterByName(name, url = window.location.href) {
        name = name.replace(/[\[\]]/g, '\\$&');
        const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    // Fetch the image URL from URL parameters
    const imageUrl = getParameterByName('imageUrl');
    const productImageElement = document.getElementById('productImage');
    if (productImageElement && imageUrl) {
        productImageElement.src = imageUrl;
    } else {
        console.error('No image URL provided or element not found');
        productImageElement.src = 'default_image_url.png'; // Fallback to a default image if not found
    }

    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to delete a cookie by name
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    const productTitle = getCookie('productTitle');
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', (event) => {
            const starContainer = event.currentTarget.parentElement;
            const ratingValue = event.currentTarget.dataset.value;
            starContainer.dataset.value = ratingValue;
            Array.from(starContainer.children).forEach(star => {
                star.classList.remove('selected');
                if (star.dataset.value <= ratingValue) {
                    star.classList.add('selected');
                }
            });
        });
    });

    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault();
        const submitButton = event.target;
        submitButton.disabled = true;

        const review = {
            title: productTitle || 'General Review',
            comfort: parseInt(document.getElementById('comfort').dataset.value, 10) || 0,
            style: parseInt(document.getElementById('style').dataset.value, 10) || 0,
            durability: parseInt(document.getElementById('durability').dataset.value, 10) || 0,
            materialQuality: parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0,
            valueForMoney: parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0,
            additionalComments: document.getElementById('additionalComments').value
        };

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle');
                window.location.href = '/all-reviews.html';
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false;
        }
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thank You</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }
        #thankyouContainer {
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 {
            font-size: 2.5em;
            color: #5c67f2;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.2em;
            margin-bottom: 40px;
            color: #555;
        }
        .home-button {
            padding: 15px 30px;
            background-color: #5c67f2;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 1em;
            cursor: pointer;
        }
        .home-button:hover {
            background-color: #3c46b5;
        }
    </style>
</head>
<body>

    <div id="thankyouContainer">
        <h1>Thank You for Your Review!</h1>
        <p>We appreciate your thoughts and the time you took to write to us.</p>
        <a href="index.html" class="home-button">Return to Home</a>
    </div>

</body>
</html>
document.getElementById('submitReview').addEventListener('click', async (event) => {
    event.preventDefault(); // Prevent the default form submission
    const submitButton = event.target;
    submitButton.disabled = true; // Disable the button to prevent multiple submissions

    // Assuming you collect your review data here
    const reviewData = {
        // your review data object
    };

    try {
        const response = await fetch('/api/submit-review', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reviewData)
        });

        if (response.ok) {
            // Redirect to the thank you page if the review is successfully submitted
            window.location.href = '/thankyou-review.html'; 
        } else {
            const errorData = await response.json();
            alert('Error submitting review: ' + errorData.message);
            console.error('Error submitting review:', errorData);
        }
    } catch (error) {
        console.error('Error submitting review:', error);
        alert('Error submitting review.');
    } finally {
        submitButton.disabled = false; // Re-enable the button
    }
});
document.addEventListener('DOMContentLoaded', () => {
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    const productTitle = getCookie('productTitle');
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', (event) => {
            const starContainer = event.currentTarget.parentElement;
            const ratingValue = event.currentTarget.dataset.value;
            starContainer.dataset.value = ratingValue;

            Array.from(starContainer.children).forEach(star => {
                star.classList.remove('selected');
                if (star.dataset.value <= ratingValue) {
                    star.classList.add('selected');
                }
            });
        });
    });

    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault();
        const submitButton = event.target;
        submitButton.disabled = true;

        const review = {
            title: productTitle || 'General Review',
            comfort: parseInt(document.getElementById('comfort').dataset.value, 10) || 0,
            style: parseInt(document.getElementById('style').dataset.value, 10) || 0,
            durability: parseInt(document.getElementById('durability').dataset.value, 10) || 0,
            materialQuality: parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0,
            valueForMoney: parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0,
            additionalComments: document.getElementById('additionalComments').value
        };

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle');
                window.location.href = '/thankyou-review.html';
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false;
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to delete a cookie by name
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    const productTitle = getCookie('productTitle');
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    // Function to handle star rating selection
    function handleStarClick(event) {
        const starContainer = event.currentTarget.parentElement;
        const ratingValue = event.currentTarget.dataset.value;
        starContainer.dataset.value = ratingValue;
        
        // Update the selected state of the stars
        Array.from(starContainer.children).forEach(star => {
            star.classList.remove('selected');
            if (star.dataset.value <= ratingValue) {
                star.classList.add('selected');
            }
        });
    }

    // Add event listeners to all rating stars
    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', handleStarClick);
    });

    // Handle the form submission for review
    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault(); // Prevent the default form submission
        const submitButton = event.target;
        submitButton.disabled = true; // Disable the button to prevent multiple submissions

        const title = productTitle || 'General Review';
        const comfort = parseInt(document.getElementById('comfort').dataset.value, 10) || 0;
        const style = parseInt(document.getElementById('style').dataset.value, 10) || 0;
        const durability = parseInt(document.getElementById('durability').dataset.value, 10) || 0;
        const materialQuality = parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0;
        const valueForMoney = parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0;
        const additionalComments = document.getElementById('additionalComments').value;

        const review = {
            title,
            comfort,
            style,
            durability,
            materialQuality,
            valueForMoney,
            additionalComments
        };

        console.log("Submitting Review:", review);

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle'); // Delete the productTitle cookie after successful submission
                window.location.href = '/thankyou-review.html'; // Redirect to the thank you page for reviews
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false; // Re-enable the button in case of error
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    const checkoutCartItemsContainer = document.getElementById('checkoutCartItems');
    const checkoutCartTotalContainer = document.getElementById('checkoutCartTotal');
    const paymentForm = document.getElementById('paymentForm');

    if (!checkoutCartItemsContainer || !checkoutCartTotalContainer) {
        console.error('Checkout cart items container or checkout cart total container not found.');
        return;
    }

    // Fetch selected items from cookies
    const selectedItems = JSON.parse(getCookie('selectedItems') || '[]');

    // Function to display cart items and total price on checkout page
    function displayCheckoutCartItems() {
        checkoutCartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        selectedItems.forEach(item => {
            totalPrice += item.price * item.quantity;

            const checkoutCartItem = document.createElement('div');
            checkoutCartItem.className = 'cart-item';
            checkoutCartItem.innerHTML = `
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <div>
                    <h4>${item.brand} - ${item.model}</h4>
                    <p>Size: ${item.size}</p>
                    <span>x${item.quantity}</span>
                    <p>Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            checkoutCartItemsContainer.appendChild(checkoutCartItem);
        });

        checkoutCartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    }

    // Display the selected cart items on checkout page load
    displayCheckoutCartItems();

    // Handle form submission for payment
    paymentForm.addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission

        try {
            // Send the selected items to the server to save them as purchase history
            const response = await fetch('/api/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ purchases: selectedItems })
            });

            if (response.ok) {
                // Clear the cart cookie after successful checkout
                document.cookie = 'cart=; Max-Age=0; path=/;';
                document.cookie = 'selectedItems=; Max-Age=0; path=/;';
                window.location.href = 'thankyou.html'; // Redirect to thank you page
            } else {
                console.error('Checkout failed:', await response.text());
            }
        } catch (error) {
            console.error('Error during checkout:', error);
        }
    });
});

// Function to get cookie by name
function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="styles.css"> <!-- Link to external CSS -->
    <style>
        /* Ensure the Reviews button looks similar to the icons */
        .header-button {
            color: #333;
            font-size: 18px;
            text-decoration: none;
            margin-left: 10px;
            padding: 5px;
            display: inline-block;
        }

        .header-button:hover {
            color: #5c67f2;
        }

        /* Style for the average rating and reviews link */
        #averageRatingContainer {
            margin-top: 10px;
            font-size: 16px;
            text-align: center;
        }

        #showReviewsLink {
            color: #5c67f2;
            text-decoration: none;
            font-weight: bold;
            display: block;
            margin-top: 5px;
        }

        #showReviewsLink:hover {
            color: #333;
        }
    </style>
</head>
<body>

    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars">
            <a href="profile.html" id="userIcon" class="fas fa-user"></a> <!-- User icon linked directly to profile page -->
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="fas fa-receipt"></a> <!-- Example using a receipt icon -->
            <a href="all-reviews.html" id="Reviews" class="header-button">Reviews</a> <!-- Reviews Button -->
            <a href="#" id="logoutButton" class="fas fa-sign-out-alt"></a> <!-- Logout button -->
        </div>
    </div>

    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>

    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>

    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="cart.html" id="viewCartButton" class="proceed-button">View Cart</a> <!-- Changed to View Cart -->
    </div>

    <script src="/js/cart.js"></script>
    <script src="/js/main.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('logoutButton').addEventListener('click', function (event) {
                event.preventDefault();
                event.stopPropagation();  // Stop the event from propagating to parent elements
                
                fetch('/logout', {
                    method: 'GET',
                })
                .then(response => {
                    if (response.redirected) {
                        // Redirect to the login page after logout
                        window.location.href = response.url;
                    }
                })
                .catch(error => {
                    console.error('Error during logout:', error);
                });
            });

            // Sample product ID for demonstration purposes
            const productId = "product-id"; // Replace with the actual dynamic product ID

            // Fetch reviews for the specific product
            fetch(`/api/reviews/${productId}`)
                .then(response => response.json())
                .then(reviews => {
                    if (reviews.length > 0) {
                        const totalRatings = reviews.reduce((total, review) => {
                            return total + ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5);
                        }, 0);

                        const averageRating = (totalRatings / reviews.length).toFixed(2);
                        document.getElementById('averageRating').textContent = `Average Rating: ${averageRating} ★`;

                        // Set the link to the reviews page, passing the product ID as a query parameter
                        document.getElementById('showReviewsLink').href = `/all-reviews.html?productId=${productId}`;
                    } else {
                        document.getElementById('averageRating').textContent = 'No ratings yet';
                    }
                })
                .catch(error => {
                    console.error('Error fetching reviews:', error);
                    document.getElementById('averageRating').textContent = 'Error loading ratings';
                });
        });
    </script>

</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });

    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);
    updateCart(cart);

    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            fetchProducts();
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            const productId = event.target.dataset.id;
            const size = event.target.dataset.size;
            removeFromCart(productId, size);
        } else if (event.target.matches('.add-to-cart-button')) {
            const productId = event.target.dataset.id;
            const sizeSelector = event.target.closest('.product').querySelector('.size-select');
            if (sizeSelector) {
                addToCart(productId, sizeSelector.value);
            } else {
                console.error('Size selector not found for product', productId);
                alert('Please select a size before adding to cart.');
            }
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    document.getElementById('viewCartButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'cart.html';
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });

    updateCart(cart); // Ensure cart updates with the correct cart

    // Fetch and display the average rating for each product
    fetchProductsAndRatings();
});

function fetchProductsAndRatings() {
    fetch(`http://localhost:3000/api/products`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                // Fetch the average rating for the product
                fetch(`/api/reviews/${product._id}`)
                    .then(response => response.json())
                    .then(reviews => {
                        const totalRatings = reviews.reduce((total, review) => {
                            return total + ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5);
                        }, 0);

                        const averageRating = reviews.length > 0 ? (totalRatings / reviews.length).toFixed(2) : 'No ratings yet';
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <p>Average Rating: ${averageRating} ★</p>
                            <a href="/all-reviews.html?productId=${product._id}" class="show-reviews-link">Show Reviews</a>
                            <select class="size-select" data-id="${product._id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    })
                    .catch(error => {
                        console.error('Error fetching reviews:', error);
                    });
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

// Other existing functions such as addToCart, fetchBrands, etc. remain unchanged.
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });

    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);
    updateCart(cart);

    fetchProductsAndRatings();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            fetchProductsAndRatings();
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            const productId = event.target.dataset.id;
            const size = event.target.dataset.size;
            removeFromCart(productId, size);
        } else if (event.target.matches('.add-to-cart-button')) {
            const productId = event.target.dataset.id;
            const sizeSelector = event.target.closest('.product').querySelector('.size-select');
            if (sizeSelector) {
                addToCart(productId, sizeSelector.value);
            } else {
                console.error('Size selector not found for product', productId);
                alert('Please select a size before adding to cart.');
            }
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProductsAndRatings();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProductsAndRatings();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProductsAndRatings();
    });

    document.getElementById('viewCartButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'cart.html';
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });

    updateCart(cart); // Ensure cart updates with the correct cart
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
let cart = loadCartFromCookies();
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProductsAndRatings() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                // Fetch the average rating for the product
                fetch(`/api/reviews/${product._id}`)
                    .then(response => response.json())
                    .then(reviews => {
                        const totalRatings = reviews.reduce((total, review) => {
                            return total + ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5);
                        }, 0);

                        const averageRating = reviews.length > 0 ? (totalRatings / reviews.length).toFixed(2) : 'No ratings yet';
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <p>Average Rating: ${averageRating} ★</p>
                            <a href="/all-reviews.html?productId=${product._id}" class="show-reviews-link">Show Reviews</a>
                            <select class="size-select" data-id="${product._id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    })
                    .catch(error => {
                        console.error('Error fetching reviews:', error);
                    });
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProductsAndRatings();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                // Fetch the average rating for the product
                fetch(`/api/reviews/${product._id}`)
                    .then(response => response.json())
                    .then(reviews => {
                        const totalRatings = reviews.reduce((total, review) => {
                            return total + ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5);
                        }, 0);

                        const averageRating = reviews.length > 0 ? (totalRatings / reviews.length).toFixed(2) : 'No ratings yet';
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <p>Average Rating: ${averageRating} ★</p>
                            <a href="/all-reviews.html?productId=${product._id}" class="show-reviews-link">Show Reviews</a>
                            <select class="size-select" data-id="${product._id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    })
                    .catch(error => {
                        console.error('Error fetching reviews:', error);
                    });
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                // Fetch the average rating for the product
                fetch(`/api/reviews/${product._id}`)
                    .then(response => response.json())
                    .then(reviews => {
                        const totalRatings = reviews.reduce((total, review) => {
                            return total + ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5);
                        }, 0);

                        const averageRating = reviews.length > 0 ? (totalRatings / reviews.length).toFixed(2) : 'No ratings yet';
                        const productDiv = document.createElement('div');
                        productDiv.className = 'product';
                        productDiv.innerHTML = `
                            <div class="image-container">
                                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                            </div>
                            <h3>${product.brand} - ${product.model}</h3>
                            <p>${product.description}</p>
                            <p>Price: $${product.price}</p>
                            <p>Average Rating: ${averageRating} ★</p>
                            <a href="/all-reviews.html?productId=${product._id}" class="show-reviews-link">Show Reviews</a>
                            <select class="size-select" data-id="${product._id}">
                                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                            </select>
                            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                        `;
                        productContainer.appendChild(productDiv);
                    })
                    .catch(error => {
                        console.error('Error fetching reviews:', error);
                    });
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId, selectedSize) {
    const username = getCookie('username');

    if (username) {
        fetch(`/api/products/${productId}`)
            .then(response => response.json())
            .then(product => {
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }

                // Check if the product was fetched successfully and has a price
                if (!product || !product.price) {
                    console.error('Failed to retrieve product details or price is undefined');
                    alert('Error: Unable to add product to cart.');
                    return;
                }

                let cartItem = {
                    productId: product._id,
                    size: selectedSize,
                    quantity: 1,
                    image: product.image,
                    brand: product.brand,
                    model: product.model,
                    price: product.price
                };

                // Load cart from cookie
                let cart = loadCartFromCookies();

                // Check if the product is already in the cart
                let existingItem = cart.find(item => item.productId === productId && item.size === selectedSize);
                if (existingItem) {
                    existingItem.quantity += cartItem.quantity;
                } else {
                    cart.push(cartItem);
                }

                // Save the updated cart to the database
                fetch('/api/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(cartItem),
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add to cart in the database');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Product added to cart in the database successfully!');

                        // Re-fetch all product data to ensure price is correct (similar to removeFromCart)
                        const fetchProductPromises = data.cart.map(item => {
                            return fetch(`/api/products/${item.productId}`)
                                .then(response => response.json())
                                .then(product => {
                                    item.price = product.price;
                                    item.image = product.image;
                                    item.brand = product.brand;
                                    item.model = product.model;
                                    return item;
                                })
                                .catch(error => {
                                    console.error(`Failed to fetch product data for ${item.productId}:`, error);
                                });
                        });

                        Promise.all(fetchProductPromises).then((updatedCart) => {
                            // Save the updated cart to the cookie
                            saveCartToCookies(updatedCart);

                            // Update the UI to reflect the new cart state
                            updateCart(updatedCart);
                        });

                    } else {
                        console.error('Failed to add to cart in the database:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart in the database:', error.message);
                });
            })
            .catch(error => {
                console.error('Product fetch error:', error);
                alert('Error: Product not found.');
            });
    } else {
        window.location.href = '/login';
    }
}

function saveCartToCookies(cart) {
    try {
        const cartString = JSON.stringify(cart);
        setCookie('cart', cartString, 7); // Assuming cookies are valid for 7 days
    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function loadCartFromCookies() {
    const cartData = getCookie('cart');
    console.log("Raw cart data from cookie:", cartData);
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            console.log("Parsed cart data:", parsedCart);
            return parsedCart; // This should be an array of cart items
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return []; // Return an empty array if no cart data is found or parsing fails
}

function updateCart(cartData = []) {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');
    const cartCount = document.getElementById('cartCount');

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    console.log("Updating cart UI with data:", cartData);

    for (const item of cartData) {
        if (item.quantity) {
            itemCount += item.quantity;
            if (item.price) {
                totalPrice += item.quantity * item.price;
            } else {
                console.warn(`Missing price for item: ${item.productId}, size: ${item.size}`);
            }

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image || ''}" alt="Image of ${item.brand || 'Product'}" />
                <div>
                    <h4>${item.brand || 'Brand'} - ${item.model || 'Model'}</h4>
                    <p>Size: ${item.size}</p>
                    <span>x${item.quantity}</span>
                    <p>Price: $${item.price ? item.price.toFixed(2) : 'Undefined'}</p>
                </div>
                <button class="remove-button" data-id="${item.productId}" data-size="${item.size}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount; // Ensure this updates the icon

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function removeFromCart(productId, size) {
    fetch('/api/cart/remove', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, size }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Product removed from cart in the database successfully!');
            cart = data.cart;

            // Fetch the product data to ensure the price is correct
            const fetchProductPromises = cart.map(item => {
                return fetch(`/api/products/${item.productId}`)
                    .then(response => response.json())
                    .then(product => {
                        item.price = product.price;
                        item.image = product.image;  // Ensure the image is reassigned
                        item.brand = product.brand;  // Ensure the brand is reassigned
                        item.model = product.model;  // Ensure the model is reassigned
                        return item;
                    })
                    .catch(error => {
                        console.error(`Failed to fetch product data for ${item.productId}:`, error);
                    });
            });

            // Once all product data has been fetched and prices updated, update the UI
            Promise.all(fetchProductPromises).then(() => {
                saveCartToCookies(cart); // Save to cookies
                updateCart(cart); // Update UI
            });

        } else {
            console.error('Failed to remove from cart in the database:', data.message);
        }
    })
    .catch(error => {
        console.error('Error during removeFromCart:', error);
    });
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function getCookie(name) {
    const nameEQ = encodeURIComponent(name) + "=";
    const cookies = document.cookie.split(';');
    
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i].trim();
        if (c.indexOf(nameEQ) == 0) {
            const value = c.substring(nameEQ.length);
            return decodeURIComponent(value);
        }
    }
    console.log(`Cookie not found: ${name}`);
    return null;
}

document.addEventListener('DOMContentLoaded', () => {
    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);

    // Fetch detailed product information for each cart item
    const fetchProductPromises = cart.map(item => {
        return fetch(`/api/products/${item.productId}`)
            .then(response => response.json())
            .then(product => {
                item.price = product.price;
                item.image = product.image;
                item.brand = product.brand;
                item.model = product.model;
                return item;
            })
            .catch(error => {
                console.error(`Failed to fetch product data for ${item.productId}:`, error);
            });
    });

    Promise.all(fetchProductPromises).then(updatedCart => {
        // Save the updated cart to cookies and update UI
        saveCartToCookies(updatedCart);
        updateCart(updatedCart);
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="styles.css"> <!-- Link to external CSS -->
</head>
<body>

    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars">
            <a href="profile.html" id="userIcon" class="fas fa-user"></a> <!-- User icon linked directly to profile page -->
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="fas fa-receipt"></a> <!-- Example using a receipt icon -->
            <a href="all-reviews.html" id="Reviews" class="header-button">Reviews</a> <!-- Reviews Button -->
            <a href="#" id="logoutButton" class="fas fa-sign-out-alt"></a> <!-- Logout button -->
        </div>
    </div>

    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>

    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>

    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="cart.html" id="viewCartButton" class="proceed-button">View Cart</a>
    </div>

    <script src="/js/cart.js"></script>
    <script src="/js/main.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('logoutButton').addEventListener('click', function (event) {
                event.preventDefault();
                event.stopPropagation();  // Stop the event from propagating to parent elements
                
                fetch('/logout', {
                    method: 'GET',
                })
                .then(response => {
                    if (response.redirected) {
                        // Redirect to the login page after logout
                        window.location.href = response.url;
                    }
                })
                .catch(error => {
                    console.error('Error during logout:', error);
                });
            });
        });
    </script>

</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('productId');

    let fetchUrl = '/api/reviews';
    if (productId) {
        fetchUrl = `/api/reviews/${productId}`;
    }

    fetch(fetchUrl)
        .then(response => response.json())
        .then(reviews => {
            const reviewsContainer = document.getElementById('reviewsContainer');
            reviews.forEach(review => {
                const overallRating = (review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5;
                const reviewElement = document.createElement('div');
                reviewElement.classList.add('review-item');
                reviewElement.innerHTML = `
                    <h3>${review.title}</h3>
                    <p><strong>Overall Rating:</strong> ${overallRating.toFixed(2)}</p>
                    <p><strong>Comfort:</strong> ${review.comfort}</p>
                    <p><strong>Style:</strong> ${review.style}</p>
                    <p><strong>Durability:</strong> ${review.durability}</p>
                    <p><strong>Material Quality:</strong> ${review.materialQuality}</p>
                    <p><strong>Value for Money:</strong> ${review.valueForMoney}</p>
                    <p><strong>Additional Comments:</strong> ${review.additionalComments || 'No additional comments'}</p>
                `;
                reviewsContainer.appendChild(reviewElement);
            });
        })
        .catch(error => {
            console.error('Error fetching reviews:', error);
            document.getElementById('reviewsContainer').innerHTML = '<p class="error-message">Error loading reviews.</p>';
        });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="styles.css"> <!-- Link to external CSS -->
    <style>
        /* Ensure the Reviews button looks similar to the icons */
        .header-button {
            color: #333;
            font-size: 18px;
            text-decoration: none;
            margin-left: 10px;
            padding: 5px;
            display: inline-block;
        }

        .header-button:hover {
            color: #5c67f2;
        }
    </style>
</head>
<body>

    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <h1 id="title">SHOE SHOP</h1>
        <div id="showFilters" class="fas fa-bars">
            <a href="profile.html" id="userIcon" class="fas fa-user"></a> <!-- User icon linked directly to profile page -->
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="fas fa-receipt"></a> <!-- Example using a receipt icon -->
            <a href="all-reviews.html" id="Reviews" class="header-button">Reviews</a> <!-- Reviews Button -->
            <a href="#" id="logoutButton" class="fas fa-sign-out-alt"></a> <!-- Logout button -->
        </div>
    </div>

    <div id="mainContent">
        <div id="categoryContainer">
            <button class="category-button" data-category="on sale">On Sale</button>
            <button class="category-button" data-category="babys">Babys</button>
            <button class="category-button" data-category="woman">Woman</button>
            <button class="category-button" data-category="man">Man</button>
        </div>
        <div id="productContainer"></div>
    </div>

    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <input type="range" id="priceRange" min="0" max="999" value="999" oninput="updatePriceValue()">
        <span id="priceRangeValue">999</span>
        <button class="filter-button" id="searchAllButton">Search All</button>
        <button class="filter-button" id="searchByBrandButton">Search by Brand</button>
        <button class="filter-button" data-category="sports">Sports</button>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>

    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="cart.html" id="viewCartButton" class="proceed-button">View Cart</a> <!-- Changed to View Cart -->
    </div>

    <script src="/js/cart.js"></script>
    <script src="/js/main.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('logoutButton').addEventListener('click', function (event) {
                event.preventDefault();
                event.stopPropagation();  // Stop the event from propagating to parent elements
                
                fetch('/logout', {
                    method: 'GET',
                })
                .then(response => {
                    if (response.redirected) {
                        // Redirect to the login page after logout
                        window.location.href = response.url;
                    }
                })
                .catch(error => {
                    console.error('Error during logout:', error);
                });
            });
        });

        // Fetch and display products
        document.addEventListener('DOMContentLoaded', () => {
            fetchProducts();

            function fetchProducts() {
                fetch('/api/products')
                    .then(response => response.json())
                    .then(products => displayProducts(products))
                    .catch(error => console.error('Error fetching products:', error));
            }

            function displayProducts(products) {
                const productContainer = document.getElementById('productContainer');
                productContainer.innerHTML = ''; // Clear previous results
                
                products.forEach(product => {
                    const productDiv = document.createElement('div');
                    productDiv.className = 'product';
                    productDiv.innerHTML = `
                        <div class="image-container">
                            <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                        </div>
                        <h3>${product.brand} - ${product.model}</h3>
                        <p>${product.description}</p>
                        <p>Price: $${product.price}</p>
                        <select class="size-select" data-id="${product._id}">
                            ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                        </select>
                        <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                        <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
                    `;
                    productContainer.appendChild(productDiv);

                    // Fetch the average rating for the product
                    fetchAverageRating(product._id);
                });
            }

            function fetchAverageRating(productId) {
                fetch(`/api/reviews/average/${productId}`)
                    .then(response => response.json())
                    .then(data => {
                        const avgRatingElement = document.getElementById(`avgRating-${productId}`);
                        avgRatingElement.textContent = data.averageRating.toFixed(2) || 'No Ratings';
                    })
                    .catch(error => {
                        console.error('Error fetching average rating:', error);
                    });
            }
        });
    </script>

</body>
</html>
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Review = require('../models/reviewModel'); // Adjust the path as needed

// Route to calculate average rating for a product
router.get('/average/:productId', async (req, res) => {
    try {
        const productId = req.params.productId;
        const result = await Review.aggregate([
            { $match: { productId: mongoose.Types.ObjectId(productId) } },
            { $group: { _id: null, averageRating: { $avg: { $avg: ["$comfort", "$style", "$durability", "$materialQuality", "$valueForMoney"] } } } }
        ]);

        const averageRating = result.length ? result[0].averageRating : 0;
        res.json({ averageRating });
    } catch (error) {
        console.error('Error calculating average rating:', error);
        res.status(500).json({ error: 'Error calculating average rating' });
    }
});

module.exports = router;
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const cookieParser = require('cookie-parser');
const crypto = require('crypto'); // Import crypto module
const User = require('./models/User');
const Product = require('./models/Product'); // Import the Product model
const Review = require('./models/Review'); // Import the Review model
const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27018/authDB')
  .then(() => console.log('MongoDB connected...'))
  .catch(err => console.log(err));

// Middleware
app.use(bodyParser.json());
app.use(cookieParser());

// Middleware to check if the user is admin
async function isAdmin(req, res, next) {
  const { userId, username } = req.cookies;

  if (userId && username) {
    try {
      const user = await User.findById(userId);
      if (!user || user.username !== username || !user.isAdmin) {
        res.clearCookie('userId');
        res.clearCookie('username');
        return res.status(403).json({ message: 'Access denied' });
      } else {
        req.user = user;  // Attach the user object to the request for use in subsequent routes
        next();  // Proceed to the next middleware or route handler
      }
    } catch (err) {
      console.error('Error finding user:', err);
      res.clearCookie('userId');
      res.clearCookie('username');
      return res.status(500).json({ message: 'Internal server error' });
    }
  } else {
    res.status(403).json({ message: 'Access denied' });
  }
}

// Serve static files
app.use(express.static('public'));

// Routes

// Admin page route with admin check
app.get('/admin.html', isAdmin, (req, res) => {
  res.sendFile(__dirname + '/public/admin.html'); // Serve the admin page if the user is admin
});

// Routes for serving pages
app.get('/', (req, res) => res.sendFile(__dirname + '/public/index.html'));
app.get('/login', (req, res) => res.sendFile(__dirname + '/public/login.html'));
app.get('/index.html', (req, res) => res.sendFile(__dirname + '/public/index.html'));
app.get('/checkout.html', (req, res) => res.sendFile(__dirname + '/public/checkout.html'));
app.get('/purchase-hist.html', (req, res) => res.sendFile(__dirname + '/public/purchase-hist.html'));
app.get('/profile.html', (req, res) => res.sendFile(__dirname + '/public/profile.html'));
app.get('/review.html', (req, res) => res.sendFile(__dirname + '/public/review.html'));
app.get('/cart.html', (req, res) => res.sendFile(__dirname + '/public/cart.html'));

// API Endpoints for Products

// Get all products with optional filters
app.get('/api/products', async (req, res) => {
  try {
    const { search, maxPrice, category, brand, size } = req.query;
    const query = {};

    if (search) {
      const regex = new RegExp(search, 'i');
      query.$or = [
        { brand: regex },
        { model: regex },
        { description: regex }
      ];
    }

    if (maxPrice) {
      query.price = { $lte: parseFloat(maxPrice) };
    }

    if (category) {
      query.categories = category;
    }

    if (brand) {
      query.brand = brand;
    }

    if (size) {
      query.sizes = size;
    }

    const products = await Product.find(query);
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Failed to fetch products' });
  }
});

// Submit a review
app.post('/api/submit-review', async (req, res) => {
  try {
    const { userId, username } = req.cookies;
    const { title, comfort, style, durability, materialQuality, valueForMoney, additionalComments } = req.body;

    if (!userId) {
      return res.status(400).json({ message: 'User ID is required' });
    }

    const fullTitle = `${username}: ${title}`;

    const review = new Review({
      userId,
      title: fullTitle, 
      comfort,
      style,
      durability,
      materialQuality,
      valueForMoney,
      additionalComments
    });

    await review.save();
    res.status(200).json({ message: 'Review submitted successfully' });
  } catch (error) {
    console.error('Error submitting review:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get all reviews
app.get('/api/all-reviews', async (req, res) => {
  try {
    const reviews = await Review.find().populate('userId', 'username');
    res.status(200).json(reviews);
  } catch (error) {
    console.error('Error fetching reviews:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get the average rating for a specific product by ID
app.get('/api/reviews/average/:productId', async (req, res) => {
  try {
    const productId = req.params.productId;
    const result = await Review.aggregate([
      { $match: { productId: mongoose.Types.ObjectId(productId) } },
      { $group: { _id: null, averageRating: { $avg: { $avg: ["$comfort", "$style", "$durability", "$materialQuality", "$valueForMoney"] } } } }
    ]);

    const averageRating = result.length ? result[0].averageRating : 0;
    res.json({ averageRating });
  } catch (error) {
    console.error('Error calculating average rating:', error);
    res.status(500).json({ error: 'Error calculating average rating' });
  }
});

// Other routes like updating username, email, fetching user profile, etc. would go here

// Logout route
app.get('/logout', async (req, res) => {
  try {
    res.clearCookie('userId');
    res.clearCookie('username');
    res.clearCookie('cart');
    res.clearCookie('purchaseHistory');
    res.redirect('/login');
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({ message: 'Server error during logout' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
function fetchAverageRating(productId) {
    fetch(`/api/reviews/average/${productId}`)
        .then(response => response.json())
        .then(data => {
            const avgRatingElement = document.getElementById(`avgRating-${productId}`);
            if (data.averageRating !== undefined) {
                avgRatingElement.textContent = data.averageRating.toFixed(2);
            } else {
                avgRatingElement.textContent = 'No Ratings';
            }
        })
        .catch(error => {
            console.error('Error fetching average rating:', error);
            const avgRatingElement = document.getElementById(`avgRating-${productId}`);
            avgRatingElement.textContent = 'Error';
        });
}
function displayProducts(products) {
    const productContainer = document.getElementById('productContainer');
    productContainer.innerHTML = ''; // Clear previous results

    products.forEach(product => {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        productDiv.innerHTML = `
            <div class="image-container">
                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
            </div>
            <h3>${product.brand} - ${product.model}</h3>
            <p>${product.description}</p>
            <p>Price: $${product.price}</p>
            <select class="size-select" data-id="${product._id}">
                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
            </select>
            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
            <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
        `;
        productContainer.appendChild(productDiv);

        // Fetch and display the average rating for the product
        fetchAverageRating(product._id);
    });
}
function displayProducts(products) {
    const productContainer = document.getElementById('productContainer');
    productContainer.innerHTML = ''; // Clear previous results

    products.forEach(product => {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        productDiv.innerHTML = `
            <div class="image-container">
                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
            </div>
            <h3>${product.brand} - ${product.model}</h3>
            <p>${product.description}</p>
            <p>Price: $${product.price}</p>
            <select class="size-select" data-id="${product._id}">
                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
            </select>
            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
            <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
        `;
        productContainer.appendChild(productDiv);

        // Fetch and display the average rating for the product
        fetchAverageRating(product._id);
    });
}
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });
});

document.addEventListener('DOMContentLoaded', debugCookies);

function debugCookies() {
    console.log("All cookies visible to the script:", document.cookie);
}

document.addEventListener('DOMContentLoaded', () => {
    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);
    updateCart(cart);

    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            fetchProducts();
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            const productId = event.target.dataset.id;
            const size = event.target.dataset.size;
            removeFromCart(productId, size);
        } else if (event.target.matches('.add-to-cart-button')) {
            const productId = event.target.dataset.id;
            const sizeSelector = event.target.closest('.product').querySelector('.size-select');
            if (sizeSelector) {
                addToCart(productId, sizeSelector.value);
            } else {
                console.error('Size selector not found for product', productId);
                alert('Please select a size before adding to cart.');
            }
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    priceRange.addEventListener('input', function(event) {
        fetchProducts();
    });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    document.getElementById('viewCartButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'cart.html';
    });

    // Populate the size filter options dynamically
    const sizeFilter = document.getElementById('sizeFilter');
    const sizes = Array.from({ length: 25 }, (_, i) => 36 + i * 0.5);

    sizes.forEach(size => {
        const option = document.createElement('option');
        option.value = size;
        option.textContent = size;
        sizeFilter.appendChild(option);
    });

    updateCart(cart); // Ensure cart updates with the correct cart
});

const searchInput = document.getElementById('searchInput');
const priceRange = document.getElementById('priceRange');
const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
let cart = loadCartFromCookies();
let activeCategoryButton = null;

function updatePriceValue() {
    priceRangeValue.textContent = priceRange.value;
}

function fetchProducts() {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product._id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                    <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
                `;
                productContainer.appendChild(productDiv);

                // Fetch and display the average rating for the product
                fetchAverageRating(product._id);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const maxPrice = priceRange.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&maxPrice=${maxPrice}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product._id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                    <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
                `;
                productContainer.appendChild(productDiv);

                // Fetch and display the average rating for the product
                fetchAverageRating(product._id);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product._id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                    <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
                `;
                productContainer.appendChild(productDiv);

                // Fetch and display the average rating for the product
                fetchAverageRating(product._id);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            productContainer.innerHTML = ''; // Clear previous results
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <div class="image-container">
                        <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
                    </div>
                    <h3>${product.brand} - ${product.model}</h3>
                    <p>${product.description}</p>
                    <p>Price: $${product.price}</p>
                    <select class="size-select" data-id="${product._id}">
                        ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
                    </select>
                    <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
                    <p><a href="all-reviews.html?productId=${product._id}" class="view-reviews-link">⭐ Average Rating: <span id="avgRating-${product._id}">Loading...</span></a></p>
                `;
                productContainer.appendChild(productDiv);

                // Fetch and display the average rating for the product
                fetchAverageRating(product._id);
            });
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

function addToCart(productId, selectedSize) {
    const username = getCookie('username');

    if (username) {
        fetch(`/api/products/${productId}`)
            .then(response => response.json())
            .then(product => {
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }

                // Check if the product was fetched successfully and has a price
                if (!product || !product.price) {
                    console.error('Failed to retrieve product details or price is undefined');
                    alert('Error: Unable to add product to cart.');
                    return;
                }

                let cartItem = {
                    productId: product._id,
                    size: selectedSize,
                    quantity: 1,
                    image: product.image,
                    brand: product.brand,
                    model: product.model,
                    price: product.price
                };

                // Load cart from cookie
                let cart = loadCartFromCookies();

                // Check if the product is already in the cart
                let existingItem = cart.find(item => item.productId === productId && item.size === selectedSize);
                if (existingItem) {
                    existingItem.quantity += cartItem.quantity;
                } else {
                    cart.push(cartItem);
                }

                // Save the updated cart to the database
                fetch('/api/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(cartItem),
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add to cart in the database');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Product added to cart in the database successfully!');

                        // Re-fetch all product data to ensure price is correct (similar to removeFromCart)
                        const fetchProductPromises = data.cart.map(item => {
                            return fetch(`/api/products/${item.productId}`)
                                .then(response => response.json())
                                .then(product => {
                                    item.price = product.price;
                                    item.image = product.image;
                                    item.brand = product.brand;
                                    item.model = product.model;
                                    return item;
                                })
                                .catch(error => {
                                    console.error(`Failed to fetch product data for ${item.productId}:`, error);
                                });
                        });

                        Promise.all(fetchProductPromises).then((updatedCart) => {
                            // Save the updated cart to the cookie
                            saveCartToCookies(updatedCart);

                            // Update the UI to reflect the new cart state
                            updateCart(updatedCart);
                        });

                    } else {
                        console.error('Failed to add to cart in the database:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart in the database:', error.message);
                });
            })
            .catch(error => {
                console.error('Product fetch error:', error);
                alert('Error: Product not found.');
            });
    } else {
        window.location.href = '/login';
    }
}

function saveCartToCookies(cart) {
    try {
        const cartString = JSON.stringify(cart);
        setCookie('cart', cartString, 7); // Assuming cookies are valid for 7 days
    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function loadCartFromCookies() {
    const cartData = getCookie('cart');
    console.log("Raw cart data from cookie:", cartData);
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            console.log("Parsed cart data:", parsedCart);
            return parsedCart; // This should be an array of cart items
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return []; // Return an empty array if no cart data is found or parsing fails
}

function updateCart(cartData = []) {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');
    const cartCount = document.getElementById('cartCount');

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    console.log("Updating cart UI with data:", cartData);

    for (const item of cartData) {
        if (item.quantity) {
            itemCount += item.quantity;
            if (item.price) {
                totalPrice += item.quantity * item.price;
            } else {
                console.warn(`Missing price for item: ${item.productId}, size: ${item.size}`);
            }

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image || ''}" alt="Image of ${item.brand || 'Product'}" />
                <div>
                    <h4>${item.brand || 'Brand'} - ${item.model || 'Model'}</h4>
                    <p>Size: ${item.size}</p>
                    <span>x${item.quantity}</span>
                    <p>Price: $${item.price ? item.price.toFixed(2) : 'Undefined'}</p>
                </div>
                <button class="remove-button" data-id="${item.productId}" data-size="${item.size}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount; // Ensure this updates the icon

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function removeFromCart(productId, size) {
    fetch('/api/cart/remove', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, size }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Product removed from cart in the database successfully!');
            cart = data.cart;

            // Fetch the product data to ensure the price is correct
            const fetchProductPromises = cart.map(item => {
                return fetch(`/api/products/${item.productId}`)
                    .then(response => response.json())
                    .then(product => {
                        item.price = product.price;
                        item.image = product.image;  // Ensure the image is reassigned
                        item.brand = product.brand;  // Ensure the brand is reassigned
                        item.model = product.model;  // Ensure the model is reassigned
                        return item;
                    })
                    .catch(error => {
                        console.error(`Failed to fetch product data for ${item.productId}:`, error);
                    });
            });

            // Once all product data has been fetched and prices updated, update the UI
            Promise.all(fetchProductPromises).then(() => {
                saveCartToCookies(cart); // Save to cookies
                updateCart(cart); // Update UI
            });

        } else {
            console.error('Failed to remove from cart in the database:', data.message);
        }
    })
    .catch(error => {
        console.error('Error during removeFromCart:', error);
    });
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function getCookie(name) {
    const nameEQ = encodeURIComponent(name) + "=";
    const cookies = document.cookie.split(';');
    
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i].trim();
        if (c.indexOf(nameEQ) == 0) {
            const value = c.substring(nameEQ.length);
            return decodeURIComponent(value);
        }
    }
    console.log(`Cookie not found: ${name}`);
    return null;
}

function loadCartFromCookies() {
    const cartData = getCookie('cart');
    console.log("Raw cart data from cookie:", cartData);
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            console.log("Parsed cart data:", parsedCart);
            return parsedCart; // This should be an array of cart items
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return []; // Return an empty array if no cart data is found or parsing fails
}

// Function to fetch the average rating of a product
function fetchAverageRating(productId) {
    fetch(`/api/reviews/average/${productId}`)
        .then(response => response.json())
        .then(data => {
            const avgRatingElement = document.getElementById(`avgRating-${productId}`);
            if (data.averageRating !== undefined) {
                avgRatingElement.textContent = data.averageRating.toFixed(2);
            } else {
                avgRatingElement.textContent = 'No Ratings';
            }
        })
        .catch(error => {
            console.error('Error fetching average rating:', error);
            const avgRatingElement = document.getElementById(`avgRating-${productId}`);
            avgRatingElement.textContent = 'Error';
        });
}

document.addEventListener('DOMContentLoaded', () => {
    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);

    // Fetch detailed product information for each cart item
    const fetchProductPromises = cart.map(item => {
        return fetch(`/api/products/${item.productId}`)
            .then(response => response.json())
            .then(product => {
                item.price = product.price;
                item.image = product.image;
                item.brand = product.brand;
                item.model = product.model;
                return item;
            })
            .catch(error => {
                console.error(`Failed to fetch product data for ${item.productId}:`, error);
            });
    });

    Promise.all(fetchProductPromises).then(updatedCart => {
        // Save the updated cart to cookies and update UI
        saveCartToCookies(updatedCart);
        updateCart(updatedCart);
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave a Review</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #reviewPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        img {
            max-width: 150px;
            margin-bottom: 20px;
        }
        .rating-category {
            margin-bottom: 20px;
        }
        .rating-category h3 {
            margin-bottom: 10px;
        }
        .rating-category p {
            margin: 5px 0;
        }
        .rating-container {
            margin-top: 10px;
            display: flex;
            align-items: center;
        }
        .rating-container i {
            font-size: 24px;
            color: #ddd;
            cursor: pointer;
            margin-right: 5px;
        }
        .rating-container i.selected {
            color: #f4c10f;
        }
        textarea {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-bottom: 20px;
        }
        button {
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            background-color: #333;
            color: white;
            cursor: pointer;
        }
    </style>
    <!-- Link to Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>

    <h1>Leave a Review</h1>
    <div id="reviewPanel">
        <img id="productImage" src="" alt="Shoe Image">
        
        <div class="rating-category">
            <h3>Overall Rating:</h3>
            <p>Your overall satisfaction with the shoe.</p>
            <div class="rating-container" id="overallRating">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Comfort:</h3>
            <p>How comfortable the shoe feels during regular wear.</p>
            <div class="rating-container" id="comfort">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Style:</h3>
            <p>The aesthetic appeal and design of the shoe.</p>
            <div class="rating-container" id="style">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Durability:</h3>
            <p>How well the shoe holds up over time with regular use.</p>
            <div class="rating-container" id="durability">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Material Quality:</h3>
            <p>The quality of the materials used in the shoe's construction.</p>
            <div class="rating-container" id="materialQuality">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Value for Money:</h3>
            <p>The balance between the shoe's price and the quality/features offered.</p>
            <div class="rating-container" id="valueForMoney">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>

        <h3>Additional Comments:</h3>
        <textarea id="additionalComments" placeholder="Write your review here..."></textarea>
        <button id="submitReview">Submit Review</button>
    </div>

    <script src="js/review.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to delete a cookie by name
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    // Retrieve product title and image from cookies
    const productTitle = getCookie('productTitle');
    const productImage = getCookie('productImage');

    // Update the page title with the product title
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    // Update the product image src with the value from the cookie
    if (productImage) {
        document.getElementById('productImage').src = productImage;
    }

    // Function to handle star rating selection
    function handleStarClick(event) {
        const starContainer = event.currentTarget.parentElement;
        const ratingValue = event.currentTarget.dataset.value;
        starContainer.dataset.value = ratingValue;
        
        // Update the selected state of the stars
        Array.from(starContainer.children).forEach(star => {
            star.classList.remove('selected');
            if (star.dataset.value <= ratingValue) {
                star.classList.add('selected');
            }
        });
    }

    // Add event listeners to all rating stars
    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', handleStarClick);
    });

    // Handle the form submission for review
    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault(); // Prevent the default form submission
        const submitButton = event.target;
        submitButton.disabled = true; // Disable the button to prevent multiple submissions

        const title = productTitle || 'General Review';
        const comfort = parseInt(document.getElementById('comfort').dataset.value, 10) || 0;
        const style = parseInt(document.getElementById('style').dataset.value, 10) || 0;
        const durability = parseInt(document.getElementById('durability').dataset.value, 10) || 0;
        const materialQuality = parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0;
        const valueForMoney = parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0;
        const additionalComments = document.getElementById('additionalComments').value;

        const review = {
            title,
            comfort,
            style,
            durability,
            materialQuality,
            valueForMoney,
            additionalComments
        };

        console.log("Submitting Review:", review);

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle'); // Delete the productTitle cookie after successful submission
                deleteCookie('productImage'); // Delete the productImage cookie after successful submission
                window.location.href = '/thankYouReview.html'; // Redirect to the thank you page for reviews
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false; // Re-enable the button in case of error
        }
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave a Review</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #reviewPanel {
            width: 80%;
            max-width: 800px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        img {
            max-width: 150px;
            margin-bottom: 20px;
        }
        .rating-category {
            margin-bottom: 20px;
        }
        .rating-category h3 {
            margin-bottom: 10px;
        }
        .rating-category p {
            margin: 5px 0;
        }
        .rating-container {
            margin-top: 10px;
            display: flex;
            align-items: center;
        }
        .rating-container i {
            font-size: 24px;
            color: #ddd;
            cursor: pointer;
            margin-right: 5px;
        }
        .rating-container i.selected {
            color: #f4c10f;
        }
        textarea {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-bottom: 20px;
        }
        button {
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            background-color: #333;
            color: white;
            cursor: pointer;
        }
    </style>
    <!-- Link to Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Link to external JavaScript file -->
</head>
<body>

    <h1>Leave a Review</h1>
    <div id="reviewPanel">
        <img id="productImage" src="" alt="Shoe Image">
        
        <div class="rating-category">
            <h3>Comfort:</h3>
            <p>How comfortable the shoe feels during regular wear.</p>
            <div class="rating-container" id="comfort">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <!-- Other categories omitted for brevity -->

        <h3>Additional Comments:</h3>
        <textarea id="additionalComments" placeholder="Write your review here..."></textarea>
        <button id="submitReview">Submit Review</button>
    </div>
    <script src="js/review.js"></script>

</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    // Function to get cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Function to delete a cookie by name
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }

    // Retrieve product title and image from cookies
    const productTitle = getCookie('productTitle');
    const productImage = getCookie('productImage');

    // Update the page title with the product title
    if (productTitle) {
        document.querySelector('h1').textContent = `Leave a Review for ${productTitle}`;
    }

    // Update the product image src with the value from the cookie
    if (productImage) {
        document.getElementById('productImage').src = productImage;
    }

    // Function to handle star rating selection
    function handleStarClick(event) {
        const starContainer = event.currentTarget.parentElement;
        const ratingValue = event.currentTarget.dataset.value;
        starContainer.dataset.value = ratingValue;
        
        // Update the selected state of the stars
        Array.from(starContainer.children).forEach(star => {
            star.classList.remove('selected');
            if (star.dataset.value <= ratingValue) {
                star.classList.add('selected');
            }
        });
    }

    // Add event listeners to all rating stars
    document.querySelectorAll('.rating-container i').forEach(star => {
        star.addEventListener('click', handleStarClick);
    });

    // Handle the form submission for review
    document.getElementById('submitReview').addEventListener('click', async (event) => {
        event.preventDefault(); // Prevent the default form submission
        const submitButton = event.target;
        submitButton.disabled = true; // Disable the button to prevent multiple submissions

        const title = productTitle || 'General Review';
        const comfort = parseInt(document.getElementById('comfort').dataset.value, 10) || 0;
        const style = parseInt(document.getElementById('style').dataset.value, 10) || 0;
        const durability = parseInt(document.getElementById('durability').dataset.value, 10) || 0;
        const materialQuality = parseInt(document.getElementById('materialQuality').dataset.value, 10) || 0;
        const valueForMoney = parseInt(document.getElementById('valueForMoney').dataset.value, 10) || 0;

        // Calculate overall rating
        const overallRating = (comfort + style + durability + materialQuality + valueForMoney) / 5;

        const additionalComments = document.getElementById('additionalComments').value;

        const review = {
            title,
            comfort,
            style,
            durability,
            materialQuality,
            valueForMoney,
            overallRating,
            additionalComments
        };

        console.log("Submitting Review:", review);

        try {
            const response = await fetch('/api/submit-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(review)
            });

            if (response.ok) {
                alert('Review submitted successfully!');
                deleteCookie('productTitle'); // Delete the productTitle cookie after successful submission
                deleteCookie('productImage'); // Delete the productImage cookie after successful submission

                // Redirect to the thank you page with the overall rating included in the URL
                window.location.href = `/thankYouReview.html?rating=${overallRating}`;
            } else {
                const errorData = await response.json();
                console.error('Error submitting review:', errorData);
                alert('Error submitting review: ' + errorData.message);
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            alert('Error submitting review.');
        } finally {
            submitButton.disabled = false; // Re-enable the button in case of error
        }
    });
});
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thank You for Your Review</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
            background-color: #f4f4f9;
        }
        .shoe-image {
            max-width: 200px;
            margin-bottom: 20px;
        }
        .stars {
            font-size: 48px;
            color: #f4c10f;
        }
        .star {
            display: inline-block;
            position: relative;
            font-size: 48px;
            color: #f4c10f;
        }
        .star.full:before {
            content: '\f005';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
        }
        .star.half:before {
            content: '\f089';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
        }
        .star.empty:before {
            content: '\f005';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            color: #ddd;
        }
    </style>
    <!-- Link to Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <h1>Thank You for Reviewing the <span id="shoeName"></span> shoes!</h1>
    <img id="shoeImage" src="" alt="Shoe Image" class="shoe-image">
    <p>The average rating you gave for the shoe based on comfort, style, durability, material quality, and value for money is:</p>
    <div id="ratingContainer">
        <div class="stars" id="starContainer"></div>
    </div>

    <script>
        // Function to get URL parameter by name
        function getParameterByName(name) {
            const url = new URL(window.location.href);
            return url.searchParams.get(name);
        }

        // Function to get cookie value by name
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        // Get the shoe name and image from cookies
        const shoeName = getCookie('productTitle');
        const shoeImage = getCookie('productImage');
        
        // Get the rating from the URL
        const rating = parseFloat(getParameterByName('rating'));

        // Update the page with the shoe details
        if (shoeName) {
            document.getElementById('shoeName').textContent = shoeName;
        }

        if (shoeImage) {
            document.getElementById('shoeImage').src = shoeImage;
        }

        // Display the stars corresponding to the rating
        const starContainer = document.getElementById('starContainer');
        const fullStars = Math.floor(rating); // Full stars
        const partialStar = rating - fullStars;
        
        // Add full stars
        for (let i = 0; i < fullStars; i++) {
            starContainer.innerHTML += '<span class="star full"></span>';
        }

        // Add a partially filled star for the remaining fraction
        if (partialStar >= 0.5) {
            starContainer.innerHTML += '<span class="star half"></span>';
        }

        // Add empty stars to make a total of 5 stars
        const remainingStars = 5 - starContainer.children.length;
        for (let i = 0; i < remainingStars; i++) {
            starContainer.innerHTML += '<span class="star empty"></span>';
        }

        // Delete cookies after retrieving data
        document.cookie = 'productTitle=; Max-Age=0; path=/;';
        document.cookie = 'productImage=; Max-Age=0; path=/;';
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thank You for Your Review</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
            background-color: #f4f4f9;
        }
        .shoe-image {
            max-width: 200px;
            margin-bottom: 20px;
        }
        .stars {
            font-size: 48px;
            color: #f4c10f;
            display: inline-block;
            position: relative;
        }
        .star {
            display: inline-block;
            position: relative;
            font-size: 48px;
            color: #f4c10f;
        }
        .star.full:before {
            content: '\f005';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
        }
        .star.half {
            background: linear-gradient(90deg, #f4c10f 50%, #ddd 50%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            position: relative;
            display: inline-block;
        }
        .star.half:before {
            content: '\f005';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            color: #f4c10f;
            position: absolute;
            left: 0;
            top: 0;
            width: 50%;
            overflow: hidden;
        }
        .star.empty:before {
            content: '\f005';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            color: #ddd;
        }
        .rating-text {
            font-size: 24px;
            margin-top: 10px;
        }
    </style>
    <!-- Link to Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <h1>Thank You for Reviewing the <span id="shoeName"></span> shoes!</h1>
    <img id="shoeImage" src="" alt="Shoe Image" class="shoe-image">
    <p>The average rating you gave for the shoe based on comfort, style, durability, material quality, and value for money is:</p>
    <div id="ratingContainer">
        <div class="stars" id="starContainer"></div>
        <div class="rating-text" id="ratingText"></div>
    </div>

    <script>
        // Function to get URL parameter by name
        function getParameterByName(name) {
            const url = new URL(window.location.href);
            return url.searchParams.get(name);
        }

        // Function to get cookie value by name
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        // Get the shoe name and image from cookies
        const shoeName = getCookie('productTitle');
        const shoeImage = getCookie('productImage');
        
        // Get the rating from the URL
        const rating = parseFloat(getParameterByName('rating'));

        // Update the page with the shoe details
        if (shoeName) {
            document.getElementById('shoeName').textContent = shoeName;
        }

        if (shoeImage) {
            document.getElementById('shoeImage').src = shoeImage;
        }

        // Display the stars corresponding to the rating
        const starContainer = document.getElementById('starContainer');
        const ratingText = document.getElementById('ratingText');
        const fullStars = Math.floor(rating); // Full stars
        const remainingFraction = rating - fullStars;

        // Add full stars
        for (let i = 0; i < fullStars; i++) {
            starContainer.innerHTML += '<span class="star full"></span>';
        }

        // Add a partially filled star for the remaining fraction
        if (remainingFraction > 0) {
            const percentage = remainingFraction * 100;
            starContainer.innerHTML += `
                <span class="star" style="background: linear-gradient(90deg, #f4c10f ${percentage}%, #ddd ${percentage}%); 
                -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                    <i class="fas fa-star"></i>
                </span>`;
        }

        // Add empty stars to make a total of 5 stars
        const remainingStars = 5 - starContainer.children.length;
        for (let i = 0; i < remainingStars; i++) {
            starContainer.innerHTML += '<span class="star empty"></span>';
        }

        // Display the "x out of 5 stars" text
        ratingText.textContent = `${rating.toFixed(1)} out of 5 stars`;

        // Delete cookies after retrieving data
        document.cookie = 'productTitle=; Max-Age=0; path=/;';
        document.cookie = 'productImage=; Max-Age=0; path=/;';
    </script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('logoutButton').addEventListener('click', function (event) {
        event.preventDefault();
        
        fetch('/logout', {
            method: 'GET',
        })
        .then(response => {
            if (response.redirected) {
                // Redirect to the login page after logout
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error during logout:', error);
        });
    });
});

document.addEventListener('DOMContentLoaded', debugCookies);

function debugCookies() {
    console.log("All cookies visible to the script:", document.cookie);
}

document.addEventListener('DOMContentLoaded', () => {
    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);
    updateCart(cart);

    fetchProducts();
    fetchBrands();

    document.body.addEventListener('click', function(event) {
        if (event.target.matches('.category-button')) {
            fetchProductsByCategory(event.target.dataset.category, event.target);
        } else if (event.target.matches('.filter-button')) {
            fetchProducts();
        } else if (event.target.matches('.brand-button')) {
            fetchProductsByBrand(event.target.dataset.brand);
        } else if (event.target.matches('.remove-button')) {
            const productId = event.target.dataset.id;
            const size = event.target.dataset.size;
            removeFromCart(productId, size);
        } else if (event.target.matches('.add-to-cart-button')) {
            const productId = event.target.dataset.id;
            const sizeSelector = event.target.closest('.product').querySelector('.size-select');
            if (sizeSelector) {
                addToCart(productId, sizeSelector.value);
            } else {
                console.error('Size selector not found for product', productId);
                alert('Please select a size before adding to cart.');
            }
        }
    });

    document.getElementById('cartIcon').addEventListener('click', () => {
        cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
    });

    document.getElementById('showFilters').addEventListener('click', () => {
        sidebar.classList.add('open');
        showFilters.style.display = 'none';
        filtersClose.style.display = 'block';
    });

    document.getElementById('filtersClose').addEventListener('click', () => {
        sidebar.classList.remove('open');
        showFilters.style.display = 'block';
        filtersClose.style.display = 'none';
    });

    document.getElementById('availableBrandsToggle').addEventListener('click', () => {
        availableBrands.style.display = availableBrands.style.display === 'none' ? 'block' : 'none';
    });

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === "Enter") {
            fetchProducts();
        }
    });

    // Removed priceRange event listener since price range filtering is no longer needed
    // document.getElementById('priceRange').addEventListener('input', function(event) {
    //     fetchProducts();
    // });

    document.getElementById('sizeFilter').addEventListener('change', () => {
        fetchProducts();
    });

    document.getElementById('viewCartButton').addEventListener('click', function(event) {
        event.preventDefault();
        window.location.href = 'cart.html';
    });

    document.getElementById('sortRating').addEventListener('change', function() {
        fetchProducts();
    });

    document.getElementById('sortPrice').addEventListener('change', function() {
        fetchProducts();
    });

    updateCart(cart); // Ensure cart updates with the correct cart
});

const searchInput = document.getElementById('searchInput');
// Removed priceRange and priceRangeValue elements
// const priceRange = document.getElementById('priceRange');
// const priceRangeValue = document.getElementById('priceRangeValue');
const productContainer = document.getElementById('productContainer');
const cartContainer = document.getElementById('cartContainer');
const cartItemsContainer = document.getElementById('cartItems');
const cartTotalContainer = document.getElementById('cartTotal');
const cartIcon = document.getElementById('cartIcon');
const cartCount = document.getElementById('cartCount');
const availableBrands = document.getElementById('availableBrands');
const availableBrandsToggle = document.getElementById('availableBrandsToggle');
const sidebar = document.getElementById('sidebar');
const showFilters = document.getElementById('showFilters');
const filtersClose = document.getElementById('filtersClose');
let cart = loadCartFromCookies();
let activeCategoryButton = null;

function fetchProducts() {
    const searchQuery = searchInput.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const sortByRating = document.getElementById('sortByRatingSelect').value;
    const sortByPrice = document.getElementById('sortByPriceSelect').value;

    let query = `search=${encodeURIComponent(searchQuery)}` + (selectedSize ? `&size=${selectedSize}` : '');

    // Adding sorting by rating to the query
    if (sortByRating === 'ratingDesc') {
        query += '&sortByRating=desc';
    } else if (sortByRating === 'ratingAsc') {
        query += '&sortByRating=asc';
    }

    // Adding sorting by price to the query (if sort by rating is also provided, it will be secondary)
    if (sortByPrice === 'priceDesc') {
        query += '&sortByPrice=desc';
    } else if (sortByPrice === 'priceAsc') {
        query += '&sortByPrice=asc';
    }

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

document.getElementById('applyFiltersButton').addEventListener('click', fetchProducts);

function fetchProductsByType(type) {
    const searchQuery = searchInput.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `search=${encodeURIComponent(searchQuery)}&type=${type}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByCategory(category, button) {
    if (activeCategoryButton === button) {
        activeCategoryButton.classList.remove('active');
        activeCategoryButton = null;
        fetchProducts();
        return;
    }
    if (activeCategoryButton) {
        activeCategoryButton.classList.remove('active');
    }
    button.classList.add('active');
    activeCategoryButton = button;
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `category=${category}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchProductsByBrand(brand) {
    const selectedSize = document.getElementById('sizeFilter').value;
    const query = `brand=${encodeURIComponent(brand)}` + (selectedSize ? `&size=${selectedSize}` : '');

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function fetchBrands() {
    fetch('http://localhost:3000/api/brands')
        .then(response => response.json())
        .then(brands => {
            availableBrands.innerHTML = ''; // Clear previous brands
            for (const brand in brands) {
                const brandDiv = document.createElement('button');
                brandDiv.className = 'brand-button';
                brandDiv.dataset.brand = brand;
                brandDiv.innerHTML = `${brand}: ${brands[brand]}`;
                availableBrands.appendChild(brandDiv);
            }
        })
        .catch(error => {
            console.error('Error fetching brands:', error);
        });
}

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('filterBySelectedCategories').addEventListener('click', function() {
        const selectedCategories = [];
        document.querySelectorAll('.category-checkbox:checked').forEach(checkbox => {
            selectedCategories.push(checkbox.value);
        });

        // Fetch products based on selected categories
        fetchProductsBySelectedCategories(selectedCategories);
    });
});

function fetchProductsBySelectedCategories(categories) {
    const searchQuery = searchInput.value;
    const selectedSize = document.getElementById('sizeFilter').value;
    
    let query = `search=${encodeURIComponent(searchQuery)}` + (selectedSize ? `&size=${selectedSize}` : '');
    
    if (categories.length > 0) {
        query += `&categories=${categories.join(',')}`;
    }

    fetch(`http://localhost:3000/api/products?${query}`)
        .then(response => response.json())
        .then(products => {
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
        });
}

function renderProducts(products) {
    productContainer.innerHTML = ''; // Clear previous results
    products.forEach(product => {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        productDiv.innerHTML = `
            <div class="image-container">
                <img src="${product.image}" alt="Image of ${product.brand} ${product.model}" />
            </div>
            <h3>${product.brand} - ${product.model}</h3>
            <p>${product.description}</p>
            <p>Price: $${product.price}</p>
            <select class="size-select" data-id="${product._id}">
                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
            </select>
            <div class="rating-display">
                Rating: ${product.averageRating ? product.averageRating.toFixed(1) + ' ☆' : 'No ratings yet'}
            </div>
            ${product.averageRating ? `<a href="/all-reviews.html?productId=${product._id}" class="view-reviews-link">View Detailed Reviews</a>` : ''}
            <button class="add-to-cart-button" data-id="${product._id}">Add to Cart</button>
        `;
        productContainer.appendChild(productDiv);
    });
}

function addToCart(productId, selectedSize) {
    const username = getCookie('username');

    if (username) {
        fetch(`/api/products/${productId}`)
            .then(response => response.json())
            .then(product => {
                if (!selectedSize) {
                    alert('Please select a size.');
                    return;
                }

                // Check if the product was fetched successfully and has a price
                if (!product || !product.price) {
                    console.error('Failed to retrieve product details or price is undefined');
                    alert('Error: Unable to add product to cart.');
                    return;
                }

                let cartItem = {
                    productId: product._id,
                    size: selectedSize,
                    quantity: 1,
                    image: product.image,
                    brand: product.brand,
                    model: product.model,
                    price: product.price
                };

                // Load cart from cookie
                let cart = loadCartFromCookies();

                // Check if the product is already in the cart
                let existingItem = cart.find(item => item.productId === productId && item.size === selectedSize);
                if (existingItem) {
                    existingItem.quantity += cartItem.quantity;
                } else {
                    cart.push(cartItem);
                }

                // Save the updated cart to the database
                fetch('/api/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(cartItem),
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add to cart in the database');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Product added to cart in the database successfully!');

                        // Re-fetch all product data to ensure price is correct (similar to removeFromCart)
                        const fetchProductPromises = data.cart.map(item => {
                            return fetch(`/api/products/${item.productId}`)
                                .then(response => response.json())
                                .then(product => {
                                    item.price = product.price;
                                    item.image = product.image;
                                    item.brand = product.brand;
                                    item.model = product.model;
                                    return item;
                                })
                                .catch(error => {
                                    console.error(`Failed to fetch product data for ${item.productId}:`, error);
                                });
                        });

                        Promise.all(fetchProductPromises).then((updatedCart) => {
                            // Save the updated cart to the cookie
                            saveCartToCookies(updatedCart);

                            // Update the UI to reflect the new cart state
                            updateCart(updatedCart);
                        });

                    } else {
                        console.error('Failed to add to cart in the database:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error adding to cart in the database:', error.message);
                });
            })
            .catch(error => {
                console.error('Product fetch error:', error);
                alert('Error: Product not found.');
            });
    } else {
        window.location.href = '/login';
    }
}

function saveCartToCookies(cart) {
    try {
        const cartString = JSON.stringify(cart);
        setCookie('cart', cartString, 7); // Assuming cookies are valid for 7 days
    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function loadCartFromCookies() {
    const cartData = getCookie('cart');
    console.log("Raw cart data from cookie:", cartData);
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            console.log("Parsed cart data:", parsedCart);
            return parsedCart; // This should be an array of cart items
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return []; // Return an empty array if no cart data is found or parsing fails
}

function updateCart(cartData = []) {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');
    const cartCount = document.getElementById('cartCount');

    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    console.log("Updating cart UI with data:", cartData);

    for (const item of cartData) {
        if (item.quantity) {
            itemCount += item.quantity;
            if (item.price) {
                totalPrice += item.quantity * item.price;
            } else {
                console.warn(`Missing price for item: ${item.productId}, size: ${item.size}`);
            }

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image || ''}" alt="Image of ${item.brand || 'Product'}" />
                <div>
                    <h4>${item.brand || 'Brand'} - ${item.model || 'Model'}</h4>
                    <p>Size: ${item.size}</p>
                    <span>x${item.quantity}</span>
                    <p>Price: $${item.price ? item.price.toFixed(2) : 'Undefined'}</p>
                </div>
                <button class="remove-button" data-id="${item.productId}" data-size="${item.size}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount; // Ensure this updates the icon

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function removeFromCart(productId, size) {
    fetch('/api/cart/remove', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, size }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Product removed from cart in the database successfully!');
            cart = data.cart;

            // Fetch the product data to ensure the price is correct
            const fetchProductPromises = cart.map(item => {
                return fetch(`/api/products/${item.productId}`)
                    .then(response => response.json())
                    .then(product => {
                        item.price = product.price;
                        item.image = product.image;  // Ensure the image is reassigned
                        item.brand = product.brand;  // Ensure the brand is reassigned
                        item.model = product.model;  // Ensure the model is reassigned
                        return item;
                    })
                    .catch(error => {
                        console.error(`Failed to fetch product data for ${item.productId}:`, error);
                    });
            });

            // Once all product data has been fetched and prices updated, update the UI
            Promise.all(fetchProductPromises).then(() => {
                saveCartToCookies(cart); // Save to cookies
                updateCart(cart); // Update UI
            });

        } else {
            console.error('Failed to remove from cart in the database:', data.message);
        }
    })
    .catch(error => {
        console.error('Error during removeFromCart:', error);
    });
}

function saveCartToCookies(cart) {
    try {
        const cartString = JSON.stringify(cart);
        setCookie('cart', cartString, 7); // Assuming cookies are valid for 7 days
    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function updateCart(cartData = []) {
    cartItemsContainer.innerHTML = ''; // Clear previous cart items
    let totalPrice = 0;
    let itemCount = 0;

    console.log("Updating cart UI with data:", cartData);

    for (const item of cartData) {
        if (item.quantity) {
            itemCount += item.quantity;
            if (item.price) {
                totalPrice += item.quantity * item.price;
            } else {
                console.warn(`Missing price for item: ${item.productId}, size: ${item.size}`);
            }

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <img src="${item.image || ''}" alt="Image of ${item.brand || 'Product'}" />
                <div>
                    <h4>${item.brand || 'Brand'} - ${item.model || 'Model'}</h4>
                    <p>Size: ${item.size}</p>
                    <span>x${item.quantity}</span>
                    <p>Price: $${item.price ? item.price.toFixed(2) : 'Undefined'}</p>
                </div>
                <button class="remove-button" data-id="${item.productId}" data-size="${item.size}">&times;</button>
            `;
            cartItemsContainer.appendChild(cartItem);
        }
    }

    cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
    cartCount.innerText = itemCount; // Ensure this updates the icon

    if (itemCount === 0) {
        cartTotalContainer.innerHTML = `<p class="cart-total">Empty Cart</p>`;
        document.querySelector('.proceed-button').style.display = 'none';
    } else {
        document.querySelector('.proceed-button').style.display = 'block';
    }
}

function setCookie(name, value, days, secure = true, sameSite = 'Lax') {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    const secureFlag = secure ? '; Secure' : '';
    const sameSitePolicy = `; SameSite=${sameSite}`;

    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/;${secureFlag}${sameSitePolicy}`;
}

function getCookie(name) {
    const nameEQ = encodeURIComponent(name) + "=";
    const cookies = document.cookie.split(';');
    
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i].trim();
        if (c.indexOf(nameEQ) == 0) {
            const value = c.substring(nameEQ.length);
            return decodeURIComponent(value);
        }
    }
    console.log(`Cookie not found: ${name}`);
    return null;
}

function loadCartFromCookies() {
    const cartData = getCookie('cart');
    console.log("Raw cart data from cookie:", cartData);
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            console.log("Parsed cart data:", parsedCart);
            return parsedCart; // This should be an array of cart items
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return []; // Return an empty array if no cart data is found or parsing fails
}

document.addEventListener('DOMContentLoaded', () => {
    let cart = loadCartFromCookies();
    console.log("Cart loaded from cookies:", cart);

    // Fetch detailed product information for each cart item
    const fetchProductPromises = cart.map(item => {
        return fetch(`/api/products/${item.productId}`)
            .then(response => response.json())
            .then(product => {
                item.price = product.price;
                item.image = product.image;
                item.brand = product.brand;
                item.model = product.model;
                return item;
            })
            .catch(error => {
                console.error(`Failed to fetch product data for ${item.productId}:`, error);
            });
    });

    Promise.all(fetchProductPromises).then(updatedCart => {
        // Save the updated cart to cookies and update UI
        saveCartToCookies(updatedCart);
        updateCart(updatedCart);
    });
});
import fetch from 'node-fetch';

// Define the base URL of your server
const baseUrl = 'http://localhost:3000';

function checkStatus(response, expectedStatus, testName) {
    if (response.status === expectedStatus) {
        console.log(`✓ ${testName}`);
    } else {
        console.log(`✗ ${testName} - Expected ${expectedStatus}, got ${response.status}`);
    }
}

async function runGETTests() {
    try {
        let response = await fetch(`${baseUrl}/`);
        checkStatus(response, 200, 'GET Home Page');
    } catch (error) {
        console.error('Error in GET Home Page:', error);
    }

    try {
        let response = await fetch(`${baseUrl}/products`);
        checkStatus(response, 200, 'GET Products List');
    } catch (error) {
        console.error('Error in GET Products List:', error);
    }

    try {
        let response = await fetch(`${baseUrl}/cart`);
        checkStatus(response, 200, 'GET Cart');
    } catch (error) {
        console.error('Error in GET Cart:', error);
    }

    // Additional GET routes can be added here
}

async function runPOSTTests() {
    let response = await fetch(`${baseUrl}/login`, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({username: 'testuser', password: 'password123'})
    });

    if (response.status === 200) {
        console.log('✓ POST Login Successful');
    } else {
        console.log(`✗ POST Login Failed - Expected 200, got ${response.status}`);
    }

    // Example POST request to add a product to the cart
    response = await fetch(`${baseUrl}/add-to-cart`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': 'sessionId=valid-session-id',  // Assuming session-based auth
        },
        body: JSON.stringify({
            productId: 'product-id-123',
            quantity: 1
        })
    });

    if (response.status === 200) {
        console.log('✓ POST Add to Cart Successful');
    } else {
        console.log(`✗ POST Add to Cart Failed - Expected 200, got ${response.status}`);
    }

    // Additional POST routes can be added here
}

async function runAllTests() {
    await runGETTests();
    await runPOSTTests();
    console.log('All tests executed.');
}

runAllTests();
import fetch from 'node-fetch';

// Define the base URL of your server
const baseUrl = 'http://localhost:3000';

function checkStatus(response, expectedStatus, testName) {
    if (response.status === expectedStatus) {
        console.log(`✓ ${testName}`);
    } else {
        console.log(`✗ ${testName} - Expected ${expectedStatus}, got ${response.status}`);
    }
}

async function runGETTests() {
    // Test the home page which likely lists products
    try {
        let response = await fetch(`${baseUrl}/`);
        checkStatus(response, 200, 'GET Home Page');
    } catch (error) {
        console.error('Error in GET Home Page:', error);
    }

    // Test the cart page
    try {
        let response = await fetch(`${baseUrl}/cart.html`);
        checkStatus(response, 200, 'GET Cart Page');
    } catch (error) {
        console.error('Error in GET Cart Page:', error);
    }

    // Test the checkout page
    try {
        let response = await fetch(`${baseUrl}/checkout.html`);
        checkStatus(response, 200, 'GET Checkout Page');
    } catch (error) {
        console.error('Error in GET Checkout Page:', error);
    }

    // Test the profile page (assuming authentication is required)
    try {
        let response = await fetch(`${baseUrl}/profile.html`, {
            redirect: 'manual'
        });
        checkStatus(response, 302, 'GET Profile Page (unauthenticated)');
    } catch (error) {
        console.error('Error in GET Profile Page:', error);
    }
}

async function runPOSTTests() {
    // Example POST request to add a product to the cart
    let response = await fetch(`${baseUrl}/add-to-cart`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            productId: '123', // assuming '123' is a valid product ID
            quantity: 1
        })
    });

    // Check the status code and response for adding to cart
    if (response.status === 200) {
        console.log('✓ POST Add to Cart Successful');
    } else {
        console.log(`✗ POST Add to Cart Failed - Expected 200, got ${response.status}`);
    }

    // Simulate POST request for checkout (requires authentication)
    response = await fetch(`${baseUrl}/checkout`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': 'sessionId=valid-session-id'  // Assuming session-based auth
        },
        body: JSON.stringify({
            address: '123 Main St',
            paymentMethod: 'Credit Card'
        })
    });

    // Check the status code and response for checkout
    if (response.status === 200) {
        console.log('✓ POST Checkout Successful');
    } else {
        console.log(`✗ POST Checkout Failed - Expected 200, got ${response.status}`);
    }
}

// Run the GET tests
await runGETTests().then(() => {
    console.log('All GET tests executed.');
});

// Run the POST tests
runPOSTTests().then(() => {
    console.log('All POST tests executed.');
});
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');

body {
    margin: 0;
    color: rgb(81, 81, 194);
    padding-top: 20px;
    background: #dee4e5;
    font: 600 16px/18px "Open Sans", sans-serif;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: url('photo.jpg');
}

*, :after, :before {
    box-sizing: border-box;
}

.clearfix:after, .clearfix:before {
    content: "";
    display: table;
}

.clearfix:after {
    clear: both;
    display: block;
}

a {
    color: inherit;
    text-decoration: none;
}

input, button, select {
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    border: 1px solid #ccc;
    width: 100%;
}

button {
    cursor: pointer;
    background-color: #5c67f2;
    color: white;
    border: none;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

button:hover {
    background-color: #3e4abf;
    transform: translateY(-2px);
}

button:active {
    background-color: #292981;
    transform: translateY(0);
}

.hidden {
    display: none;
}
/* Unified Icon Styling */
.icon-button {
    position: fixed;
    top: 20px;
    font-size: 28px;
    color: black;
    cursor: pointer;
    transition: color 0.3s ease;
    z-index: 100; /* Ensures icons stay on top */
}

/* Specific Icon Positions */
#homeButton {
    right: 240px;
}

#purchaseHistoryButton {
    right: 180px;
}

#userIcon {
    right: 120px;
}

#reviewIcon {
    right: 60px;
}

#logoutButton {
    right: 0px;
}

#cartIcon {
    right: 300px;
    font-size: 24px;
}

#cartCount {
    position: absolute;
    top: -10px;
    right: -10px;
    background: red;
    color: white;
    border-radius: 50%;
    padding: 2px 6px;
    font-size: 12px;
}

/* Hover Effects */
.icon-button:hover {
    color: #5c67f2; /* Color change on hover */
}
#mainContent {
    flex: 1;
    padding-right: 220px;
}

#sidebar {
    width: 220px;
    position: fixed;
    right: 0;
    top: 0;
    height: 100%;
    background-color: #fff;
    padding: 20px;
    box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    overflow-y: auto;
}

#sidebar.open {
    transform: translateX(0);
}

#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 10px 20px;
    box-sizing: border-box;
}

#cartIcon {
    position: absolute;
    top: 2vh;
    right: 2vw; 
    font-size: 2.5vw;
    color: black;
    cursor: pointer;
    transition: color 0.3s ease;
}

#cartCount {
    position: absolute;
    top: -10px;
    right: -10px;
    background: red;
    color: white;
    border-radius: 50%;
    padding: 2px 6px;
    font-size: 12px;
}

#showFilters {
    position: fixed;
    left: 20px;
    top: 20px;
    font-size: 26px;
    cursor: pointer;
    display: flex;
    align-items: center;
    z-index: 20;
    gap: 22px;
    padding: 14px 22px;
    background: linear-gradient(135deg, #f0f4f8, #e6eaee);
    border-radius: 50px;
    box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    transition: all 0.3s ease;
}

#showFilters:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.18);
}

#filtersClose {
    position: absolute;
    right: 20px;
    top: 20px;
    font-size: 24px;
    cursor: pointer;
    display: none;
}

#filtersClose.open {
    display: block;
}

.nav-icons {
    display: flex;
    justify-content: flex-end;
    gap: 20px;
}

.nav-icons a {
    font-size: 26px;
    color: black;
    text-decoration: none;
    transition: color 0.3s ease, transform 0.3s ease;
}

.nav-icons a:hover {
    color: #007bff;
}

.icon-button {
    font-size: 26px;
    color: black;
    cursor: pointer;
}

/* Adjusted positioning for better consistency across screen sizes */
#homeButton,
#logoutButton,
#reviewButton,
#purchaseHistoryButton,
#profileButton,
#adminActivityButton {
    position: absolute;
    top: 20px;
}

#homeButton {
    right: 140px;
}

#logoutButton {
    right: 60px;
}

#reviewButton {
    right: 220px;
}

#purchaseHistoryButton {
    right: 300px;
}

#profileButton {
    right: 370px;
}

#adminActivityButton {
    right: 450px;
}

#categoryContainer {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
}

.category-list li {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 5px;
    flex-direction: row-reverse;
}

.category-list input[type="checkbox"] {
    margin-left: 10px;
    margin-right: 0;
    margin-top: 0;
    transform: translateY(1px);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    #header {
        flex-direction: column;
        align-items: flex-start;
    }

    .icon-button {
        top: auto;
        right: auto;
        margin: 10px 0;
    }

    .nav-icons {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
}

@media (min-width: 769px) {
    .nav-icons a {
        margin: 0 15px;
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Management</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/admin.css">
    <link rel="stylesheet" href="css/button.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1>Admin Management</h1>
    <div id="adminPanel">
        <h2>Add New Product</h2>
        <form id="addProductForm">
            <input type="text" id="newBrand" placeholder="Brand" required>
            <input type="text" id="newModel" placeholder="Model" required>
            <input type="text" id="newDescription" placeholder="Description" required>
            <input type="number" id="newPrice" placeholder="Price" required>
            <input type="url" id="newImage" placeholder="Image URL" required>

            <h3>Categories:</h3>
            <div class="categories">
                <label><input type="checkbox" value="Sports"> Sports</label>
                <label><input type="checkbox" value="Fashion"> Fashion</label>
                <label><input type="checkbox" value="Comfort"> Comfort</label>
                <label><input type="checkbox" value="Style"> Style</label>
                <label><input type="checkbox" value="Casual"> Casual</label>
                <label><input type="checkbox" value="Formal"> Formal</label>
                <label><input type="checkbox" value="Outdoor"> Outdoor</label>
                <label><input type="checkbox" value="Workwear"> Workwear</label>
                <label><input type="checkbox" value="Athleisure"> Athleisure</label>
                <label><input type="checkbox" value="Kids"> Kids</label>
                <label><input type="checkbox" value="Women"> Women</label>
                <label><input type="checkbox" value="Men"> Men</label>
            </div>
            <div id="selectedCategories"></div>

            <input type="text" id="newSizes" placeholder="Sizes (comma separated)" required>
            <button type="submit">Add Product</button>
        </form>

        <h2>Manage Products</h2>
        <div id="productList"></div>

        <h2 class="hidden" id="updateTitle">Update Product</h2>
        <form id="updateProductForm" class="hidden">
            <input type="hidden" id="updateProductId">
            <input type="text" id="updateBrand" placeholder="Brand" required>
            <input type="text" id="updateModel" placeholder="Model" required>
            <input type="text" id="updateDescription" placeholder="Description" required>
            <input type="number" id="updatePrice" placeholder="Price" required>
            <input type="url" id="updateImage" placeholder="Image URL" required>

            <h3>Categories:</h3>
            <div class="categories">
                <label><input type="checkbox" value="Sports"> Sports</label>
                <label><input type="checkbox" value="Fashion"> Fashion</label>
                <label><input type="checkbox" value="Comfort"> Comfort</label>
                <label><input type="checkbox" value="Style"> Style</label>
                <label><input type="checkbox" value="Casual"> Casual</label>
                <label><input type="checkbox" value="Formal"> Formal</label>
                <label><input type="checkbox" value="Outdoor"> Outdoor</label>
                <label><input type="checkbox" value="Workwear"> Workwear</label>
                <label><input type="checkbox" value="Athleisure"> Athleisure</label>
                <label><input type="checkbox" value="Kids"> Kids</label>
                <label><input type="checkbox" value="Women"> Women</label>
                <label><input type="checkbox" value="Men"> Men</label>
            </div>
            <div id="selectedUpdateCategories"></div>

            <input type="text" id="updateSizes" placeholder="Sizes (comma separated)" required>
            <button type="submit">Update Product</button>
        </form>
    </div>

    <script src="/js/admin.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/product.css">
    <link rel="stylesheet" href="css/button.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link active">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1 id="title">SHOE SHOP</h1>

    <div id="mainContent">
        <div id="productContainer"></div>
    </div>

    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <select id="sortByRatingSelect">
            <option value="">Sort by Rating</option>
            <option value="ratingDesc">Highest First</option>
            <option value="ratingAsc">Lowest First</option>
        </select>
        <select id="sortByPriceSelect">
            <option value="">Sort by Price</option>
            <option value="priceDesc">Most Expensive</option>
            <option value="priceAsc">Cheapest First</option>
        </select>
        <button id="applyFiltersButton">Apply Filters</button>
        <div class="category-toggle">Filter by Categories <i class="fas fa-chevron-down"></i></div>
        <div class="category-section">
            <ul class="category-list">
                <li><input type="checkbox" class="category-checkbox" value="Sports"> Sports</li>
                <li><input type="checkbox" class="category-checkbox" value="Fashion"> Fashion</li>
                <li><input type="checkbox" class="category-checkbox" value="Comfort"> Comfort</li>
                <li><input type="checkbox" class="category-checkbox" value="Style"> Style</li>
                <li><input type="checkbox" class="category-checkbox" value="Casual"> Casual</li>
                <li><input type="checkbox" class="category-checkbox" value="Formal"> Formal</li>
                <li><input type="checkbox" class="category-checkbox" value="Outdoor"> Outdoor</li>
                <li><input type="checkbox" class="category-checkbox" value="Workwear"> Workwear</li>
                <li><input type="checkbox" class="category-checkbox" value="Athleisure"> Athleisure</li>
                <li><input type="checkbox" class="category-checkbox" value="Kids"> Kids</li>
                <li><input type="checkbox" class="category-checkbox" value="Women"> Women</li>
                <li><input type="checkbox" class="category-checkbox" value="Men"> Men</li>
            </ul>
            <button id="filterBySelectedCategories">Filter by Selected Categories</button>
        </div>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>

    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="cart.html" id="viewCartButton" class="proceed-button">View Cart</a>
    </div>

    <script src="/js/cart.js"></script>
    <script src="/js/main.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shoe Shop</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/product.css">
    <link rel="stylesheet" href="css/button.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link active">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1 id="title">SHOE SHOP</h1>

    <div id="mainContent">
        <div id="productContainer"></div>
    </div>

    <div id="sidebar">
        <h2>Filters</h2>
        <input type="text" id="searchInput" placeholder="Search products...">
        <select id="sortByRatingSelect">
            <option value="">Sort by Rating</option>
            <option value="ratingDesc">Highest First</option>
            <option value="ratingAsc">Lowest First</option>
        </select>
        <select id="sortByPriceSelect">
            <option value="">Sort by Price</option>
            <option value="priceDesc">Most Expensive</option>
            <option value="priceAsc">Cheapest First</option>
        </select>
        <button id="applyFiltersButton">Apply Filters</button>
        <div class="category-toggle">Filter by Categories <i class="fas fa-chevron-down"></i></div>
        <div class="category-section">
            <ul class="category-list">
                <li><input type="checkbox" class="category-checkbox" value="Sports"> Sports</li>
                <li><input type="checkbox" class="category-checkbox" value="Fashion"> Fashion</li>
                <li><input type="checkbox" class="category-checkbox" value="Comfort"> Comfort</li>
                <li><input type="checkbox" class="category-checkbox" value="Style"> Style</li>
                <li><input type="checkbox" class="category-checkbox" value="Casual"> Casual</li>
                <li><input type="checkbox" class="category-checkbox" value="Formal"> Formal</li>
                <li><input type="checkbox" class="category-checkbox" value="Outdoor"> Outdoor</li>
                <li><input type="checkbox" class="category-checkbox" value="Workwear"> Workwear</li>
                <li><input type="checkbox" class="category-checkbox" value="Athleisure"> Athleisure</li>
                <li><input type="checkbox" class="category-checkbox" value="Kids"> Kids</li>
                <li><input type="checkbox" class="category-checkbox" value="Women"> Women</li>
                <li><input type="checkbox" class="category-checkbox" value="Men"> Men</li>
            </ul>
            <button id="filterBySelectedCategories">Filter by Selected Categories</button>
        </div>
        <select id="sizeFilter">
            <option value="">All Sizes</option>
        </select>
        <div id="availableBrandsToggle">Available Brands</div>
        <div id="availableBrands"></div>
        <div id="filtersClose" class="fas fa-times"></div>
    </div>

    <div id="cartContainer">
        <h2>Shopping Cart</h2>
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="cart.html" id="viewCartButton" class="proceed-button">View Cart</a>
    </div>

    <!-- Scripts -->
    <script src="/js/cart.js"></script>
    <script src="/js/main.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelector('.logout').addEventListener('click', function (event) {
                event.preventDefault();
                event.stopPropagation();  // Stop the event from propagating to parent elements
                
                fetch('/logout', {
                    method: 'GET',
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    }
                })
                .catch(error => {
                    console.error('Error during logout:', error);
                });
            });

            const categoryToggle = document.querySelector('.category-toggle');
            const categorySection = document.querySelector('.category-section');

            categoryToggle.addEventListener('click', () => {
                categorySection.style.display = categorySection.style.display === 'none' ? 'flex' : 'none';
            });

        });
    </script>

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Reviews</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/reviews.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link active">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1>All Reviews</h1>
    <div id="reviewsContainer">
        <!-- Reviews content here -->
    </div>

    <script src="/js/reviews.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/cart.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link active">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1>Shopping Cart</h1>
    <div id="cartContainer">
        <!-- Cart content here -->
    </div>

    <script src="/js/cart.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/checkout.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1>Checkout</h1>
    <div id="checkoutContainer">
        <!-- Checkout content here -->
    </div>

    <script src="/js/checkout.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase History</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/purchase-history.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link active">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <div class="container">
        <h1>Purchase History</h1>
        <div id="purchaseHistoryContainer">
            <!-- Purchase history content here -->
        </div>
    </div>

    <script src="/js/purchaseHist.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/reviews.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link active">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <div class="review-container">
        <h1>Submit a Review</h1>
        <form id="reviewForm">
            <label for="productName">Product:</label>
            <input type="text" id="productName" disabled>
            <label for="rating">Rating:</label>
            <select id="rating">
                <option value="1">1 - Very Bad</option>
                <option value="2">2 - Bad</option>
                <option value="3">3 - Average</option>
                <option value="4">4 - Good</option>
                <option value="5">5 - Excellent</option>
            </select>
            <label for="reviewText">Review:</label>
            <textarea id="reviewText" rows="4"></textarea>
            <button type="submit">Submit</button>
        </form>
    </div>

    <script src="/js/review.js"></script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" type="image/png" href="images/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="images/favicon-16x16.png" sizes="16x16" />
    <title>Order History</title>
    <!--stylesheet-->
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/purchase-history.css">
    <link rel="stylesheet" href="css/icons.css">
    <!--scripts-->
    <script type="text/javascript" src="scripts/jquery-3.2.1.min.js"></script>
    <script type="text/javascript" src="scripts/all-plugins.js"></script>
    <script type="text/javascript" src="scripts/plugins-activate.js"></script>
</head>

<body id="page-top">
    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link active">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <!-- Header -->
    <div class="logo">
        <i class="fa fa-plane" aria-hidden="true"><span>Travel</span></i>
    </div>
    <a class="menu-toggle rounded" href="#">
        <i class="fa fa-bars"></i>
    </a>
    <nav id="sidebar-wrapper">
        <ul class="sidebar-nav">
            <li class="sidebar-brand">
                <a class="smooth-scroll" href="#Header"></a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#page-top">Home</a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#About">About</a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#Services">Services</a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#Portfolio">Portfolio</a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#Testimonials">Testimonials</a>
            </li>
            <li class="sidebar-nav-item">
                <a class="smooth-scroll" href="#Contact">Contact</a>
            </li>
        </ul>
    </nav>

    <!-- Main Content -->
    <section id="Banner" class="content-section">
        <div class="container content-wrap text-center">
            <h1>Order History</h1>
            <h3><em>Review your past purchases</em></h3>
        </div>
        <div class="overlay"></div>
    </section>

    <!-- About Us Section -->
    <section id="About" class="content-section">
        <div class="container text-center">
            <div class="row">
                <div class="col-lg-12">
                    <div class="block-heading">
                        <h2>About Us</h2>
                    </div>
                    <p class="lead">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Services Section -->
    <section id="Services" class="content-section text-center">
        <div class="container">
            <div class="block-heading">
                <h2>What We Offer</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-6">
                    <div class="service-box">
                        <div class="service-icon yellow">
                            <div class="front-content">
                                <i class="fa fa-globe" aria-hidden="true"></i>
                                <h3>Family Travel</h3>
                            </div>
                        </div>
                        <div class="service-content">
                            <h3>Family Travel</h3>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="service-box">
                        <div class="service-icon orange">
                            <div class="front-content">
                                <i class="fa fa-suitcase"></i>
                                <h3>Business Travel</h3>
                            </div>
                        </div>
                        <div class="service-content">
                            <h3>Business Travel</h3>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="service-box">
                        <div class="service-icon red">
                            <div class="front-content">
                                <i class="fa fa-male" aria-hidden="true"></i>
                                <h3>Solo Travel</h3>
                            </div>
                        </div>
                        <div class="service-content">
                            <h3>Solo Travel</h3>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="service-box">
                        <div class="service-icon grey">
                            <div class="front-content">
                                <i class="fa fa-users"></i>
                                <h3>Camping</h3>
                            </div>
                        </div>
                        <div class="service-content">
                            <h3>Camping</h3>
                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Portfolio Section -->
    <section class="content-section text-center" id="Portfolio">
        <div class="container">
            <div class="block-heading">
                <h2>Portfolio</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
            </div>
            <div class="portfolio-wrapper clearfix">
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-two.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-two.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-three.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-three.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-four.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-four.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-five.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-five.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-six.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-six.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
                <a class="each-portfolio" data-fancybox="gallery" href="images/p-three.jpeg">
                    <div class="content hover-cont-wrap">
                        <div class="content-overlay"></div>
                        <img class="content-image" src="images/p-three.jpeg">
                        <div class="content-details fadeIn-bottom">
                            <h5 class="p-title">Title</h5>
                            <p class="p-desc">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                            <span class="zoom"><i class="fa fa-search-plus"></i></span>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    </section>

    <!-- Testimonials Section -->
    <section id="Testimonials" class="content-section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <div class="block-heading">
                        <h2>Testimonials</h2>
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
                    </div>
                    <div id="customers-testimonials" class="owl-carousel">
                        <div class="item">
                            <div class="shadow-effect">
                                <img class="img-circle" src="images/sarah.jpg" alt="">
                                <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s</p>
                            </div>
                            <div class="testimonial-name">Sarah Jenks</div>
                        </div>
                        <div class="item">
                            <div class="shadow-effect">
                                <img class="img-circle" src="images/tangelia.jpg" alt="">
                                <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old</p>
                            </div>
                            <div class="testimonial-name">Tangelia Ekhoff</div>
                        </div>
                        <div class="item">
                            <div class="shadow-effect">
                                <img class="img-circle" src="images/john-doe.jpg" alt="">
                                <p>There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</p>
                            </div>
                            <div class="testimonial-name">John Doe</div>
                        </div>
                        <div class="item">
                            <div class="shadow-effect">
                                <img class="img-circle" src="images/amy.jpg" alt="">
                                <p>All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words</p>
                            </div>
                            <div class="testimonial-name">Amy Tan</div>
                        </div>
                        <div class="item">
                            <div class="shadow-effect">
                                <img class="img-circle" src="images/daniel.jpg" alt="">
                                <p>Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy.</p>
                            </div>
                            <div class="testimonial-name">Daniel Felsted</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Contact Us Section -->
    <section id="Contact" class="content-section">
        <div class="container">
            <div class="block-heading">
                <h2>Contact Us</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
            </div>
            <div class="row">
                <div class="col-sm-12 col-md-6 col-lg-6">
                    <div class="contact-wrapper">
                        <div class="address-block border-bottom">
                            <h3 class="add-title">Headquaters</h3>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-map-marker" aria-hidden="true"></i></span><span class="c-info">&nbsp;35 Street - Cheyenne, CO 80810</span>
                            </div>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-phone" aria-hidden="true"></i></span><span class="c-info">+123 4567 898</span>
                            </div>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-envelope" aria-hidden="true"></i></span><span class="c-info">email@yourdomain.com</span>
                            </div>
                        </div>
                        <div class="address-block">
                            <h3 class="add-title">Branch</h3>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-map-marker" aria-hidden="true"></i></span><span class="c-info">&nbsp;98 Berry - Cheyenne, CO 80810</span>
                            </div>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-phone" aria-hidden="true"></i></span><span class="c-info">+123 4567 8987</span>
                            </div>
                            <div class="c-detail">
                                <span class="c-icon"><i class="fa fa-envelope" aria-hidden="true"></i></span><span class="c-info">email@yourdomain.com</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-6 col-lg-6">
                    <div class="form-wrap">
                        <form action="javascript:void(0)" method="post">
                            <div class="fname floating-label">
                                <input type="text" class="floating-input" name="full name" />
                                <label for="title">First Name</label>
                            </div>
                            <div class="fname floating-label">
                                <input type="text" class="floating-input" name="full name" />
                                <label for="title">Last Name</label>
                            </div>
                            <div class="email floating-label">
                                <input type="email" class="floating-input" name="email" />
                                <label for="email">Email</label>
                            </div>
                            <div class="contact floating-label">
                                <input type="tel" class="floating-input" name="contact" />
                                <label for="email">Mobile</label>
                            </div>
                            <div class="company floating-label">
                                <textarea type="text" class="floating-input" name="company"></textarea>
                                <label for="email">Message</label>
                            </div>
                            <div class="submit-btn">
                                <button type="submit">Submit</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer text-center">
        <div class="container">
            <ul class="list-inline">
                <li class="list-inline-item">
                    <a class="social-link rounded-circle text-white mr-3" href="javascript:void(0)">
                        <i class="fa fa-facebook" aria-hidden="true"></i>
                    </a>
                </li>
                <li class="list-inline-item">
                    <a class="social-link rounded-circle text-white mr-3" href="javascript:void(0)">
                        <i class="fa fa-twitter" aria-hidden="true"></i>
                    </a>
                </li>
                <li class="list-inline-item">
                    <a class="social-link rounded-circle text-white" href="javascript:void(0)">
                        <i class="fa fa-linkedin" aria-hidden="true"></i>
                    </a>
                </li>
            </ul>
            <p class="text-muted small mb-0">Copyright © Your Website 2018</p>
            <p class="text-muted small mb-0">Designed by <a href="https://www.position2.com/" target="_balnk">Position2</p>
        </div>
    </footer>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave a Review</title>
    <link rel="stylesheet" href="css/global.css">
    <link rel="stylesheet" href="css/layout.css">
    <link rel="stylesheet" href="css/reviews.css">
    <link rel="stylesheet" href="css/buttons.css">
</head>
<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <ul class="nav-links">
            <li><a href="index.html" class="nav-link">Home</a></li>
            <li><a href="profile.html" class="nav-link">Profile</a></li>
            <li><a href="purchase-hist.html" class="nav-link">Purchase History</a></li>
            <li><a href="all-reviews.html" class="nav-link active">Reviews</a></li>
            <li><a href="cart.html" class="nav-link">Cart</a></li>
            <li><a href="#" class="nav-link logout">Logout</a></li>
        </ul>
    </nav>

    <h1>Leave a Review</h1>
    <div id="reviewPanel">
        <img id="productImage" src="" alt="Shoe Image">
        
        <div class="rating-category">
            <h3>Comfort:</h3>
            <p>How comfortable the shoe feels during regular wear.</p>
            <div class="rating-container" id="comfort">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Style:</h3>
            <p>The aesthetic appeal and design of the shoe.</p>
            <div class="rating-container" id="style">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Durability:</h3>
            <p>How well the shoe holds up over time with regular use.</p>
            <div class="rating-container" id="durability">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Material Quality:</h3>
            <p>The quality of the materials used in the shoe's construction.</p>
            <div class="rating-container" id="materialQuality">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>
        
        <div class="rating-category">
            <h3>Value for Money:</h3>
            <p>The balance between the shoe's price and the quality/features offered.</p>
            <div class="rating-container" id="valueForMoney">
                <i class="fas fa-star" data-value="1"></i>
                <i class="fas fa-star" data-value="2"></i>
                <i class="fas fa-star" data-value="3"></i>
                <i class="fas fa-star" data-value="4"></i>
                <i class="fas fa-star" data-value="5"></i>
            </div>
        </div>

        <h3>Additional Comments:</h3>
        <textarea id="additionalComments" placeholder="Write your review here..."></textarea>
        <button id="submitReview">Submit Review</button>
    </div>
    <script src="js/review.js"></script>

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <!-- Link to external CSS -->
    <link rel="stylesheet" href="my.css/cart.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="cart-page">

    <!-- Navbar -->
    <div id="header">
        <!-- Profile and Logout links -->
        <a href="profile.html" id="profileButton" class="header-link">Profile</a>
        <a href="login.html" id="logoutButton" class="header-link">Logout</a>
        <a href="readme.html" class="header-link readme-button">Readme</a>
        <a href="llm.html" class="header-link llm-button">LLM</a>
        <img src="icon.webp" alt="Sneaker Icon" class="sneaker-icon">
        <h1 id="title">SHOE SHOP</h1>
        <div id="navMenu">
            <a href="index.html" id="homeButton" class="header-link">Home</a>
            <a href="all-reviews.html" id="Reviews" class="header-link">Reviews</a>
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="header-link">Purchase History</a>
        </div>
    </div>

    <!-- Shopping Cart Content -->
    <div id="mainContent">
        <h1>Shopping Cart</h1>
        <div id="cartContainer">
            <div id="cartItems"></div>
            <div id="cartTotal"></div>
            <a href="checkout.html" id="proceedToCheckoutButton" class="proceed-button">Proceed to Checkout</a>
        </div>
    </div>

    <!-- Ensure this script tag is just before the closing body tag -->
    <script src="/js/cart.js"></script>
</body>
</html>
document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartTotalContainer = document.getElementById('cartTotal');

    if (!cartItemsContainer || !cartTotalContainer) {
        return;
    }

    // Fetch cart data from cookies
    const cart = loadCartFromCookies();

    // Function to display cart items and total price
    function displayCartItems() {
        cartItemsContainer.innerHTML = ''; // Clear previous cart items
        let totalPrice = 0;

        cart.forEach((item, index) => {
            const itemPrice = item.price !== undefined ? item.price : 0;
            totalPrice += itemPrice * item.quantity;

            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            cartItem.innerHTML = `
                <h4>${item.brand} - ${item.model}</h4>
                <img src="${item.image}" alt="Image of ${item.brand} ${item.model}" />
                <p>Size: ${item.size}</p>
                <div class="quantity-control">
                    <button class="decrease-quantity" data-index="${index}">-</button>
                    <span>Quantity: x${item.quantity}</span>
                    <button class="increase-quantity" data-index="${index}">+</button>
                </div>
                <p class="item-price">Price: $${itemPrice.toFixed(2)}</p>
            `;
            cartItemsContainer.appendChild(cartItem);
        });

        cartTotalContainer.innerHTML = `<p class="cart-total">Total Price: $${totalPrice.toFixed(2)}</p>`;
        attachEventListeners(); // Attach event listeners after elements are rendered
    }

    // Function to attach event listeners
    function attachEventListeners() {
        // Attach event listeners for increase/decrease buttons
        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function () {
                const index = this.getAttribute('data-index');
                increaseQuantity(index);
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function () {
                const index = this.getAttribute('data-index');
                decreaseQuantity(index);
            });
        });

        // Check if the cart is empty
        if (cart.length > 0) {
            // Attach event listener to "Proceed to Checkout" button only if cart is not empty
            const proceedToCheckoutButton = document.getElementById('proceedToCheckoutButton');
            if (proceedToCheckoutButton) {
                proceedToCheckoutButton.addEventListener('click', function () {
                    // Save selected items to cookie
                    saveSelectedItemsToCookie();

                    // Set a flag indicating that the user can proceed to checkout
                    sessionStorage.setItem('proceedToCheckout', 'true');

                    // Redirect to checkout page
                    window.location.href = 'checkout.html';
                });
            }
        }
    }

    // Function to increase quantity
    function increaseQuantity(index) {
        cart[index].quantity += 1;
        saveCartToCookies(cart);
        displayCartItems();
    }

    // Function to decrease quantity
    function decreaseQuantity(index) {
        if (cart[index].quantity > 1) {
            cart[index].quantity -= 1;
        } else {
            cart.splice(index, 1); // Remove the item if quantity is zero
        }
        saveCartToCookies(cart);
        displayCartItems(); // Re-render the cart items with the updated quantities
    }

    // Function to save selected items to a cookie for checkout
    function saveSelectedItemsToCookie() {
        document.cookie = `selectedItems=${encodeURIComponent(JSON.stringify(cart))}; path=/;`;
    }

    // Display the cart items on page load
    displayCartItems();
});

// Function to get cookie by name
function getCookie(name) {
    const encodedName = encodeURIComponent(name) + "=";
    const cookieArray = document.cookie.split(';');

    for (let cookie of cookieArray) {
        cookie = cookie.trim();
        if (cookie.indexOf(encodedName) === 0) {
            const cookieValue = cookie.substring(encodedName.length, cookie.length);
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

// Function to load the cart from cookies
function loadCartFromCookies() {
    const cartData = getCookie('cart');
    if (cartData) {
        try {
            return JSON.parse(cartData);
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return [];
}

// Function to save the cart to cookies
function saveCartToCookies(cart) {
    document.cookie = `cart=${encodeURIComponent(JSON.stringify(cart))}; path=/;`;
}
body {
    margin: 0;
    color: rgb(81, 81, 194);
    padding-top: 20px;
    background: #dee4e5;
    font: 600 16px/18px "Open Sans", sans-serif;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: url('photo.jpg');
}

#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background-color: #333;
    color: white;
    padding: 10px 20px;
    position: relative;
    gap: 40px;
}

.header-link {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
}

.header-link:hover {
    color: #cacaca; /* Grayish color on hover */
}

#title {
    font-family: 'Poppins', sans-serif;
    font-size: 2.5em;
    text-align: center;
    animation: move 5s infinite;
    margin: 0 auto;
    flex: 1;
}

#navMenu {
    display: flex;
    align-items: center;
    gap: 40px;
}

#navMenu a {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
}

#navMenu a:hover {
    color: #cacaca;
}

.sneaker-icon {
    width: 20px; /* Adjust the size as needed */
    height: auto;
    margin: 0 10px; /* Adjust the margin for spacing */
    vertical-align: middle; /* Aligns with the text vertically */
    display: inline-block; /* Ensures the icon stays inline */
}

#mainContent {
    flex: 1;
    padding-right: 220px;
}

#cartContainer {
    display: block;
    margin-top: 20px;
    background: #fff; /* White background */
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    width: 90%;
    max-width: 1400px;
    overflow-y: auto; /* Allow scrolling if content exceeds container */
}

.cart-item {
    border-bottom: 2px solid #ddd;
    padding: 20px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.5rem;
    margin-bottom: 20px;
}

.cart-item img {
    width: 250px;
    height: auto;
    margin-right: 20px;
}

.cart-total {
    font-weight: bold;
    margin-top: 20px;
    text-align: right;
    font-size: 2rem;
}

.proceed-button {
    display: inline-block;
    padding: 20px 40px;
    margin-top: 40px;
    background-color: #5151c2;
    color: white;
    text-align: center;
    text-decoration: none;
    border-radius: 12px;
    font-size: 24px;
    font-weight: bold;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s ease, transform 0.3s ease;
}

.proceed-button:hover {
    background-color: #3737a1;
    transform: translateY(-4px);
}

.proceed-button:active {
    background-color: #292981;
    transform: translateY(0);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="my.css/styles.css"> <!-- Link to external CSS -->
</head>
<body>
    <!-- Navbar -->
    <div id="header">
        <!-- Profile, Logout, Readme, and LLM links -->
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="profile.html" id="profileButton" class="header-link">Profile</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="/logout" id="logoutButton" class="header-link">Logout</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="readme.html" class="header-link">Readme</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="llm.html" class="header-link">LLM</a>
        <h1 id="title">SHOE SHOP</h1>
        <div id="navMenu">
            <a href="index.html" id="homeButton" class="header-link">Home</a>
            <i class="fas fa-shoe-prints navbar-icon"></i>
            <a href="all-reviews.html" id="Reviews" class="header-link">Reviews</a>
            <i class="fas fa-shoe-prints navbar-icon"></i>
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="header-link">Purchase History</a>
            <i class="fas fa-shoe-prints navbar-icon"></i>
        </div>
    </div>

    <h1>Shopping Cart</h1>
    <div id="cartContainer">
        <div id="cartItems"></div>
        <div id="cartTotal"></div>
        <a href="checkout.html" id="proceedToCheckoutButton" class="proceed-button">Proceed to Checkout</a>
    </div>

    <script src="/js/cart.js"></script>
</body>
</html>
/* Updated styles for horizontal cart layout */
#cartContainer {
    width: 90%;
    max-width: 1400px;
    background: white;
    padding: 40px;
    border-radius: 16px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    margin-top: 20px;
    overflow-x: auto; /* Horizontal scroll if necessary */
    display: flex;
    flex-direction: column; /* Main cart container flex column */
    align-items: center;
}

.cart-item {
    display: flex; /* Display items in a row */
    align-items: center; /* Center align items vertically */
    border-bottom: 2px solid #ddd;
    padding: 20px 0;
    font-size: 1.5rem;
    width: 100%; /* Use full width for each item */
    gap: 20px; /* Gap between elements */
}

.cart-item img {
    width: 300px; /* Larger image for horizontal layout */
    height: auto;
    margin-right: 20px;
}

.cart-item div {
    flex-grow: 1; /* Allow item details to grow */
}

.cart-item .quantity-control {
    display: flex;
    align-items: center;
    margin-top: 10px;
    gap: 20px; /* Adds space between the buttons and text */
}

.cart-total {
    font-weight: bold;
    margin-top: 20px;
    text-align: right;
    font-size: 2rem;
}
/* Common styles for both pages */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
    color: #5151c2;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    padding-top: 20px;
}

/* Styles specific to the index page */
.index-page #cartContainer {
    display: none; /* Index page uses cart pop-up */
    /* Other index-page specific styles */
}

/* Styles specific to the cart page */
.cart-page #cartContainer {
    width: 90%;
    max-width: 1400px;
    background: white;
    padding: 40px;
    border-radius: 16px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    margin-top: 20px;
    overflow-x: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.cart-page .cart-item {
    display: flex;
    align-items: center;
    border-bottom: 2px solid #ddd;
    padding: 20px 0;
    font-size: 1.5rem;
    width: 100%;
    gap: 20px;
}

.cart-page .cart-item img {
    width: 300px;
    height: auto;
    margin-right: 20px;
}

.cart-page .cart-item div {
    flex-grow: 1;
}

.cart-page .cart-total {
    font-weight: bold;
    margin-top: 20px;
    text-align: right;
    font-size: 2rem;
}
/* Styles specific to the cart page */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
    color: #5151c2;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    padding-top: 20px;
}

#cartContainer {
    width: 90%;
    max-width: 1400px;
    background: white;
    padding: 40px;
    border-radius: 16px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    margin-top: 20px;
    overflow-x: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.cart-item {
    display: flex; /* Display items in a row */
    align-items: center; /* Center align items vertically */
    border-bottom: 2px solid #ddd;
    padding: 20px 0;
    font-size: 1.5rem;
    width: 100%; /* Use full width for each item */
    gap: 20px; /* Gap between elements */
}

.cart-item img {
    width: 300px; /* Larger image for horizontal layout */
    height: auto;
    margin-right: 20px;
}

.cart-item div {
    flex-grow: 1; /* Allow item details to grow */
}

.cart-item .quantity-control {
    display: flex;
    align-items: center;
    margin-top: 10px;
    gap: 20px; /* Adds space between the buttons and text */
}

.cart-total {
    font-weight: bold;
    margin-top: 20px;
    text-align: right;
    font-size: 2rem;
}

/* Add any other cart-specific styles here */
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Reviews</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
    <link rel="stylesheet" href="my.css/Reviews.css">
</head>
<body>

    <!-- Navbar similar to the index page but without the burger icon -->
    <div id="header">
        <div id="cartIcon" class="fas fa-shopping-cart">
            <div id="cartCount">0</div>
        </div>
        <!-- Profile, Logout, Readme, and LLM links -->
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="profile.html" id="profileButton" class="header-link">Profile</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="/logout" id="logoutButton" class="header-link">Logout</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="readme.html" class="header-link">Readme</a>
        <i class="fas fa-shoe-prints navbar-icon"></i>
        <a href="llm.html" class="header-link">LLM</a>
        <h1 id="title">ALL REVIEWS</h1>
        <div id="navMenu">
            <a href="index.html" id="homeButton" class="header-link">Home</a>
            <i class="fas fa-shoe-prints navbar-icon"></i>
            <a href="all-reviews.html" id="Reviews" class="header-link">Reviews</a>
            <i class="fas fa-shoe-prints navbar-icon"></i>
            <a href="purchase-hist.html" id="purchaseHistoryIcon" class="header-link">Purchase History</a>
        </div>
    </div>

    <div id="filterSection">
        <input type="text" id="searchInput" placeholder="Search by Model Name">
        <button id="searchButton">Search</button>
    </div>

    <div id="reviewsContainer">
        <!-- Reviews will be injected here by JavaScript -->
    </div>

    <script src="/js/all-reviews.js"></script>
</body>
</html>
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');

/* General Styles */
body {
    margin: 0;
    color: rgb(81, 81, 194);
    background: #dee4e5;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background-color: #333;
    color: white;
    padding: 10px 20px;
    position: relative;
    gap: 40px;
}

.header-link {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
}

.header-link:hover {
    color: #aaa;
}

#title {
    font-family: 'Poppins', sans-serif;
    font-size: 2.5em;
    text-align: center;
    animation: move 5s infinite;
    margin: 0 auto;
    flex: 1;
}

@keyframes move {
    0% { transform: translateX(0); }
    50% { transform: translateX(10px); }
    100% { transform: translateX(0); }
}

#filterSection {
    display: flex;
    margin: 20px 0;
    gap: 10px;
}

#searchInput {
    padding: 10px;
    border: 2px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    flex: 1;
}

#searchButton {
    padding: 10px;
    background-color: white;
    color: black;
    border: 2px solid black;
    text-align: center;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
}

#reviewsContainer {
    width: 90%;
    max-width: 1400px;
    background: white;
    padding: 20px;
    border-radius: 16px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    margin-top: 20px;
}

.review-item {
    background: #333;
    color: white;
    padding: 20px;
    margin-bottom: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.review-item h3 {
    font-size: 1.8em;
    margin-bottom: 10px;
}

.review-item p {
    font-size: 1rem;
    margin-bottom: 5px;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Reviews</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
    <link rel="stylesheet" href="my.css/all-reviews.css">
</head>
<body>

    <!-- Placeholder for Navbar -->
    <div id="navbar-placeholder"></div>

    <div id="filterSection">
        <input type="text" id="searchInput" placeholder="Search by Model Name">
        <button id="searchButton">Search</button>
    </div>

    <div id="reviewsContainer">
        <!-- Reviews will be injected here by JavaScript -->
    </div>

    <script src="/js/all-reviews.js"></script>
    <script>
        // Load the navbar from the external HTML file
        document.addEventListener('DOMContentLoaded', () => {
            fetch('navbar.html')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('navbar-placeholder').innerHTML = data;

                    // Conditionally hide or show elements specific to this page
                    document.getElementById('hamburgerMenu')?.classList.add('hidden'); // Hide the hamburger button
                })
                .catch(error => console.error('Error loading the navbar:', error));
        });
    </script>
</body>
</html>
/* Import Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap');

/* Navbar Styles */
#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background-color: #333;
    color: white;
    padding: 10px 20px;
    position: relative;
    gap: 40px;
}

#navMenu {
    display: flex;
    align-items: center;
    gap: 40px;
}

#navMenu a {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
}

#navMenu a:hover {
    color: #cacaca;
}

.navbar-icon {
    width: 20px;
    height: auto;
    margin: 0 10px;
    vertical-align: middle;
    display: inline-block;
    color: white;
}

.header-link {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
}

.header-link:hover {
    color: #aaa;
}

#title {
    font-family: 'Poppins', sans-serif;
    font-size: 2.5em;
    text-align: center;
    animation: move 5s infinite;
    margin: 0 auto;
    flex: 1;
}

@keyframes move {
    0% { transform: translateX(0); }
    50% { transform: translateX(10px); }
    100% { transform: translateX(0); }
}

#cartIcon {
    position: relative;
}

#cartCount {
    position: absolute;
    top: -10px;
    right: -10px;
    background: red;
    color: white;
    border-radius: 50%;
    padding: 2px 6px;
    font-size: 12px;
}

/* Optional element styles, like the hamburger menu, can be included with conditional logic */
.optional-element.hidden {
    display: none;
}
/* Navbar Styles */
#header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background-color: #333;
    color: white;
    padding: 10px 20px;
    gap: 40px;
    position: relative;
}

.header-link {
    color: white;
    font-size: 18px;
    text-decoration: none;
    margin-left: 10px;
    transition: color 0.3s ease;
}

.header-link:hover {
    color: #aaa;
}

.navbar-icon {
    width: 20px;
    height: auto;
    margin: 0 10px;
    vertical-align: middle;
    display: inline-block;
    color: white;
}

#cartIcon {
    position: relative;
    font-size: 20px;
    cursor: pointer;
}

#cartCount {
    position: absolute;
    top: -10px;
    right: -10px;
    background: red;
    color: white;
    border-radius: 50%;
    padding: 2px 6px;
    font-size: 12px;
}
document.addEventListener('DOMContentLoaded', () => {
    const logoutButton = document.getElementById('logoutButton');
    const cartContainer = document.getElementById('cartContainer');
    const cartIcon = document.getElementById('cartIcon');
    const viewCartButton = document.getElementById('viewCartButton');

    // Initially hide the cart container
    if (cartContainer) {
        cartContainer.style.display = 'none';
    }

    // Load and update the cart on page load
    let cart = loadCartFromCookies();
    updateCartDisplay(cart);

    // Logout button functionality
    if (logoutButton) {
        logoutButton.addEventListener('click', function (event) {
            event.preventDefault();
            fetch('/logout', {
                method: 'GET',
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                }
            })
            .catch(error => {
                console.error('Error during logout:', error);
            });
        });
    }

    // Cart icon toggle
    if (cartIcon) {
        cartIcon.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevents other click events from firing
            const isCartVisible = cartContainer.style.display === 'block';
            cartContainer.style.display = isCartVisible ? 'none' : 'block';
        });
    }

    // Hide cart when clicking outside of it
    document.addEventListener('click', (event) => {
        if (cartContainer && !cartContainer.contains(event.target) && event.target !== cartIcon) {
            cartContainer.style.display = 'none';
        }
    });

    // View Cart button event
    if (viewCartButton) {
        viewCartButton.addEventListener('click', function(event) {
            event.preventDefault();
            window.location.href = 'cart.html';
        });
    }

    // Event listener for remove button
    document.body.addEventListener('click', function(event) {
        if (event.target.classList.contains('remove-button')) {
            const productId = event.target.getAttribute('data-id');
            const size = event.target.getAttribute('data-size');
            removeFromCart(productId, size);
        }
    });

    // Initialize reviews display
    fetchAndDisplayReviews();
});

// Utility functions
function loadCartFromCookies() {
    const cartData = getCookie('cart');
    if (cartData) {
        try {
            const parsedCart = JSON.parse(cartData);
            return parsedCart;
        } catch (error) {
            console.error("Error parsing cart data:", error);
        }
    }
    return [];
}

function updateCartDisplay(cart) {
    const cartItemsContainer = document.getElementById('cartItems');
    const cartCount = document.getElementById('cartCount');
    let totalItems = 0;

    cartItemsContainer.innerHTML = ''; // Clear existing cart items

    cart.forEach(item => {
        totalItems += item.quantity;
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <img src="${item.image}" alt="${item.brand} ${item.model}" />
            <div class="cart-item-details">
                <h4>${item.brand} - ${item.model}</h4>
                <p>Size: ${item.size}</p>
                <p>Quantity: ${item.quantity}</p>
                <p>Price: $${(item.price * item.quantity).toFixed(2)}</p>
                <button class="remove-button" data-id="${item.productId}" data-size="${item.size}">&times;</button>
            </div>
        `;
        cartItemsContainer.appendChild(cartItem);
    });

    cartCount.innerText = totalItems; // Update the cart count badge
    cartContainer.style.display = totalItems > 0 ? 'block' : 'none'; // Show or hide the cart container
}

function saveCartToCookies(cart) {
    try {
        const cartString = JSON.stringify(cart);
        setCookie('cart', cartString, 7);
    } catch (error) {
        console.error("Error saving cart to cookies:", error);
    }
}

function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = `; expires=${date.toUTCString()}`;
    document.cookie = `${name}=${encodeURIComponent(value)}${expires}; Path=/; Secure; SameSite=Lax`;
}

function getCookie(name) {
    const nameEQ = encodeURIComponent(name) + "=";
    const cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        let c = cookies[i].trim();
        if (c.indexOf(nameEQ) == 0) {
            return decodeURIComponent(c.substring(nameEQ.length));
        }
    }
    return null;
}

function removeFromCart(productId, size) {
    let cart = loadCartFromCookies();
    const itemIndex = cart.findIndex(item => item.productId === productId && item.size === size);
    if (itemIndex !== -1) {
        if (cart[itemIndex].quantity > 1) {
            cart[itemIndex].quantity -= 1; // Decrease quantity if more than 1
        } else {
            cart.splice(itemIndex, 1); // Remove item if quantity is 1
        }
        saveCartToCookies(cart);
        updateCartDisplay(cart);
    }
}

// Fetch and display reviews
function fetchAndDisplayReviews(filters = {}) {
    const reviewsContainer = document.getElementById('reviewsContainer');
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('productId');
    if (productId) {
        filters.productId = productId;
    }

    let query = new URLSearchParams(filters).toString();
    fetch(`/api/all-reviews?${query}`)
        .then(response => response.json())
        .then(reviews => {
            reviewsContainer.innerHTML = ''; // Clear previous reviews
            reviews.forEach(review => displayReview(review));
        })
        .catch(error => {
            console.error('Error fetching reviews:', error);
            reviewsContainer.innerHTML = '<p class="error-message">Error loading reviews.</p>';
        });
}

function displayReview(review) {
    const overallRating = ((review.comfort + review.style + review.durability + review.materialQuality + review.valueForMoney) / 5).toFixed(2);
    const reviewElement = document.createElement('div');
    reviewElement.classList.add('review-item');
    reviewElement.innerHTML = `
        <h3>${review.title}</h3>
        <p><strong>Overall Rating:</strong> ${overallRating}</p>
        <p><strong>Comfort:</strong> ${review.comfort}</p>
        <p><strong>Style:</strong> ${review.style}</p>
        <p><strong>Durability:</strong> ${review.durability}</p>
        <p><strong>Material Quality:</strong> ${review.materialQuality}</p>
        <p><strong>Value for Money:</strong> ${review.valueForMoney}</p>
        <p><strong>Comments:</strong> ${review.additionalComments || 'None'}</p>
    `;
    const reviewsContainer = document.getElementById('reviewsContainer');
    reviewsContainer.appendChild(reviewElement);
}
document.addEventListener('DOMContentLoaded', () => {
    const logoutButton = document.getElementById('logoutButton');
    const cartContainer = document.getElementById('cartContainer');
    const cartIcon = document.getElementById('cartIcon');
    const viewCartButton = document.getElementById('viewCartButton');

    // Initialize elements' state to ensure correct behavior on the first click
    if (cartContainer) {
        cartContainer.style.display = 'none'; // Ensure the cart starts hidden
    }

    // Load and update the cart on page load
    let cart = loadCartFromCookies();
    updateCartDisplay(cart);

    // Logout button functionality
    if (logoutButton) {
        logoutButton.addEventListener('click', function (event) {
            event.preventDefault();
            fetch('/logout', {
                method: 'GET',
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                }
            })
            .catch(error => {
                console.error('Error during logout:', error);
            });
        });
    }

    // Cart icon toggle
    if (cartIcon) {
        cartIcon.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevents other click events from firing
            cartContainer.style.display = cartContainer.style.display === 'none' ? 'block' : 'none';
        });
    }

    // Hide cart when clicking outside of it
    document.addEventListener('click', (event) => {
        if (cartContainer && !cartContainer.contains(event.target) && event.target !== cartIcon) {
            cartContainer.style.display = 'none';
        }
    });

    // View Cart button event
    if (viewCartButton) {
        viewCartButton.addEventListener('click', function(event) {
            event.preventDefault();
            window.location.href = 'cart.html';
        });
    }

    // Event listener for remove button
    document.body.addEventListener('click', function(event) {
        if (event.target.classList.contains('remove-button')) {
            const productId = event.target.getAttribute('data-id');
            const size = event.target.getAttribute('data-size');
            removeFromCart(productId, size);
        }
    });

    // Initialize reviews display
    fetchAndDisplayReviews();
});

